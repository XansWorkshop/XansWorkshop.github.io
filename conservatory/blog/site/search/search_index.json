{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"The Conservatory Development Blog","text":"<p>\u00a0\u00a0Hello! Welcome to The Conservatory Development Blog! Here, I post chronological updates on my progress through the game's development. I also host peeks into the lore of the game's universe. Go explore!</p>"},{"location":"#what-is-the-conservatory","title":"What is The Conservatory?","text":"<p>\u00a0\u00a0You can learn about the game and my main reason for wanting to create it on the sidebar, here: What is The Conservatory?</p>"},{"location":"#how-can-i-stay-up-to-date","title":"How can I stay up to date?","text":"<p>\u00a0\u00a0I encourage you to join the Discord server! Here, I post updates (including new blog posts), and occasionally will livestream the development of my game. You can also ask questions about it here.</p>"},{"location":"#where-do-i-read","title":"Where do I read?","text":"<p>\u00a0\u00a0The latest blog post was uploaded on 2 September 2025: Mod Code Safety, Inventories (again), Lore. You can find it and other entries on the left side of the page, under the Blog category.</p>"},{"location":"#how-do-i-make-mods-wheres-the-code-documentation","title":"How do I make mods? Where's the code documentation?","text":"<p>\u00a0\u00a0If you are looking for the modding tutorials, visit The Modder's Guide (this link has been temporarily 404'd because it's too early in development).</p>"},{"location":"about/","title":"What is The Conservatory?","text":"<p>Nothing on this page is a promised feature or guaranteed to be in the game.</p> <p>If you are seeing this warning bubble, here is a reminder that this project is in early development. Anything you see here is NOT a promise or guarantee. Features on this page WILL BE ADDED, REMOVED, OR CHANGED WITHOUT ANY SORT OF NOTICE. If I find you on twitter.com saying how I \"broke promises\" because you saw something on this page that I removed later, I will point at you and laugh for being a dummy idiot doodoo bref dummy head, a real stinker, perhaps dare I say, a poopyhead even.</p>"},{"location":"about/#whats-the-game-like","title":"What's the game like?","text":"<p> The Conservatory is a mix of sci-fi and fantasy, a voxel-based sandbox taking place in a procedurally generated universe. You can build your own space ship, fly to other planets, and visit or build space stations. It uses a narratively-driven progression, meaning that your progression isn't a tutorial so much as it is a part of the game's story.</p> <p>\u00a0\u00a0Players will need to make progressively more complicated machinery and tools to progress through the game, adapting their home base to fit their needs as they learn and progress.</p>"},{"location":"about/#the-inspiration","title":"The Inspiration","text":"<p>\u00a0\u00a0For some perspective, here's some popular/well-known titles that directly inspired my design, and why they are sources of inspiration.</p> <ul> <li>Minecraft<ul> <li>This is kind of here out of moral obligation. Every voxel game is a Minecraft clone, no exceptions. Running gag.</li> </ul> </li> <li>Starbound<ul> <li>Starbound is incredible for the writers and roleplayers with its absolutely lovely art and music, and vast universe.</li> <li>But... I wouldn't even wish the agony of trying to mod this game upon my worst enemy. It's rough.</li> </ul> </li> <li>Empyrion: Galactic Survival<ul> <li>Empyrion is a lot of fun and scratches the Robocraft itch. You have to build your own space ship out of blocks and such.</li> <li>But... The game is kind of bland. It's missing a lot, it's buggy, and gets old quick. The developer, at least as of writing, is actively against the idea of code modding. So even modders like me can't add new stuff.</li> <li>And... It's missing that lovely feel that Starbound has which helps it to feel well rounded and cozy. It feels \"cheap\", for lack of a better term. So much work has gone into it but it's just not quite there yet.</li> </ul> </li> <li>No Man's Sky<ul> <li>NMS is a technical marvel and basically the best of the best of all time when it comes to procedural generation.</li> <li>But... It is very difficult to facilitate writing and roleplay in because it's not well suited for it. It's a game to play, not to be a part of, so the entire universe feels more like a display case than something to integrate with.</li> <li>And... It's missing that freedom of building that you can get in voxel games. It instead uses prefab-based building, and while decoration options are in the hundreds, it still always looks the same as you go between bases.</li> </ul> </li> </ul>"},{"location":"about/#the-design-goals","title":"The Design Goals","text":"<ul> <li>I want good storytelling and art, to feel involved. I want to be a part of the world, and to be able to control the world for the sake of presentation and immersion. I want to facilitate the ability to write your own story for your character and be someone.</li> <li>I want the ability to freely interact with the world, typically best expressed through voxels. Everything should be buildable, even your ship, and it should be buildable in as many places as possible. </li> <li>I want people to be able to painlessly mod my game. I want mods to be natively supported and easy for anyone to make.</li> <li>I want multiplayer and a good role-playing environment.</li> <li>I want mechanics that have a good feel to them, punchy combat and good vehicle controls.</li> </ul>"},{"location":"about/#the-developer-and-the-inspiration","title":"The Developer and The Inspiration","text":"<p>This section is largely optional.</p> <p>This is a huge autobiography and a bunch of shoutouts to media I like that helped influence the design choices I've made (or plan to make) to the game. It's a good read if you really want the extra detail, but if you just want to figure out what the game is (as in, what it's like to play, what it'll have in it), skip this section!</p> <p>\u00a0\u00a0This section mostly classifies as a sort of \"moodboard\". I'm not good with words. I'm crazy autistic and couldn't explain this if my life depended on it. So instead, I'm going to show you pieces of media that evoke the feelings. Feel the frame of reference for yourself:</p>"},{"location":"about/#sources-of-inspiration","title":"Sources of Inspiration","text":"<p>\u00a0\u00a0If you are in this list, consider yourself honored, at least by me! These are various pieces of media or games that I strongly recommend having a look at, seriously!</p>"},{"location":"about/#vrchat-worlds","title":"VRChat Worlds","text":"<p>By far the largest of these sections.</p> <p> For some context for those who have never played VRChat: <ul> <li>VRChat is free on Steam (press here to open it directly in the Steam app). <ul> <li>You do not need VR to play it, you can play with typical FPS controls on desktop.</li> </ul> </li> <li>It is largely dominated by furries and the sort. For average Joe, the takeaway here is that you can imagine most players as a member of some selected species, a bit like aliens in a sci-fi universe.<ul> <li>Everybody is their own thing, but typically based on something real or made up and shared by many others, and so there is uniformity in groups of people. These common species are often called \"avatar bases\", as they serve as a common \"base\" for people to customize their avatars. So if you see me using that term, \"avatar base\", think species or race.</li> <li>This is useful because a significant amount of the worlds linked below play on this fact.</li> <li>You do not need to find a special avatar to visit these worlds. You can visit in anything, default avatar included. Just jump in!</li> <li>It is worth it to note that in VR social games like this, the body people use is significantly closer to the sense of self for the user, so while in a typical PC game such strong emphasis on your character may not be important, in VR it is especially important for some people. </li> </ul> </li> </ul> <p>\u00a0\u00a0Anyway, the worlds:</p> <ul> <li>Qoo H. Bocuma International Airport, The Pact, and Hokyl Night by hdorriker, DekaWolf, and Fraxul (collectively). These three worlds take place in one universe. This captures a certain lighthearted attitude about sci-fi worlds that I wish wasn't so rare. I'm not going to lie to you, I'm pretty tired of the crisp, perfected future species, but I'm also tired of the grunge criminal-run megacities. I want something funny in my bowl of future. Why's it always super clean or super filthy?<ul> <li>Qoo H. Bocuma International Airport covers both international and interstellar travel. It contains hilarious gags for specific families of avatar bases, and a bunch of jokes for the tight knit and the public alike. You can also ride the (sentient) baggage system. Eurobeat included for the carts.</li> <li>Hokyl Night is the city that the airport is in. And when I say \"the city\", I mean \"the city\". The whole thing. Like you get floating point rounding error artifacts near its borders (thanks Unity). It's the whole city.</li> <li>The Pact is an embassy for the races that make up the universe, and it's a treasure trove of the little jokes and hilariously creative humor that scratches the sci-fi itch. Bureaucracy is so boring. That's why they host office kickball tournaments with varyingly possibly-ill-ideologically promotional posters, of course!</li> <li>It's worth it to mention that while humor is a huge part of these worlds, they are still serious! It's a bit like Hitchhiker's Guide with its humor, in that the world is coherent and has legitimate things, but they aren't afraid to put a promotional poster that says \"Do you hate pooping?\" right next to a travel ad (I am not joking).</li> </ul> </li> <li>Wild Flower \uff5c \u91ce\u306e\u82b1 , Nest \u30cd\u30b9\u30c8, and I N I T I U M\u00a0 \u2044\u2044\u2044 \u30a4\u30cb\u30b7\u30e3\u30eb by Artsy Glitch. These worlds also share a universe (*as far as I can tell). They have a particular artstyle that definitely influenced my style for Kirivian architecture. It's this weirdly relaxing mixture of refurbished post-apocalyptic bunker x solarpunk. Honestly the feelings that this set of worlds evokes are too difficult to describe with words, in particular I urge you to visit these yourself.<ul> <li>Wild Flower \uff5c \u91ce\u306e\u82b1 is a somewhat large bunker with varying living accomodations ranging from antique furniture to neo-material furniture that just screams \"space age\" to me. It has a TV, botanical observatory, indoor firepit, and a bedroom. I'm not trying to sell you a house, pinky promise.</li> <li>Nest \u30cd\u30b9\u30c8 is another decked out bunker, but this time it's single room, intended to be made your VR home world in all likelihood. Very cozy, same aesthetic as the previous world, but far more personable.</li> <li>I N I T I U M\u00a0 \u2044\u2044\u2044 \u30a4\u30cb\u30b7\u30e3\u30eb is an interesting world whose lore is not entirely clear. It seems to be taking care of(?) some strange tree which is closely related to evangelical occurrences? They do seem to have frames for futuristic angels laying around, which is pretty sick.</li> </ul> </li> <li>Antiheat's Apartment by Antiheat (who woulda thunk) is, despite the name, an entire city rather than just the apartment within that city. Antiheat's universe here intermingles with that created by hdorriker et. al., and captures a slightly-more-serious tone. It's one of your more typical sci-fi worlds, but it has a feel to it that I really like knowing it's an extension of a universe I already really love.</li> <li>Furality Sylva: Treehouse Village by Furality Team is a virtual convention world. This one was a huge, huge source of inspiration for the style of the Kirivian people rather than their architecture. This perfectly captures that nomadic vibe. I am very thankful that the team uploads archives of previous years' conventions for public access.</li> </ul>"},{"location":"about/#film","title":"Film","text":"<p>\u00a0\u00a0I'm not much of a TV/Movie guy so this will be considerably smaller, but of those that I have watched, some of them have managed to weasel their way into my writing.</p> <ul> <li>Star Trek is basically the only TV series that I have actively tried to watch the entirety of. I'm picky with my shows!</li> </ul>"},{"location":"about/#other-games","title":"Other Games","text":"<p>\u00a0\u00a0Four games were the \"core\" inspiration for this, so they are in their own section below. Honorable mentions are here.</p> <ul> <li>Rain World is a very important title. Despite my love (and qualms) toward the game, it is undeniable that it set a pretty significant precedent for what it means to be an immersive game. It shows just how much the little details matter. That's why it's popular! A bunch of the little details that make the ecosystem feel real in the constraints of what it is, have set it head and shoulders above other games in its league, and it is very highly regarded for this fact.</li> <li>Robocraft has fun building with blocks and guns. If you have played Crossout, it's kind of the original predecessor to it. Another good analogue is TerraTech. Unfortunately I don't know how much longer this link will work; as of today (8 January 2025) FreeJam has announced it is shutting down entirely, which means Robocraft is going with it.</li> </ul>"},{"location":"engine/","title":"Godot Engine: Conservatory Edition","text":"<p>\u00a0\u00a0The Conservatory runs on a custom version of the Godot game engine with modifications ranging from \"generally helpful\" to \"required for proper function\". This page outlines the features that have been added or changed.</p> <p>\u00a0\u00a0To view the original contributors and creators, please visit https://godotengine.org/license.</p>"},{"location":"engine/#core-changes","title":"Core Changes","text":"<p>\u00a0\u00a0Changes relevant only to The Conservatory.</p>"},{"location":"engine/#simulationdomain","title":"<code>SimulationDomain</code>","text":"<p> <code>SimulationDomain</code> is a highly complex type fundamental to the game. It is a mix between <code>SubViewport</code> and <code>Viewport</code> with several unique properties:</p> <ul> <li>Only one <code>SimulationDomain</code> can be active at a time; an instance must be made active explicitly.<ul> <li>Active <code>SimulationDomain</code>s override the root viewport, effectively becoming that viewport.</li> <li>All settings that affect the viewport (like graphics settings) are proxies to that of the root viewport; <code>SimulationDomain</code> inherits the properties but doesn't actually use them since it still piggybacks off of the root viewport.</li> </ul> </li> <li><code>SimulationDomain</code>s always have their own 2D and 3D physics spaces and render scenarios, meaning their own <code>World2D</code> and <code>World3D</code> as well. These simulate in the background regardless of if the domain is active.</li> <li><code>SimulationDomain</code> is highly protected. You cannot create new instances of it, only the engine can. Even the slightest misuse of it outside of its strict specification will purposely crash the game. It's basically the only class in the game where I growl at you and say don't touch. It's very sensitive!<ul> <li>You can still query its <code>World2D</code> and <code>World3D</code>, as well as its <code>PhysicsSpace</code> and <code>RenderScenario</code> properties to access the respective RIDs.</li> <li>Don't you even think about freeing these objects. Unless you like it when the game crashes on you. I'm not your mom.</li> </ul> </li> </ul> <p>\u00a0\u00a0In essence, <code>SimulationDomain</code> does what it says on the tin - it's an entire domain upon which the game is simulated, both physics and rendering. As you may be able to infer, these are used for running several worlds at once, primarily on servers where players may be on different planets at once, and so all of them need to be simulated in their own little isolated box.</p>"},{"location":"engine/#conservatorydebugbridge","title":"<code>ConservatoryDebugBridge</code>","text":"<p>\u00a0\u00a0This class is largely internal, but the short description is that it allows debug versions of the engine to hook into The Conservatory itself, permitting the C# debugger to also debug the engine using its associated .pdb files. This was especially useful when designing <code>SimulationDomain</code> since I could see exactly how the managed and unmanaged parts of the code worked together.</p>"},{"location":"engine/#physics-and-spacevector-improvements","title":"Physics and Space/Vector Improvements","text":"<p>\u00a0\u00a0Changes to the physics engine, its API, and types relating to space.</p>"},{"location":"engine/#raycast3ddirect-and-shapecast3ddirect","title":"<code>RayCast3DDirect</code> and <code>ShapeCast3DDirect</code>","text":"<p>\u00a0\u00a0These two classes are, unlike their siblings <code>RayCast3D</code> and <code>ShapeCast3D</code>, not based on <code>Node</code>. Instead, these instances provide fast, low level physics engine access to perform raycasts on demand. This is used by several systems in the game, in particular deferred casting, which uses an instance of this type to effectively perform and store a raycast so that it can be done in an <code>async</code> method (see <code>Star3D.Maths.Physics.Raycasting::RaycastAsync()</code>).</p> <p>\u00a0\u00a0The primary benefits of these types include:</p> <ul> <li>No scene tree access is required to operate them.</li> <li>They avoid the slow <code>Godot.Collections.Dictionary</code> return from <code>PhysicsServer3D.intersect_ray</code> and <code>PhysicsServer3D.intersect_shape</code>.</li> <li>They cast only when you tell them to, and can export their results.</li> </ul>"},{"location":"engine/#raycastresult-improvements","title":"<code>RayCastResult</code> Improvements","text":"<ul> <li><code>RayCastResult</code> was added to contain results from <code>RayCast3DDirect</code>. It, and <code>RayCast3D</code>, now include a new enum property <code>HitObjectType</code>. This will be either <code>Invalid</code>, <code>Area</code>, <code>Body</code>, or <code>SoftBody</code>, and can be used to appropriately handle raw collider <code>RID</code>s since The Conservatory makes extensive use of physics objects without nodes.</li> <li><code>ShapeCastResult</code> is now a thing to go with <code>ShapeCast3DDirect</code> too.</li> </ul>"},{"location":"engine/#vector-rect-and-transform-changes","title":"<code>Vector</code>, <code>Rect</code>, and <code>Transform</code> Changes","text":"<ul> <li>All <code>Vector</code> types (<code>Vector2</code>, <code>Vector3</code>, <code>Vector4</code>, and their integer counterparts) now implement <code>IComparable</code> which will sort them by magnitude extremely quickly.</li> <li>All <code>Vector</code> types now include two new spatial metrics:<ul> <li>Manhattan Distance</li> <li>Chebyshev Distance</li> </ul> </li> <li>All <code>Vector</code> types now have a micro-optimized <code>IsExactlyZero</code> method which uses bitwise comparison. This is one of those things that saves a few nanoseconds so it's not really that important.</li> <li><code>Rect2</code> and <code>Rect2I</code> have new API:<ul> <li><code>FromSize</code> static methods now exist which create a new <code>Rect2(I)</code> at <code>[0, 0]</code> with the provided size.</li> <li>Arithmetic operators <code>+</code> and <code>-</code> are now defined with <code>Vector2(I)</code> which translates the <code>Rect2(I)</code>.</li> <li>The <code>&amp;</code> operator is now a proxy for <code>Intersect()</code></li> </ul> </li> <li><code>Transform3D * Basis</code> is now a defined operation, identical to <code>transformLeft * new Transform3D(Vector3.Zero, basisRight)</code>.</li> </ul>"},{"location":"engine/#other","title":"Other","text":"<ul> <li><code>PhysicsServer3D::body_get_shape_disabled</code> (and an <code>area</code> equivalent) were added.</li> <li>Added <code>PhysicsServer3D::BODY_PARAM_INVERSE_INERTIA_TENSOR</code> as a new parameter for <code>PhysicsServer3D::body_get_param</code>. Saves having to get a reference to the entire physics state.</li> </ul>"},{"location":"engine/#unsorted-changes","title":"Unsorted Changes","text":"<ul> <li><code>Engine::get_version_info</code> now returns improved data:<ul> <li>New <code>version</code> field which is a stringified Godot version following the display rules, i.e. <code>\"4.5\"</code></li> <li>New <code>commit</code> field, which is the last 6 digits of the commit hash.</li> <li>New <code>modules</code> field, an array of features, like <code>mono</code> and <code>double</code></li> </ul> </li> <li>Added <code>Mathf.IsOneApprox</code> and <code>Mathf.IsExactlyOne</code>.</li> </ul>"},{"location":"engine/#rendering-improvements","title":"Rendering Improvements","text":"<p>\u00a0\u00a0Changes related to rendering, both 2D and 3D</p>"},{"location":"engine/#2d-changes","title":"2D Changes","text":"<ul> <li><code>CharFXTransform</code> now provides several new properties.<ul> <li><code>Label</code> is a reference to the current <code>RichTextLabel</code> that the effect is rendering for.</li> <li><code>Glyph</code> (C# Only!) is a <code>Rune</code> representing the first unicode codepoint of the rendered character. This is useful primarily for English, but falls apart with other languages, so handle with care. It can be set to replace the displayed character.<ul> <li><code>get_glyph_index</code> exists for GDScript and returns an <code>Int</code></li> </ul> </li> <li><code>FontSize</code> represents the size of the font as of the currently rendered character, respective of text styling.</li> </ul> </li> <li>New <code>Control.pivot_is_relative</code> property which changes <code>Control.pivot</code> to be expressed as a continuously updating percentage of the <code>Control</code>'s size. This allows the pivot to maintain its relative location if the control is resized.</li> <li><code>RichTextLabel</code> now provides several new API members.<ul> <li>(C# Only!) <code>RichTextLabel</code> now declares <code>public virtual string BBCode { get; }</code> which can be overridden to achieve the same purpose as declaring a <code>bbcode</code> field.<ul> <li>To make this work, the engine now represents a property named <code>BBCode</code> as well as the legacy, all-lowercase <code>bbcode</code>.</li> </ul> </li> <li>(C# Only!) <code>RichTextLabel.InstallEffect&lt;T&gt;()</code> (where <code>T</code> is <code>RichTextEffect</code>) can be used to automatically instantiate an instance of the effect.</li> <li>(C# Only!) <code>RichTextLabel.PushCustomfx&lt;T&gt;()</code> (where <code>T</code> is <code>RichTextEffect</code>) can be used to push a custom effect onto the effect stack.</li> <li>New <code>parsing</code> signal (<code>Parsing</code> event in C#) has been added, which fires before and after the <code>Text</code> property parses the contained bbcode.</li> </ul> </li> </ul>"},{"location":"engine/#3d-changes","title":"3D Changes","text":"<ul> <li>The Stencil Buffer was added, though this is officially in Godot now.</li> <li><code>#pragma features</code> and <code>#pragma exclusive_variants</code> are now usable in Godot shaders. These allow static compliation of branches in shaders with configurable options in the inspector.</li> <li><code>Shader::set_include_path</code> and <code>Shader::get_include_path</code> are now exposed, allowing procedurally generated shaders without a file path to still referenece from an <code>#include</code> directory as if they are in that directory.</li> </ul>"},{"location":"engine/#other-changes","title":"Other Changes","text":"<ul> <li><code>MaterialStorage::global_shader_parameter_get</code> is no longer an error, but will still print one to the console. The Conservatory uses this to initialize shader globals in its own data storage from the values set in the engine.</li> </ul>"},{"location":"faq/","title":"Development FAQ and History","text":"<p>This is NOT a list of promises!</p> <p>Anything you see here is NOT a promise or guarantee. Features mentioned on this page WILL BE ADDED, REMOVED, OR CHANGED WITHOUT ANY SORT OF NOTICE. While I will try to honor most of the things I want to see in this game, I'm just one guy, and the last thing I want to do is tell you that you'll get something that I can't fulfill.</p> <p>\u00a0\u00a0This page covers common questions I get and some of the history of the game's development.</p>"},{"location":"faq/#faq","title":"FAQ","text":"<p>Q: What's it like? A: I took serious inspiration from Starbound, No Man's Sky, and Empyrion: Galactic Survival. If you want a more fulfilling answer, you can read the long page about the game's history.</p> <p>Q: How many planets can I visit? A: At least \\(2^{64}\\)2 to the power of 64<sup>1</sup></p> <p>Q: Will it have multiplayer? A: I really, really want it to. The issue is that I haven't made multiplayer before though, and while I firmly understand the concept of client and server, network authority and the like, I don't know if I can get it to work in The Conservatory. It's a daunting task.</p> <p>Q: Can I build my own ship and fight with it? A: I like the idea of building your own ship and I plan to at least try to have buildable vehicles. As far as space combat goes, I could probably get it to work, but don't expect anything fancy like ships coming apart into debris.</p> <p>Q: How do save files work? Are universes shared? A: Universes are shared on your PC. The save files for all locations in the game exist universally. If you spawn a character into the same seed, that world will not be fresh. However, by default, characters have their own seed, ensuring that if you install a universe-affecting mod, it only affects that one character (and any other characters sharing that universe).</p> <p>Q: Do you support modding? A: Hell yeah! I'm shipping the game with full documentation, (probably) its PDB file (or some substitute), and even handwritten guides with pictures describing things I think modders will want to do, like adding new voxels, species, and locations. I have made it my goal to make modding as easy as possible.</p> <p>Q: How far along are you / when will it be done? A: These things. They take time. Especially as a solo dev! All snarkyness aside, I don't know. I have my goal set and I'm making my way towards it slowly but surely!</p> <p>Q: Can I be a tester? A: Probably. But only when I host public tests. Private testing will be people picked by me.</p> <p>Q: Is it gonna be on Steam? A: Yes! The store page is private at this time, though.</p>"},{"location":"faq/#history","title":"History","text":"<p>\u00a0\u00a0The Conservatory has had a very, very long history with varying levels of significance. Things go back a lot further than you think!</p>"},{"location":"faq/#2018-2020-game3d","title":"2018 - 2020 \u2e2c Game3D","text":"<p> Game3D was the original internal placeholder name for the first iteration of this project. It was made in Unity at the time.</p> <p>\u00a0\u00a0At this point in history, I was interested in creating a narrative experience, completely different than what you know of today. It was a short, simple, choose-your-own-adventure style narrative. In fact, some of the races in The Conservatory are actually reimagined forms of the ones seen in this game!</p> <p>\u00a0\u00a0In this game's lore, the player was a dustrat - a simple, self-sufficient people who were scrappers and farmers. They were closely inspired by gremlins from Spiral Knights. They existed in a toxic, destroyed world, where all of the rich  folks lived in the sky above all the smog and dust. The Kirivians seen here in The Conservatory are loosely inspired by The Dustrats, including the state of their world post-disaster. The only difference is that the Kirivians were given a significantly more hopeful story, and a much nicer world. Not paradise, but it's cozy despite its problems.</p> <p>\u00a0\u00a0The third main power in the game, separate from the Dustrats and the Primes (the rich people), was the avidly named Virulent. The Virulent is a living, spreading, fungus-like mega-colony that can create simpler creatures composed entirely out of itself. I guess a good analogy is Phazon from the Metroid series, minus the radioactivity.</p> <p>\u00a0\u00a0The Novan in The Conservatory use the artstyle I gave to The Virulent: Dark black tones with purple, cyan, yellow, red, and green highlights. Very alien, very unsettling, yet somehow breathtaking in its own creepy way. Notably, I actually quite dislike body horror, so I put a lot of time into coming up with a creepy/\"icky\" look without it striking that forbidden nerve (and frankly, I think that resorting to body horror for an alien based on fungus is cheap and lazy. There's so much potential being ignored! Think about all of the shapes, all of the pieces, all of the flowers and lights. It doesn't all have to be flesh tubes and indescribable horrors of slime.)</p> <p>\u00a0\u00a0An entire story for this game was drafted and planned out, ready to be created as if the story were some guide, but it never saw the light of day...</p>"},{"location":"faq/#2022-2023-game2d","title":"2022 - 2023 \u2e2c Game2D","text":"<p>\u00a0\u00a0That's right, it's Game3D but with one less dimension! ... uh, wait.</p> <p>\u00a0\u00a0Well, joking aside, that's really what it was. I switched to SDL, thinking to make my own engine as an exercise to my skill. I actually got quite far, so much so that even some of the systems in The Conservatory (primarily the dialogue system, and quests) are almost exact replicas from the systems in Game2D. My major roadblock was having to get shaders working, and I didn't feel like redoing my renderer to integrate OpenGL.</p> <p>\u00a0\u00a0Anyway, this version of the project existed in two phases. The first was in C++. When I realized that I wanted my game to support modding, I changed to C# and wrote an SDL wrapper in .NET. As I tinkered with the game in C#, the idea of a sandbox became more and more appealing...</p>"},{"location":"faq/#2023-present-starlike3d-aka-the-conservatory-mostly","title":"2023 - Present \u2e2c Starlike3D aka The Conservatory (mostly)","text":"<p>\u00a0\u00a0As I continued to work on Game2D's design plan, I realized that I wanted a role playing game and a sandbox. I had this really compelling place, and I love role playing games. This is where I began to take inspiration from other games. To be frank, I love Starbound, No Man's Sky, and Minecraft. I wanted to make something that was like all three of them at once. And with that, I got started on The Conservatory. The original story slowly got phased out until it became irrelevant, hence why it never saw the light of day.</p> <p>\u00a0\u00a0The primary change of plan was the most obvious choice: No more custom engine. If I wanted to make a game, I needed to make a game (not an engine). </p> <p>\u00a0\u00a0I thought about going back to Unity, but at the time I was worried about royalties. The thing is, I may be a techno-wizard turbo nerd, but I still have mental disability and having to worry about money stuff is really overwhelming to me. Only a year later, Unity tried the disaster that was install fees. So I guess I really dodged a bullet on that one didn't I? Unity was out of the question. Unreal was also a contender, but the .NET support hadn't yet released. The thing is, I still knew for a fact that my game had to be written in C#. It's easy to use, powerful, and supports modders. C++ is not easy to reverse engineer, and so it's not friendly to new programmers looking to get into modding a game they like. So no Unreal.</p> <p>\u00a0\u00a0So began my search for a replacement engine. I did find one, but honestly I forgot what it was called. I don't even remember anything about it. This is unremarkable sure, but I mostly just want to mention it because I find it really funny that there's this entire period of time where I was using an engine and just don't remember it.</p> <p>\u00a0\u00a0Anyway, I eventually set my eyes on Godot. I can't emphasize enough how the stars aligned for this. See, this wasn't the first time I tried Godot, in fact I tried it way back for the original Game3D (this would make it some early version of Godot 3). At the time, the game was an experimental/for-fun project. I didn't see it as very useful to learn a new engine, let alone one that felt really strange to use from the get-go, especially in the face of the fact that Unity was very familiar to me already.</p> <p>\u00a0\u00a0When I revisited Godot at the start of this era of the project, I was actually quite reluctant to do so. Here I was thinking \"Eh, I tried this one in the past and it wasn't great...\" and I am so glad I tried it again anyway. Needless to say, Godot 4.2 was a hell of a lot better than Godot 3.0, and my impressions were immediately positive. In that time the engine had improved so much that I actually second guessed if it was Godot I had tried already in the past. But it gets better. You see, Godot 4.2 marks the start of a still-ongoing spree of banger updates from the community and team. I'm not joking. Look at the size of these update logs: 4.2 with a wall. 4.3 with an even bigger wall (like, holy shit). 4.4 with the same thing, and the addition of the Jolt Physics engine which is incredible (and multithreaded!!), and now finally 4.5 with new rendering features and tools for disabled players and developers alike. Good God!</p> <p>\u00a0\u00a0And so now here I am, working on The Conservatory.</p> <ol> <li> <p>\\(2^{64}\\)2 to the power of 64 at a minimum. This is the amount of unique seeds that can exist, but I can salt seeds (combine them with other seeds) to effectively wedge randomness into everything; since seeds generate more seeds themselves recursively, the extra ones that get generated can have variation so that they follow different patterns in different places, making the apparent amount of unique combinations larger. Still, that amount of \\(2^{64}\\)2 to the power of 64 is the lower limit as per the mathematics.If this number (somehow) seems like a letdown, think of this: If you could visit a planet in the blink of an eye (100ms, and that's a very fast blink!), did you know that it'd still take 58 billion years (yes, with the letter B) for you to see them all?\u00a0\u21a9</p> </li> </ol>"},{"location":"2024/03/31/","title":"31 March 2024 - Music from LawnReality (and more)","text":"<p>You're at the start! Next Post &gt;&gt;&gt; </p> <p>\u00a0\u00a0Today I am excited to announce that I have just been given permission by LawnReality to use a very large majority of his music in my game!</p> <p>\u00a0\u00a0I'm an indie developer, so I don't have a budget, especially one to pay a musician for a full soundtrack. While my very best friend RWGryphon has generously allowed me to use his music (especially since he helps me with the lore), having LawnReality's absolute arsenal of fantasy/sci-fi music is literally the perfect match for this game which is of the same genre.</p> <p> I will say, you probably already know his music without realizing it. His music was largely popularized just upwards of a decade ago (wow) when a few folks on Roblox made use of it. In particular, you may be familiar with Fading Memories.  <p></p> <p>\u00a0\u00a0I always jokingly describe him as \"the CEO of the OC music that played in your head when you were 9 years old\", because that's basically it. The furries reading this today know exactly what I am talking about. Autism wavelengths are overpowered man.</p> <p>\u00a0\u00a0When I describe it as his \"absolute arsenal\" of music, I mean it. 444 tracks(!)</p>"},{"location":"2024/05/20/","title":"20 May 2024 - A Peek into Modding","text":"<p>&lt;&lt;&lt; Previous Post Next Post &gt;&gt;&gt; </p> <p>\u00a0\u00a0A lot of the modding API is inspired by that of Minecraft Forge. As it is designed now, all objects in the game go through the <code>StarRegistries</code> class internally (including modded assets). </p>"},{"location":"2024/05/20/#the-registry-system","title":"The Registry System","text":"<p>\u00a0\u00a0Registries are basically the same as Forge's Deferred Registry system, with the following exceptions:</p> <ul> <li>Registration is done explicitly by the modder, there is no event.<ul> <li>The game does not have an event bus like Forge does</li> <li>There is an attribute which can be attached to static classes to initialize them immediately.</li> </ul> </li> <li>Registry access is done manually and requires a reference to your own mod.</li> </ul> <p>\u00a0\u00a0Otherwise, systems are roughly the same:</p> <ul> <li><code>IRegistry&lt;T&gt;</code> allows mods to ask for the ability to register, returning...</li> <li><code>IRegistryAccess&lt;T&gt;</code>, which allows mods to register objects under an ID that works basically the same as (and has the same rules as) <code>ResourceLocation</code> from Minecraft <code>namespace:entry</code>, which returns...</li> <li><code>IRegistryObject&lt;T&gt;</code>, which holds a reference to an object that will exist after registries are locked in (after the game has loaded to the main menu). This intermediary object can be passed around to other code to preemptively have a reference to the final object as soon as it is available.</li> </ul> <p>\u00a0\u00a0Minecraft's <code>Tag&lt;T&gt;</code> type also has an analogue in my game, for agnostic object handling.</p>"},{"location":"2024/05/20/#asset-loading","title":"Asset Loading","text":"<p>\u00a0\u00a0Mods load assets a bit like resource packs. Mods can override other mods' stuff, to an extent, however the game actually empowers developers to choose when (and if) that occurs - even potentially several ways at once for the same asset!</p> <p>\u00a0\u00a0To do this, I have extended Godot's local path system (<code>res://...</code> and <code>user://...</code> are the built in local paths) to include several new ones. Most importantly is <code>asset://&lt;modid&gt;/...</code> which loads the override asset, that is, if two mods declare a file at the same location, the one that loads last will override all previous mods. This will return that override.</p> <p>\u00a0\u00a0But sometimes, you need an asset that you made and you can't allow changes. That's fine. Just use <code>mod://&lt;modid&gt;</code> instead of <code>asset://&lt;modid&gt;</code> to explicitly tell the game that you want the version from that specific mod.</p> <p>\u00a0\u00a0Assets accept a <code>modid</code> parameter so that assets can be namespaced, i.e. overriding <code>asset://vanilla/somefile.txt</code> in another mod is possible.</p>"},{"location":"2024/05/25/","title":"25 May 2024 - Goodbye 010 Editor, Hello ImHex","text":"<p>&lt;&lt;&lt; Previous Post Next Post &gt;&gt;&gt; </p> <p>\u00a0\u00a0For a long time I used to use 010 Editor. It's a hex editor with the ability to use patterns, that is, map out structs in the file and display them in a neat little data tree.</p> <p>\u00a0\u00a0The thing is, this app costs money. Admittedly I realized I was a bit of a schmuck when my buddy told me about the vastly superior ImHex, a FOSS alternative.</p> <p> For this reason, all included mappings of game data now use the <code>*.hexpat</code> format for ImHex, rather than 010 Editor's <code>*.bt</code> format. This brings me to the next point: All file types used by the game come with data mappings so you can open files (like world data files, your save file, and etc.) to directly see the data in the file. No need to map it out yourself.</p>"},{"location":"2024/05/31/","title":"31 May 2024 - Terrain Voxel Rendering","text":"<p>&lt;&lt;&lt; Previous Post Next Post &gt;&gt;&gt; </p> <p>\u00a0\u00a0Terrain Voxel Rendering is definitely a bit of a challenge. I have to render a lot of geometry really quickly or else the game hitches and you have to stand there waiting for it to load.</p> <p>\u00a0\u00a0The thing is, I also want quality. A huge inspiration is stuff like Minecraft, but one thing Minecraft distinctly lacks (primarily due to artstyle, not limitations) is real lighting.</p>"},{"location":"2024/05/31/#pbr","title":"PBR","text":"<p>\u00a0\u00a0For this reason, my voxels allow a full set of PBR (Physically Based Rendering) textures:</p> <ul> <li><code>texture-albedo.png</code> is the color of the texture. It also supports color palettes.</li> <li><code>texture-normal.png</code> is a normal map. This basically uses colors to store a direction in 3D relative to the surface (which is why they are often very blue, because blue is Z, and Z is forward). These directions tell the game how light should reflect off of a surface without actually requiring that to be in the mesh itself.</li> <li><code>texture-smoothness.png</code> is a black/white texture where black indicates a rough, matte material, and white indicates a smooth, shiny material.</li> <li><code>texture-metallic.png</code> is a black/white texture that changes how shinyness looks. Black makes shiny materials look \"plasticy\", and white makes them look like polished metal.</li> <li><code>texture-emission.png</code> is a black/white texture that tells the system which pixels glow and how strongly they do so. The color is copied from albedo.</li> </ul> <p>\u00a0\u00a0All of these are optional but very useful, as seen here for some metal blocks:  </p>"},{"location":"2024/05/31/#color-palettes","title":"Color Palettes","text":"<p>\u00a0\u00a0One of the things I really like about Starbound, another game that inspired mine, is that you can paint blocks. I want to add this feature to my game, and to do so, I have to make voxels that can optionally use color palettes instead of colored textures.</p> <p>\u00a0\u00a0Implementing this wasn't too hard as you can see in the image up above, those blocks use palettes and then I have a dedicated \"metallic block\" palette type for coloring metals like that.</p> <p>\u00a0\u00a0The way palettes work is based on gradients, each gradient has 8 shades of color. Voxels can store anywhere from 2 to 8 uniquely colored parts (specifically either 2, 3, 5, or 8 due to data packing stuff). The amount of colorable parts is determined by myself or a modder when a new voxel is added to the game's code. You don't have to use all the parts you allocate, though.</p> <p>\u00a0\u00a0Here's the nature and foliage palette.</p> <p> </p> <p>\u00a0\u00a0Can you see how each color row has 8 shades of a color? Now, these gradients don't have to be one color. If you wanted to do an exotic shift from blue to violet in one of these rows, you can!</p> <p>Nerd Section - Read this only if you want tech details</p> <p>As you ask for more parts, the amount of color choices goes away:</p> <ul> <li>2 parts allows 256 different color choices per part</li> <li>3 parts allows 32 different color choices per part</li> <li>5 parts allows 8 different color choices per part</li> <li>8 parts allows 4 different color choices per part</li> </ul> <p>If you wonder why it works this way, it's because palette information is stored in 16 bits. 8 bits is a byte, and a byte can count up to 255 (0 thru 255 is 256 unique numbers, 0 is a number too, you know!). Counting in binary:</p> <ul> <li>2x256: <code>00000000</code> <code>00000000</code></li> <li>3x32: <code>00000</code> <code>00000</code> <code>00000</code> <code>.</code> (1 wasted bit, I only use 15 of the 16)</li> <li>5x8: <code>000</code> <code>000</code> <code>000</code> <code>000</code> <code>000</code> <code>.</code> (again 1 wasted bit)</li> <li>8x4: <code>00</code> <code>00</code> <code>00</code> <code>00</code> <code>00</code> <code>00</code> <code>00</code> <code>00</code></li> </ul> <p>\u00a0\u00a0Of course, for those of you who want better artistic control, you can also elect to just not use a palette for your material and instead use an RGB texture.</p>"},{"location":"2024/06/14/","title":"14 June 2024 - Pixel Art Shadows","text":"<p>&lt;&lt;&lt; Previous Post Next Post &gt;&gt;&gt; </p> <p>\u00a0\u00a0If you look at the previous blog post about terrain rendering you will see that the shadow there is really sharp. It doesn't match the pixel art aesthetic at all!</p> <p>\u00a0\u00a0Well, lucky for you, a new Godot feature could not have better timing. Using this new feature, I am able to snap shadows to pixels!</p> <p> </p> <p>\u00a0\u00a0Unfortunately, there is a nasty bug that I can't really figure out where sloped surfaces get all sorts of horrible artifacts. This doesn't bode well for higher poly prop models that I plan to include in the game. Look here:</p> <p> </p>"},{"location":"2024/06/27/","title":"27 June 2024 - Roslyn Analyzers and VSIX","text":"<p>&lt;&lt;&lt; Previous Post Next Post &gt;&gt;&gt; </p> <p> Roslyn is the system running Visual Studio's C# analyzer and compiler. C# is the programming language I use to make the game.</p> <p>\u00a0\u00a0The analyzer is responsible for basically idiot-proofing (to an extent) the code I write by informing me of mistakes of possible accidents ahead of time so that the most obvious and preventable issues can be prevented. For example, making a value and then never using it will raise an alert informing me of such.</p> <p> VSIX, on the other hand, is an extension framework used to customize Visual Studio.</p>"},{"location":"2024/06/27/#the-conservatory-analyzer","title":"The Conservatory Analyzer","text":"<p>\u00a0\u00a0I wanted to make my own analyzer for modders, since you can create custom behavior for the analyzer and add custom warnings, really useful for the quirks of the game to make life easier for modders.</p> <p>\u00a0\u00a0There's just one small issue: I wanted to add unique text highlighting and messages to info popups when you hover your mouse over stuff. And that's where I majorly fucked up. I was a fool to desire something that seemed so simple.</p> <p>\u00a0\u00a0That's right, this is a bit of a rant because I don't think I have ever been so irritated by code before.</p>"},{"location":"2024/06/27/#history-of-net","title":"History of .NET","text":"<p>\u00a0\u00a0So for context, we need to learn about .NET's hilariously complicated past.</p> <p>\u00a0\u00a0.NET is the system that underlies C#. You have probably seen it from time to time especially in older programs, \"You need to install .NET Framework for this!\" or whatever else.</p> <p>\u00a0\u00a0In the archaic past, we actually had three .NETs:</p> <ol> <li>.NET Framework, which was a windows-focused specialized toolkit designed for making desktop applications.</li> <li>.NET Core, which was a cross-platform generalized toolkit where you could write code once and have it work on every OS. It could also write web applications and a few other doohickeys that I won't get into</li> <li>.NET Standard, which is basically Core's older brother. Standard stopped after 2.0 and Core took over from there.</li> </ol> <p>\u00a0\u00a0Both of these could mostly do the same thing if you ignored the platform specialization, but they were very different.</p> <p>\u00a0\u00a0After these two coexisted for a long time, Microsoft realized the problem and was like \"we can't keep maintaining two of the same thing\". This was a hurdle because .NET Framework ended on version 4.8, but .NET Core ended on version 3.1, and they both had their specialties. They needed to merge them together, though.</p> <p>\u00a0\u00a0What they ended up doing was siding with .NET Core (a good choice, I think, because it was the one that worked on all platforms).</p> <p>\u00a0\u00a0Remember how I brought up the version numbers? That was a small problem for the new unified system, which is called \".NET\" - plain, no word after it. Just \".NET\". So if you ever see me say that without \"Framework\" or \"Core\" after it, I mean the new unified one. Ok?</p> <p>\u00a0\u00a0So - .NET began on version ... 5! Yes, the first release was version 5. This might sound really weird, but honestly it was kind of genius to stop even more confusion from adding up. People would likely download Core or Framework if it started on 1 because they would see the bigger version numbers of Framework/Core and go \"oh, those must be newer\", when that is not in fact true.</p> <p>\u00a0\u00a0Thankfully, after .NET 5 dropped, things got way less confusing. It's actually quite elegant! Namely:</p> <ul> <li>Every year, a new .NET releases. They are currently about to release .NET 9, The Conservatory uses .NET 8.</li> <li>Every even version number (6, 8, ...) is \"Long-Term Support\", or LTS for short. It stays supported for longer than the odd releases.</li> </ul> <p>But we are talking about Roslyn Analyzers in this blog post. That's right, we're going back to hell.</p>"},{"location":"2024/06/27/#so-how-does-this-tie-into-the-history-lesson-you-just-gave-me","title":"So how does this tie into the history lesson you just gave me?","text":"<p>\u00a0\u00a0As mentioned, Roslyn isn't the only thing I wanted. Roslyn can do code analysis and produce warnings, but that's half the equation. I also wanted custom display, through a VSIX Extension. Like when you hover your mouse over a thing, I wanted a custom message with my own special format unique to the game to really help figure out what's going on. I actually got this to work, see:</p> <p> </p> <p>\u00a0\u00a0Well, this is where I open pandora's box and call the swarm of locusts a bunch of pussies. Roslyn is the system that compiles C# code. C# has to work everywhere, so Roslyn runs on .NET Standard.</p> <p>\u00a0\u00a0VSIX, however, is for Visual Studio (not Visual Studio Code, by the way. Just \"Visual Studio\". The proper IDE, not the fancy text editor). Visual Studio is a Windows application, so VSIX runs on .NET Framework.</p> <p>\u00a0\u00a0You starting to see the problem?</p> <p>\u00a0\u00a0I want to use both at once, but they are fundamentally incompatible with each other. My solution to this shown above barely works, like it's janky. Like it's bad. I trashed that project it was so bad. I'll try again later.</p> <p>\u00a0\u00a0The solution is like ... holy shit. It's simultaneously one of the most stupid yet one of the most \"yeah thats what i woulda did\" type tricks, and I learned it from some Chinese repository I forgot the name of, but basically the solution goes like this:</p> <ol> <li>Package the .NET Framework Common Language Runtime (the thing that makes C# work) into a <code>.dll</code> file</li> <li>Load .NET Standard for Roslyn, and create the analyzers</li> <li>Load the entire runtime for .NET Framework as an addon to the code???</li> <li>Load VSIX through the loaded runtime</li> <li>Revel at the homonculus baby of the two versions of .NET that you have just forcefully merged into an unidentifiable screaming monstrosity</li> <li>Repent for your sins (Optional)</li> <li>Profit</li> </ol> <p>\u00a0\u00a0And yeah. It works, sort of. It's by far the most fucked up solution I think I have ever seen. But it works. Sort of.</p> <p>\u00a0\u00a0The issue is that the runtime exists in a discrete state. It's a runtime, so it tries to do what it would do on a normal computer and load the code into its own little bubble. This means that the code existed in this weird limbo state where it was technically loaded by .NET standard but only sort of, and the real thing still lived in the Framework bubble. I could access those parts of the code but I had to use a weird shared memory page hack and it was a disaster. I don't even want to articulate how hilariously hacky it was.</p> <p>\u00a0\u00a0Later in the future I'll probably try it again in a more sane way, but that means I have to develop two apps together instead of just one. Fuck.</p>"},{"location":"2024/07/13/","title":"13 July 2024 - The Sky of Numala","text":"<p>&lt;&lt;&lt; Previous Post Next Post &gt;&gt;&gt; </p> <p>\u00a0\u00a0One of the playable races in the game is The Kirivans. You can read about them here: Playable Races: Kirivian.</p> <p>\u00a0\u00a0Their home world, called Numala, is perpetually overcast due to some funky space jargon and sci-fi bullshittery (again, check the page linked above).</p> <p>\u00a0\u00a0They are particularly special to me as they capture a very specific feeling and interest of mine, so I put a lot of time into ensuring the atmosphere of their world was just right: Imagine a rainy spring day.</p> <p>\u00a0\u00a0One of the things that can pretty dramatically affect this sensation is the background environment, such as the sky. It is a huge part of the set that makes up the world and so I put a lot of time into it, it has a custom shader designed to render smooth, rolling clouds. I am very proud of how it came out.</p> <p> </p> <p>\u00a0\u00a0Writing shaders has always been one of my hidden passions because it is the good way (i.e. not AI slop) to link art to programming. I am instructing a rock that's really good at math with decimals on how to build the colors needed to draw a sky.</p> <p>\u00a0\u00a0It feels good being a lithomancer.</p>"},{"location":"2024/08/03/","title":"3 August 2024 - The Settings Menu, Mod Configs","text":"<p>&lt;&lt;&lt; Previous Post Next Post &gt;&gt;&gt; </p> <p>This is a technical post!</p> <p>The subject matter of this post is oriented to other programmers and would-be modders. It may be difficult to understand and I am assuming the reader has programming knowledge, but I will try to make it easy to read.</p> <p>\u00a0\u00a0I just finished the framework for the Config/Options Screen, which includes the API used by modders to configure your mods.</p> <p>\u00a0\u00a0This thing is fancy and extensible. If you have modded other games you know how much of a pain in the ass it is to make configs because you gotta make custom types, or split your type into separate sliders and values and do all the menu bullshit and ugh, right?</p> <p>\u00a0\u00a0The Conservatory comes with something far nicer. It is a system designed on programmatical interfaces.</p> <p>\u00a0\u00a0A great way to think of them is to consider the symbols and buttons we use on apps and pages across the internet. Everybody's looks different, but the moment you see a hamburger menu icon \u2261, you know it opens a menu. Everybody's menu is different and done in their own way, yet you still understand how to use every single one of them on the internet. An <code>interface</code> type in code is basically that, for the computer: A way to use something that is simple and universal.</p> <p>\u00a0\u00a0Interfaces are extremely powerful for this reason because they take potentially very different code from many places, and create one, unified way to interact with it.</p> <p>\u00a0\u00a0If you want code details, check out the documentation of <code>IConfigurationValue&lt;T&gt;</code> here.</p> <p>\u00a0\u00a0But in basic terms:</p> <ul> <li><code>IConfigurationValue</code> is agnostic and has a non-generic, <code>object</code>-based instance for ease of use.</li> <li><code>IConfigurationValue&lt;T&gt;</code> is strictly typed.</li> <li><code>IRangedConfigurationValue&lt;T&gt;</code> is a range type <code>where T : INumber&lt;T&gt;</code> - meaning that any numeric type, even custom types of numbers that you invented, are allowed. All you need is the ability to convert it to/from float.</li> <li>A few others.</li> </ul> <p>\u00a0\u00a0More basically, these values are supported by default:</p> <ul> <li><code>bool</code> for switches/toggles</li> <li><code>object[]</code> (but particularly <code>ObjectIdentity[]</code> for built in localization) for dropdown menus.</li> <li><code>INumber&lt;T&gt;</code> for sliders of any numeric type.</li> <li><code>Godot.Color</code> for a full color selection wheel (HSV, RGB, Hex, sliders, hue circle, the whole thing).</li> <li><code>string</code> for optionally validated text input.</li> </ul> <p>\u00a0\u00a0You can add more types if desired, you just need to make the menu element for interacting with it (the value itself, the game handles the rest for you.)</p> <p>\u00a0\u00a0Here is a prototype of the options screen which is missing a lot of the options I plan to have.</p> <p> </p>"},{"location":"2024/09/27/","title":"27 September 2024 - Lighting is final!","text":"<p>&lt;&lt;&lt; Previous Post Next Post &gt;&gt;&gt; </p> <p>\u00a0\u00a0I went on a bit of a hiatus for a while as I focused on other stuff.</p> <p>\u00a0\u00a0This one is short: Remember that old lighting bug when I added pixel shadows? The one where it created weird triangle artifacts? That bug is no more!</p> <p>\u00a0\u00a0With some fancy math (creating a 3x3 rotation matrix from the normal, binormal, and tangent vectors of the face being rendered) I was able to properly rotate the shadow projection in 3D space to align it to the surface.</p> <p>\u00a0\u00a0If that makes zero sense to you, here's a before/after that should make more sense:</p> <p> </p>"},{"location":"2024/11/05/","title":"5 November 2024 - Terrain (core) is done!","text":"<p>&lt;&lt;&lt; Previous Post Next Post &gt;&gt;&gt; </p> <p>\u00a0\u00a0It has been just over a month since my last post but I have been busy.</p> <p>\u00a0\u00a0One of the things I have been doing is another huge change to how voxels work in lieu of data cost, memory efficiency, and disk usage. Put simply: I scrapped the game's terrain system and then made it again from scratch, using the knowledge from my previous attempt.</p> <p>\u00a0\u00a0This does impose some limits (which I have actually edited into the previous blog entries, so a bit of time travel witchery going on), but for good reason.</p>"},{"location":"2024/11/05/#core","title":"\"Core\"?","text":"<p>\u00a0\u00a0The terrain system has two parts:</p> <ul> <li>The core is the system that makes it work, the technique for how to build a world and store its data.</li> <li>The generator is the system that actually builds worlds, generating landscapes procedurally based on a set of rules.</li> </ul> <p>\u00a0\u00a0The core is the part that I just got done, because without a working core, the generator fundamentally cannot exist.</p>"},{"location":"2024/11/05/#so-what-changed","title":"So what changed?","text":"<ul> <li>Memory cost of terrain went down a lot (8GB for large world down to about 1.5GB)<ul> <li>Most of the memory cost was from me rather eagerly throwing huge values into the voxel structure. Single bytes make a difference.</li> <li>This value is also distorted because I had a memory leak at one point with geometry generation.</li> </ul> </li> <li>Terrain now generates on workgroups.<ul> <li>Terrain was already multithreaded - and this is where a lot of the difficulty came from - but now it's also designed to generate in discrete dispatched pieces of work.</li> <li>Fellow game devs might see similarity in this terminology, and yes, it does indeed mean that generation could be delegated to the GPU via compute shaders! An analogue class exists on the CPU that uses the processor's multiple threads to crudely emulate a compute shader, but this class simply provides the means to an end.<sup>1</sup></li> </ul> </li> <li>Terrain geometry also now generates on another thread.</li> <li>Interaction with the engine is kept to a minimum, and calls back to the main thread now only occur at the end of a chunk's generation to tell Godot to add the node to the scene tree, which is not a thread-safe operation.</li> <li>The file format for terrain was optimized into regions.<ul> <li>This prevents widespread world corruption by limiting the size of corrupted data to 16x16x16 chunk regions.</li> <li>A region file can be kept open by the system for a while, to optimize IO.</li> </ul> </li> </ul>"},{"location":"2024/11/05/#what-happens-now","title":"What happens now?","text":"<p>\u00a0\u00a0Now, I am going to redesign the entity system. It was never actually working to begin with, I just set up its framework to get a feel for what I wanted, and to figure out how I might make it work (and I needed it to spawn in the player). Now that I have the world working, I can focus on adding things to that world.</p> <ol> <li> <p>Despite the ability to generate on the GPU, and originally implementing it this way, there were some flaws with this. The first is that anyone who wanted to run on a dedicated server (if I do multiplayer) would find that they are unable to, for lack of a GPU. The second is that through clever use of SIMD instructions and fast noise algorithms (primarily based on fBm), I have actually managed to make the CPU generator work almost as fast as the GPU generator. The third is that getting structures and premade objects to the GPU would have been a nightmare to standardize and so I kind of dodged a bullet there.\u00a0\u21a9</p> </li> </ol>"},{"location":"2024/11/07/","title":"7 November 2024 - The Entity System","text":"<p>&lt;&lt;&lt; Previous Post Next Post &gt;&gt;&gt; </p> <p>\u00a0\u00a0I briefly mentioned this in the previous blog post, but my goal now is to formalize and create the entity system - the system which is responsible for making NPCs and animals work.</p> <p>\u00a0\u00a0All around, this system is a big goal for me, but it's one that I consider to be very important to my design and so I have made sure to very carefully plan how it should work as to prevent accidents during development and feature creep.</p>"},{"location":"2024/11/07/#design","title":"Design","text":"<p>\u00a0\u00a0In general, though, I have the following concrete \"rules\" for entities:</p> <p>Outdated Goals!</p> <p>These design goals are no longer being followed exactly as written (or, there have been some tweaks). They are kept here for historical purposes of the blog. The next post contains updated information.</p> <ol> <li>All living entities should have an agnostic controller which works off of a set of common, universal actions.<ol> <li>This allows a basic abstract controller which can have more added onto it if needed - this includes the player controller, effectively adding a native ability to be any entity in the game.</li> </ol> </li> <li>Entities should provide an identity which allows them to recognize allies/foes not by type but instead by attribute. <ol> <li>This goes hand in hand with the above, where an entity (including players) which is registered as a certain species will be treated as a member of that species.</li> <li>Modders will be urged to never check the class type when checking entity identity.</li> </ol> </li> <li>Entities with physical bodies should have physical bodies. This is largely inspired by Rain World which physically simulates every single character model in the game.<ol> <li>This system makes a significant impact on the player's actions as it allows them to feel like they are truly interacting with the world. If you critically damage someone's limb, it should be unresponsive to their body and limp.</li> <li>This system doubles as a physics bone (jiggle bone, dynamic bone, whatever) system.</li> </ol> </li> <li>Entities should have a framework to react to simple stimulus, and an even simpler emotional memory. Perhaps the most vital rule in extension with above, and also inspired by Rain World. This is probably what earns the game its praise for having such a \"well-simulated ecosystem\". It solves one of the oldest problems in gaming.<ol> <li>This doesn't have to be realistic, it just has to be believable, characters have to react to what happens. In essence, we are taking advice from Gabe Newell.</li> <li>If you hurt something, it should remember that and not like you.</li> <li>If you set off an explosive or even a sudden loud sound, people and animals should run away or be prompted to investigate.</li> <li>If you give something to someone, they should remember this.</li> </ol> </li> </ol> <p> Most importantly, I have a plan to get all of these implemented. A lot of this idea, especially points 3 and 4, are pretty stretchy goals, but I am very confident that they are attainable and I am certain people will enjoy it. They are a lot simpler than they sound, and that is important to remember.</p> <p>\u00a0\u00a0All around I am very excited, as the design of the game is truly coming together. I'll keep you all posted (ideally)!</p>"},{"location":"2024/11/13/","title":"13 November 2024 - The Entity System, Part 2: Physics","text":"<p>&lt;&lt;&lt; Previous Post Next Post &gt;&gt;&gt; </p> <p>\u00a0\u00a0In the last post I went over what I wanted from an entity system. One of these points was physics rigs.</p> <p>\u00a0\u00a0Well, I had a system already. The issue I realized pretty quickly is that I would be wrestling with Godot trying to make articulated physics rigs work (or, in English, character models that use physics to move, but can still be animated). It just wasn't worth the trouble.</p>"},{"location":"2024/11/13/#the-problem","title":"The Problem","text":"<p>\u00a0\u00a0The issue comes from Godot's built in type for this: <code>PhysicalBoneSimulator3D</code>. This is a system that does bone physics simulations for you. It's awesome, but it's meant to be completely autonomous. Think ragdolls. Animation is completely overridden (ignored), and bones simulate purely using physics.</p> <p>\u00a0\u00a0I spent the better part of the last couple days brainstorming how to make it animatable while taking a bit of a break. I spent previous days making a system to try to retrofit control into this system and make all sorts of fancy maths to push bones to their animation targets and blah blah blah... Then my Eureka! moment hit: If I need to control the physics, then control the physics! Don't use <code>PhysicalBoneSimulator3D</code> - it was designed to take control, not give it.</p>"},{"location":"2024/11/13/#the-solution","title":"The Solution","text":"<p>\u00a0\u00a0So as you may know, Godot has a special physics object type called <code>CharacterBody3D</code>. </p> <p>\u00a0\u00a0In essence, it's a kinematic object<sup>1</sup> with special utility methods designed to handle collision from both itself moving into other things, and things moving into it.</p> <p>\u00a0\u00a0Now, it was designed to be used - as the name implies - as the collider for your entire character model (like your hitbox). But...</p> <p>\u00a0\u00a0...There's nothing that says I can't assign a <code>CharacterBody3D</code> to individual bones to simulate them. I would have to simulate them manually, yes, but that's precisely what I need! It's a bit of a cursed use but at the same time it's a perfectly valid and intentional use. Very strange solution indeed.</p> <p>\u00a0\u00a0I'm mostly writing about this because I am quite excited to have found this solution after a couple days of banging my head against a wall in confusion. I'll keep you all posted on how it's going.</p> <ol> <li> <p>A kinematic object is a physics object which cannot be moved by pushing it; applying a force to it does nothing. Instead, it is designed to be moved manually.\u00a0\u21a9</p> </li> </ol>"},{"location":"2024/11/16/","title":"16 November 2024 - We're going to have to use ... math!","text":"<p>&lt;&lt;&lt; Previous Post Next Post &gt;&gt;&gt; </p> <p>This is a technical post!</p> <p>I'll be using some language that might not be easily understood by people who don't enjoy their maths and programming.</p> <p>\u00a0\u00a0Today I had to update a complex numeric type that I use for computing values based on universal constants. This type is called <code>BigDecimal</code> and is an analogue to C#'s <code>System.Numerics.BigInteger</code> type combined with <code>System.Decimal</code> to support fractions well out of range of what even <code>double</code> or <code>decimal</code> can muster.</p> <p>\u00a0\u00a0Turns out, telling the computer how to use a new type of number is WAY harder than it sounds. Okay, correction, it's easy if it's an integer type.</p> <p>\u00a0\u00a0The type is implemented based on the work of Jan Christoph Bernack, who very graciously released their work into the public domain (I would link it, but I can't seem to find it). When I nabbed the type for use in The Conservatory, I completely rewrote it and also implemented <code>System.Numerics.INumber&lt;TSelf&gt;</code> for C#'s generic math feature.</p> <p>\u00a0\u00a0This was a bit of a doozy to get right because I have to support a lot of methods. Now, I did that many months ago. Took about a day to get it all done to a satisfactory level.</p> <p>\u00a0\u00a0The thing is, my knowledge of math is a bit lacking. Most of what I know that isn't from school is stuff I learned from random YouTube videos, and connecting the dots from code experience. I can tell you exactly how both a CPU and a GPU works, but I can't do anything beyond matrix multiplication (yet).</p> <p>\u00a0\u00a0For this reason, there were some functions I skipped, because the math was very daunting. I finally got around to adding these methods though, and it was a journey.</p>"},{"location":"2024/11/16/#implementing-powers-xn","title":"Implementing Powers: \\(x^n\\)","text":"<p>\u00a0\u00a0When programming, powers are actually easy to implement, granted \\(n\\) is limited to \\(n\\in\\Bbb{Z}^+\\) (including 0; that is, 0 and all positive integers).</p> <p> All hell broke loose when I realized that I have to implement \\(n\\in\\Bbb{R}\\) (all real numbers).</p> <p>\u00a0\u00a0I was not expecting how much of a hassle it would be for me to figure these things out. I guess in part it's because it requires the next three things to be implemented...</p>"},{"location":"2024/11/16/#implementing-the-exponential-function-ex","title":"Implementing the Exponential Function: \\(e^x\\)","text":"<p> \\(e\\) is Euler's Number, and it is a very special number in math. If you are curious, 3blue1brown has a wonderful video on the topic.</p> <p>\u00a0\u00a0When it comes to a base of \\(e\\), there's a special algorithm for this due to the nature of what makes \\(e\\) so unique.</p> <p>\u00a0\u00a0This method is implemented using:</p> \\[\\exp x:=\\sum _{k=0}^{\\infty }{\\frac {x^{k}}{k!}}\\] <p>\u00a0\u00a0I actually quite like sigma notation because it makes intuitive sense as a programmer. Freya Holm\u00e9r explained this wonderfully on Bluesky, but for convenience, here's the image:</p> <p> </p> <p>A very fitting note is attached: [T]his started a civil war on the former host of twitter and I'm not interested in relitigating that lol [...] yes I'm being reductive, and yes both notations can do more than just this, and yes one of them is more readable than the other to you and that's okay and normal c:</p> <p>\u00a0\u00a0Now I implemented that math 1:1, like this:</p> <pre><code>[Pure]\npublic static BigDecimal ApproximateExp(BigDecimal exponent, uint iterations = 100) {\n    ArgumentOutOfRangeException.ThrowIfNegativeOrZero(iterations);\n    // scout_insanity.mp4\n    BigDecimal numerator = One;\n    BigDecimal denominator = One;\n    BigDecimal result = One;\n    for (uint k = 1; k &lt;= iterations; k++) {\n        numerator *= exponent;\n        denominator *= k;\n        result += numerator / denominator;\n    }\n    return result;\n}\n</code></pre> <p>\u00a0\u00a0Okay, one down, two to go!</p>"},{"location":"2024/11/16/#implementing-the-natural-logarithm-lnx","title":"Implementing the Natural Logarithm: \\(ln(x)\\)","text":"<p>\u00a0\u00a0The natural log was another big hurdle to get implemented. I did it like so:</p> \\[\\frac {1}{\\ln(x)} = \\frac {2x}{x^2-1}\\sqrt{\\frac {1}{2}+\\frac {x^2+1}{4x}}\\sqrt{\\frac {1}{2}+\\frac {1}{2}\\sqrt{\\frac {1}{2}+\\frac {x^2+1}{4x}}}\\ldots\\] <p>\u00a0\u00a0To be honest, this one is where I think math kind of lacks a vital concept of \"memory\", but that's just my programmer brain talking.</p> <p>\u00a0\u00a0I actually think this one is easier to understand in code.</p> <p>\u00a0\u00a0For the math nerds out there, in code, the = sign is temporal (dependent on time), effectively the same as the \\(\\Leftarrow\\) symbol to refer to assignment of a value. <pre><code>int x = 5; // This initializes a new variable x to be equal to 5.\nx = x + 7; // Usually written as x += 7 which is a shorthand meaning the same thing.\n</code></pre></p> <p> Or in essence, <code>x = x + 7</code> in code is the same as \\(x \\Leftarrow x+7\\).</p> <p>\u00a0\u00a0In my code, I broke the equation into discrete parts. Variables in \\(\\mathtt{\\text{typewriter font}}\\) indicate a programmatical variable, which are often assigned full names rather than letters.</p> \\[\\mathtt{iterativeResultPart} \\Leftarrow \\sqrt{\\frac{1}{2} + \\frac{x^2+1}{4x}}\\] \\[\\mathtt{previousInner} \\Leftarrow \\mathtt{iterativeResultPart}\\] <p>\u00a0\u00a0What I then do is a loop based on a number of iterations. Repeatedly, this statement is evaluated based on a parameter which declares how many times to do so:</p> \\[\\mathtt{previousInner} \\Leftarrow \\sqrt{\\frac{1}{2} + \\frac{\\mathtt{previousInner}}{2}}\\] \\[\\mathtt{iterativeResultPart} \\Leftarrow \\mathtt{iterativeResultPart \\times previousInner}\\] <p>\u00a0\u00a0Then finally, the result is returned as:</p> \\[\\frac {2x}{x^2-1} + \\mathtt{iterativeResultPart}\\] <p>\u00a0\u00a0This achieves the same purpose as the original equation above. This equation actually computes \\(\\frac{1}{ln(x)}\\), also.</p>"},{"location":"2024/11/16/#implementing-square-roots-sqrtx","title":"Implementing Square Roots: \\(\\sqrt{x}\\)","text":"<p>\u00a0\u00a0This one actually wasn't so bad. It uses a slightly improved technique for how to manually find a square root by hand, same method people in school learn. Nothing really special here.</p> <p>\u00a0\u00a0The \"slight improvements\" allow it to make better incremental jumps in each guess.</p>"},{"location":"2024/11/16/#and-now-its-done","title":"And now it's done!","text":"<p>\u00a0\u00a0With these, I can use a rule to evaluate \\(x^n\\). The rule states these two are the same exact thing:</p> \\[x^n = e^{ln(x^n)}\\] <p>\u00a0\u00a0The natural logarithm there can be rearranged to remove that exponent from \\(x\\). These two are the exact same thing as well...</p> \\[ln(x^n) = \\text{n }ln(x)\\] <p>\u00a0\u00a0So using this, we can rearrange the equation just a bit more, and...</p> \\[x^n = e^{\\text{n }ln(x)}\\] <p>\u00a0\u00a0And that's something I can work with using the functions I created. We did it!</p>"},{"location":"2024/11/18/","title":"18 November 2024 - Lore Tweaks, and Inverse Kinematics","text":"<p>&lt;&lt;&lt; Previous Post Next Post &gt;&gt;&gt; </p> <p>\u00a0\u00a0Two completely unrelated topics in one blog post? Hell yeah!</p>"},{"location":"2024/11/18/#lore-tweaks","title":"Lore Tweaks","text":"<p>\u00a0\u00a0After some time spent spitballing with my buddy Gryph (who, if you do not know, helps to write lore and contemplate ideas), I decided on some slight name changes and lore changes for the included races playable in the game.</p> <ol> <li>Humans are cringe naenae babies who wrecked Earth. They were replaced by an evolutionary offshoot called Gaians.</li> <li>Numolon (the cat race) are now Kirivians.</li> <li>Balaur (the bird race) are now Avelians.</li> <li>Novan are the same because they are really cool.</li> </ol>"},{"location":"2024/11/18/#inverse-kinematics","title":"Inverse Kinematics","text":"<p>\u00a0\u00a0One of the core systems needed to make entities work is the system that tells them how to move and interact with the world. Inverse Kinematics is one of these techniques, and it's something you use every day without even realizing it. It is the mathematics that figures out how to rotate linked parts (like an arm, with a shoulder and elbow) so that it reaches out and touches something.</p> <p>\u00a0\u00a0This is a lot easier said than done and there's a lot of algorithms ranging from trivially simple to godly complicated to achieve this with varying pros and cons.</p> <p>\u00a0\u00a0I've implemented these so far:</p> <ul> <li>Two-segment / \"shoulder and elbow\" IK</li> <li>CCD IK</li> </ul>"},{"location":"2024/11/18/#two-segment-ik","title":"Two-segment IK","text":"<p>\u00a0\u00a0This is a very simple algorithm which, as the name implies, has two segments. It is sometimes called \"shoulder and elbow\" IK because you can imagine it like your arm, with a shoulder which you can rotate (mostly) freely, and an elbow joint which works like a hinge.</p> <p>\u00a0\u00a0This type of IK is specifically designed to solve for this setup of joints, and can use some special shortcuts to make it very fast and accurate. However, as the name implies, it is limited to only two segments. You can't add any more segments for more advanced rigs.</p> <p>\u00a0\u00a0This type is useful in niche scenarios, but in those niches it is by far the most performant and most accurate solution possible, with instantaneous convergence to the goal (most other algorithms need to run over and over again to \"refine\" their results).</p>"},{"location":"2024/11/18/#ccd-ik","title":"CCD IK","text":"<p>\u00a0\u00a0CCD IK stands for Cyclic Coordinate Descent Inverse Kinematics. It is a technique which supports any amount of segments. It works by rotating each segment so that it rotates the end of the limb/chain of bones towards the target point to reach to.</p> <p>\u00a0\u00a0Doing this repeatedly for each bone over and over again, will eventually cause it to bend and reach the goal. It's an okay technique, and it's not too hard to implement. It also has the benefit of supporting limits, like hinges, which can even include ranges of rotation.</p> <p>\u00a0\u00a0As a caveat, it can often get stuck and hit what are called \"singularities\", where there is no obvious solution to the mathematics employed to determine the rotation. CCD is prone to spazzing out in some scenarios, basically. It's a balance between versatility and capability to reach its target. </p> <p>\u00a0\u00a0This technique is great for robotic arms and other mechanical assemblies.</p> <p>\u00a0\u00a0I may change what algorithms I go for, though I anticipate all of my use cases can be addressed with these two.</p>"},{"location":"2024/11/24/","title":"24 November 2024 - The Entity System, Part 3: Physics. Again. Help.","text":"<p>&lt;&lt;&lt; Previous Post Next Post &gt;&gt;&gt; </p>"},{"location":"2024/11/24/#reintroduction","title":"Reintroduction","text":"<p>\u00a0\u00a0Some time ago I made two posts about the entity system. Originally I was chugging along forward with the data structure and moving ahead until I started implementing character physics.</p> <p>\u00a0\u00a0So to recap (and introduce some new information):</p> <ul> <li>I had the idea of using <code>CharacterBody3D</code> as my collider type for bones due to the existence of <code>move_and_slide()</code> provided by the engine. This method simulates physics for characters and is specifically designed for this one purpose.</li> <li>I now use <code>AnimatableBody3D</code> which is effectively the same, but it derives from <code>StaticBody3D</code> which allows for some better handling due to trimming out a lot of behavior that is not necessary. It also has a similar but distinctly different <code>move_and_collide()</code> method which does roughly the same thing.</li> </ul> <p>\u00a0\u00a0And now, a story.</p> <p>\u00a0\u00a0This is the story of a developer named Xan. Xan was about to write physics simulation code for character models, something he was very excited to work on, something where the path ahead was so clear he knew precisely what had to be done to achieve his goal.</p> <p>\u00a0\u00a0That was, until the time to write the code came along. \"Let's use this built in method to simulate motion with other physics objects,\" he said. But he was distraught to realize that only some of the necessary information was used by the code provided by the engine.</p> <p>\u00a0\u00a0See, the method accepts one parameter of motion, the linear velocity. This describes the direction the object is moving, and how fast. But something was missing...</p> <p> \"Hm, that's odd,\" he says to himself. \"Where is the angular velocity parameter?\" he wondered aloud.</p> <p>\u00a0\u00a0Xan was soon to discover that there was not, in fact, an angular velocity parameter.</p>"},{"location":"2024/11/24/#what-happens-now","title":"What Happens Now?","text":"<p>\u00a0\u00a0Ordinarily this would not matter so much, typically objects just apply their rotation first then simulate motion. It's not technically correct but for 99% of cases - especially with respect to characters which are not typically spinning - it is fine. With bones, however, there's a fundamental problem with this: Bones are constrained by rotating joints. Bones don't move and slide. They rotate.</p> <p>\u00a0\u00a0To simulate characters, bones need to be able to spin which the physics simulator doesn't support on any type except <code>RigidBody3D</code>, which is not kinematic.</p> <p>\u00a0\u00a0So you know how mass is just a number kind of like weight? Yeah so turns out rotation has its own type of mass called an \"inertial tensor\" and it's a 3x3 matrix.</p> <p>\u00a0\u00a0I don't know why I keep running into hilariously specific scenarios where the most ungodly complicated math emerges and I am thrown into the deep end, but I'll be damned if I don't say I haven't learned more math in the past six months of this game's progress than I have in a school year. Good lord.</p> <p>\u00a0\u00a0So yeah, that's my new goal: Implement rotational physics simulation that has proper accuracy. I will say now for those wondering, I am not implementing true correct physics simulations. Instead I am just moving a bit and checking iteratively (so more like SM64's quartersteps for rotation, and its 1/16th steps, and to optimize, rotation simulations are clamped to 360 degrees so comically fast rotation speeds aren't going to break it. No sideways long speens for you.)</p> <p>\u00a0\u00a0The need for rotational tensors is for collision handling and making the moving parts experience torque forces when they hit at a point other than the center of mass.</p>"},{"location":"2024/12/05/","title":"5 December 2024 - Physics, Entities, and ...Music!","text":"<p>&lt;&lt;&lt; Previous Post Next Post &gt;&gt;&gt; </p> <p>\u00a0\u00a0This is more of a generic status update post since I have been gone a little while and want to keep you all up to speed. Not much in this one.</p>"},{"location":"2024/12/05/#physics-and-entities","title":"Physics and Entities","text":"<p>\u00a0\u00a0On the logic side of things, most of my existing entity code<sup>1</sup> is still compatible with everything in the game now, the main hurdle here is the change in node structure. Another huge flaw I had was that living entities did not use discrete classes for each kind of entity. I have a separate class called <code>Species</code> which is used to store the identifying features of living creatures (it's almost the same as what Starbound does). I still have this class, but now entities need a dedicated class for their species as part of the data structure.</p> <p>\u00a0\u00a0Onto the area of physics. I'm still stuck. I have some options left before I just drop character physics.</p> <ol> <li>Try to make RigidBodies \"kinematic-ish\" with custom integration. <ol> <li>This has the cost of giving a huge middle finger to physics which will result in weird behavior.</li> </ol> </li> <li>Use my simulation technique as it stands now, but force all colliders to be spheres.<ol> <li>This works best with my model of fast character physics because I can trim out calculations pertaining to inertia, mass, and friction. Without these factors, spheres become purely linear objects, and collisions become as simple as distance checks, allowing fast physics calculations.</li> <li>This has the drawback of pretty dramatically limiting the shape that physical bones can have and collide with. I don't think modders would like this.</li> </ol> </li> <li>Turn bones into unstoppable forces. This is built in behavior to Godot via animatable physics objects, but as mentioned, they are unstoppable forces. It doesn't make sense for some dude's tail to yeet a box across the room because it got in the way. The tail should stop.<ol> <li>This is definitely the easiest solution but also wreaks the most havoc. I doubt people would like this much either.</li> </ol> </li> <li>Pull a BONEWORKS and have two rigs simultaneously, one controlled directly from code, the other simulated, and make the simulated bones try to reach the scripted ones.<ol> <li>This would introduce complexity and I worry it will nuke performance in excess.</li> </ol> </li> </ol>"},{"location":"2024/12/05/#music","title":"Music","text":"<p>\u00a0\u00a0As of two days ago, I started learning FL Studio and how to write music. So far I think I have the basics down, but my capabilities are unfortunately harshly limited, and iteration time is long because I have to listen back to my own stuff after many idle hours so that flaws stick out a bit more. It's harder to find flaws when it has just been created. Useful tip for all art mediums. Make a thing, sit on it for hours or days, then come back, and the flaws will stick out to you.</p> <p>\u00a0\u00a0Anyway, that is definitely a background goal, learning to write my own music for the game.</p> <ol> <li> <p>I tend to design \"skeleton frameworks\" for things I plan to work on in the future. This way, I can get a feel for how I want something designed in the moment, without putting a significant amount of time into actually developing it. It's kind of the manual equivalent of prewarming, and helps promote more agnostic and scalable designs.\u00a0\u21a9</p> </li> </ol>"},{"location":"2024/12/10/","title":"10 December 2024 - Entity Model (Character) Customization","text":"<p>&lt;&lt;&lt; Previous Post Next Post &gt;&gt;&gt; </p> <p>\u00a0\u00a0In a previous blog post, I covered the technical details of an internal code type <code>IConfigurationValue&lt;T&gt;</code>. This, as its name implies, is the underlying data type for all configurations. It was originally designed for agnostic use; it is what allows the game's settings to work, but modders can also use it to add configs to their mods. Most notably, it does this while also providing a simple layer to allow these configuration options to be associated with a menu item, so that the option can be displayed in a settings menu without any work other than simply making the widget. The game handles all the hard work of positioning and sizing it to fit for you. You just tell it what to draw.</p> <p>\u00a0\u00a0This system is so versatile, however, that I have given it a third use: Character customization!</p> <p>\u00a0\u00a0When you are creating a new character and want to see its customization options, the list of options is assembled on the fly based on what the model says it can customize, and it leverages the full config system. This means there is inline support for the following types of options:</p> <ul> <li>Toggles</li> <li>Sliders</li> <li>Dropdown menus</li> <li>Color pickers (HSV Wheel + RGB Sliders + Hex input included!)</li> <li>Text input</li> <li>Custom types invented by modders</li> </ul> <p>\u00a0\u00a0I find this very exciting because it opens the door for potentially advanced customization options for custom species, which will hopefully be able to suit the needs and desires of aspiring creators. Coupled with the game's data format, the possibilities for scalable data are endless.</p>"},{"location":"2024/12/21/","title":"21 December 2024 - Physics Peeves, Mod Analyzer Woes","text":"<p>&lt;&lt;&lt; Previous Post Next Post &gt;&gt;&gt; </p> <p>\u00a0\u00a0Oh boy, it's another complaining post!</p>"},{"location":"2024/12/21/#physics-peeves","title":"Physics Peeves","text":"<p>\u00a0\u00a0I have a love-hate (like, 90% love, 10% hate) relationship with Godot Jolt physics. For those who don't know, plain Jolt is a third party physics engine that is universally better than Godot's native 3D physics system, especially with respect to assembly (as in, physical assembly, not code) complexity. Needless to say, Godot physics panics and breaks down a bit too soon when making mechanisms.</p> <p>\u00a0\u00a0Originally, I used Godot physics until I started working on character models, when I found interest in <code>PhysicalBoneSimulator3D</code>. Of course, I quickly ran into the issue of physics going spastic and completely breaking. When I asked for help, I was advised to use the plugin to cross-port Jolt into Godot instead of native physics.</p> <p>\u00a0\u00a0To be frank, I could probably write an entire blog post about Jolt. It's a really awesome physics engine. I think the only physics engine I have as much appreciation for is something like Valve's Rubikon (as it functions in the present day, think Half-Life: Alyx).</p>"},{"location":"2024/12/21/#gripes-and-nitpicks-with-godot-jolt","title":"Gripes and Nitpicks with Godot Jolt","text":"<p>\u00a0\u00a0Godot Jolt is phenomenal, until it isn't. It is missing features I consider vital for the design of my game, some make more sense than others to be missing.</p> <ul> <li>Physics simulation is not multithreaded, even though Godot has an option for this and Jolt supports it natively.<ul> <li>This seems to be fixed in the official integration that came as part of 4.4-dev7?</li> </ul> </li> <li>Godot Jolt is not deterministic, and I plan to have a multiplayer game.<ul> <li>This isn't a huge deal, network ownership is still going to be needed anyway.</li> <li>This limitation makes sense, I'm like a rich kid complaining that the gold leaf on his coin is too thin.</li> </ul> </li> <li>Certain collision shapes (i.e. <code>WorldBoundaryShape3D</code>) don't work.</li> </ul>"},{"location":"2024/12/21/#useful-parts-of-godot-jolt","title":"Useful parts of Godot Jolt","text":"<p>\u00a0\u00a0That's not to say it is useless though. There's some things that are absolutely useful.</p> <ul> <li>Higher performance physics is always a win.</li> <li>Static compound shape construction (physics bodies with multiple collision shapes).<ul> <li>Originally, my terrain colliders used baked and cached compound shapes made via V-HACD.<ul> <li>This was extremely laggy under Godot physics, even as static colliders.</li> </ul> </li> <li>Godot prefers mutable compound shapes, and Jolt prefers static compound shapes.<ul> <li>You may have heard of things like \"baking\" in computers, this refers to a common tradeoff. You know how games have a power slider, like speed vs. health? Computers have something a bit like that, where you trade off computational time for data cost.</li> <li>Godot prefers allowing data to be changed quickly, at the cost of slow physics code but fast object creation and destruction.</li> <li>Jolt prefers denying data changes in a timely manner, at the benefit of fast physics code but slow object creation and destruction.</li> </ul> </li> </ul> </li> </ul>"},{"location":"2024/12/21/#mod-analyzer","title":"Mod Analyzer","text":"<p>\u00a0\u00a0A long while ago, I made a blog post about Roslyn Analyzers and VSIX and how it is nightmarishly and horrifyingly awful to work with both at the same time. Status update: It still fucking. sucks. To be honest, I don't know if I will even release it with the modding SDK at this point. That's how bad it is. I might just give up on it, and I don't give up easy.</p> <p>\u00a0\u00a0Every couple weeks or so I get the idea, \"hey, maybe I'll try working on the analyzer again\"! Then, I proceed to fiddle around with things for the next couple hours, and finally throw the project back into the abyss in defeat. Last time this happened I made negative progress because now my VSIX does nothing and I have no clue why. What, did you think I was going to debug it? What are you, insane? Everybody knows that for some god-awful reason you can't use breakpoints and the debugger when hosting the experimental VS build.</p> <p>\u00a0\u00a0If anyone on the VS/Roslyn team is reading this perchance, please hear my call for help. The documentation is outdated. VSIX documentation that I get led to is still telling people to use the synchronous model. The documentation for Roslyn is long and complicated, so much so that it's giving me flashbacks to when I was first learning to write code some 15 years ago. It's an uphill battle from two sides and it feels awful to learn.</p> <p>\u00a0\u00a0I feel like to really get VSIX to work the way I want it to with my customizations to the code view, I'd practically have to learn how Visual Studio itself works, because it is by far one of the most confusing and unintuitive systems I have ever dealt with.</p> <p>\u00a0\u00a0As far as Roslyn goes, it's just way too complicated for me. I have a loose grasp that there is something known as a syntax tree, and that it stores the code somehow. But as far as how and when and where and in what context and how it splits it apart, I am clueless.</p>"},{"location":"2024/12/21/#i-need-help","title":"I need help","text":"<p>\u00a0\u00a0Most of my analyzer's functionality comes from <code>Attribute</code>s. For example, methods that declare or inherit <code>[MayRunOnAlternateThread]</code> are supposed to add a color coded piece of text to the tooltip when you hover your cursor over the method to view documentation (I actually have a picture of this working in the old blog post, see the top of this section).</p> <p>\u00a0\u00a0Some analyzer functions will observe method calls. For example, if the body of the aforementioned example method is calling something decorated with <code>[MustRunOnMainThread]</code>, this should raise a warning. This seems like a fairly easy analysis to make, \"if the thing I am calling has this annotation, and the caller has this other annotation, raise a warning\".</p> <p>\u00a0\u00a0Like this is not that complicated, this feels easy, and I think that's why I keep coming back to it. It's just that actually implementing it feels like trying to make it through a labyrinth.</p> <p>\u00a0\u00a0Hopefully I can work through this, but as far as I care now, I will be skipping work on the mod analyzer.</p>"},{"location":"2024/12/24/","title":"24 December 2024 - Entity Actions, and The Lack of a Player Entity","text":"<p>&lt;&lt;&lt; Previous Post Next Post &gt;&gt;&gt; </p> <p>\u00a0\u00a0A lot of my recent posts have been complaints and problems. So let's change up the vibe a bit and talk about progress! I'll even say it's for holiday spirit so I get some +rep with Santa. </p> <p>\u00a0\u00a0Anyway, in this post I want to talk about the Entity Action system. This is a sort-of-complex system that works with the main Entity system to allow entities to actually do things, without actually having to know how to do it. The entity just says \"I want to do this\", and the action handles the details and the procedure.</p> <p>\u00a0\u00a0I think a lot of people will find this exciting, especially those that enjoy the ability to roleplay in games. You'll see why. But first, we have to break it down.</p>"},{"location":"2024/12/24/#what-is-it","title":"What Is It?","text":"<p>\u00a0\u00a0The term \"entity\" in a game is basically representative of \"a thing in the world that is doing something with code\". This could be an NPC, a machine, or a vehicle. Blocks in the world are not entities, because they are just geometry. That should make sense, right?</p> <p>\u00a0\u00a0Most games have a distinct entity type for the player. This is incredibly common as it allows assigning special functionality to players that NPCs wouldn't typically have, like a link to the save file, an inventory, and other assorted goodies. It also makes it easy for NPCs to know that they are interacting with a player. You see, I actually chose to not do this.</p> <p>\u00a0\u00a0In my game, entities have a piece of data known as an input provider. This is basically the interface layer that links some arbitrary technique of control to the entity. This control could be an AI (like, the traditional game kind, not deep learning), or it could be your keyboard+mouse/gamepad. What matters is that it provides instructions for what the entity should be doing.</p> <p>\u00a0\u00a0By extension of this, players are identified with the player controller. Consider this and the lack of a specific player entity type, and you (hopefully) guessed it: the player can be any (living) entity in the game! The game is designed with this in mind. And modders, don't worry, there is a very convenient, well-defined <code>AbstractEntity.IsPlayer</code> property available to you.</p> <p>\u00a0\u00a0I think this opens the door for a lot of potential with new gameplay created by users. This was heavily inspired by Risk of Rain 2's <code>RoR2::CharacterBody</code> class. You can actually play as anything in the game, not just the survivors, and I thought that was really cool. It was also inspired by Rain World's Safari Mode, where you can take control of random creatures around the map and play with the ecosystem.</p> <p>\u00a0\u00a0Most importantly, I think this is an outstanding immersive tool. Games often treat the player differently, and it kind of breaks the immersion if your goal is to tell your own story where you might not want to be the flashy main character. If you spawn in as a Novan, NPCs will see you as just a plain Novan like they would any other, not as \"the player\".</p>"},{"location":"2024/12/24/#so-how-does-it-work","title":"So, How Does it Work?","text":"<p>\u00a0\u00a0A data type in the game's code called <code>EntityAction</code> declares a thing an entity can do. This is about as arbitrary as it sounds. It could be the action of placing a block in the world, the action of swinging a melee attack, the action of shooting a gun, the action of smelling the air to find something, the action of casting a spell. If it is an action and, discretely, is not movement (because movement and jumping has its own system), and is not an interaction with a usable object (because interactions have their own type as well, but this may very well change!) it's an Entity Action.</p> <p>\u00a0\u00a0Actions are entirely arbitrary, and must be created on game startup (you can't create new action types during runtime (read: after mod initialization), this is for network compatibility and such). The thing is, an entity has to know what actions it can actually do, and these actions might change depending on context! For example, a person's default primary action might be to swing their fist, but if they are holding a gun, it needs to override the primary action so they shoot the gun instead of swinging it at someone.</p> <p>\u00a0\u00a0To do this, there is a container type: An action palette. This holds a number of predefined action slots (primary, secondary, tertiary, that sort) that can be stored. These palettes are applied to a species to declare their default actions, then can be applied to items to override certain slots using a priority system. To call back to Risk of Rain 2 again, think of the Heretic's lunar items, and how they replace your skills. Basically the same thing.</p>"},{"location":"2024/12/24/#how-will-it-work-with-custom-stuff","title":"How will it work with custom stuff?","text":"<p>\u00a0\u00a0The game enforces that actions can be performed with a minimal amount of commonly available data. This means that while certain actions may require some context (of any type, as it is defined by the developer (myself or modders)), at a base level actions require nothing more than the entity performing them.</p> <p>\u00a0\u00a0Currently, the technique to get information (like configuration for a common type of action, so that actions can be shared) is undetermined. I have a way in mind, but it is unsafe and uses unmanaged memory so it's obviously not the best for C#.</p>"},{"location":"2025/01/01/","title":"1 January 2025 - The Conservatory Analysis Tools","text":"<p>&lt;&lt;&lt; Previous Post Next Post &gt;&gt;&gt; </p> <p>\u00a0\u00a0Before I start this blog post, obligatory messages: Happy new year! I can't believe it's already 2007.</p> <p>\u00a0\u00a0Anyway... It's another blog post about the analyzer - but rest assured, this time, I have good news.</p> <p>\u00a0\u00a0As a brief recap, I wanted to make a Roslyn Analyzer + Code Fix combo for my future modders. Roslyn is the system that compiles C# for .NET, and analyzers are tools that operate within this space to create compiler warnings and errors.</p> <p>\u00a0\u00a0Using this, I have created many special, custom diagnostics that show up in modded code (or even my code!) for The Conservatory.</p> <p>\u00a0\u00a0Here's some little examples of the helpful redirects the tool gives you:</p> <p> <p></p> <p></p> <p></p> <p>\u00a0\u00a0And as a matter of fact, there's a lot of little helpful goodies in here. You may have noticed each warning is a clickable link. That's right - even the diagnostics are documented! </p> <p> You may need to press on the following images to zoom in.</p> <p> </p> <p>\u00a0\u00a0You can see there's a lot of assorted diagnostics that make sure your code stays functional and mistakes are caught before you get into your testing phase. Every page for every diagnostic has as much detail as it needs to make it abundantly clear exactly why a warning/error is raised, and how to fix it, including multiple ways to fix it if the fix is not straightforward.</p> <p>\u00a0\u00a0To crank this up to 11, though, I will add that the code keywords in that second image for the game types <code>AbstractLivingEntity</code> and <code>AbstractSpeciesEntity</code> will be clickable links in the future, leading to the game's online documentation. So if you were going to ask \"What's the difference\", that question is answered too via the game's documentation.<sup>1</sup></p> <p>\u00a0\u00a0As you can see, my give-a-shit for my modding community is not broken, and my field of fucks is most certainly not barren.</p> <ol> <li> <p><code>AbstractSpeciesEntity</code> is a convenience layer that shunts in a call to <code>EntityValidation.AssertSpeciesIs(...)</code> into the constructor. This way, you can't construct an <code>AbstractGaianEntity</code> (which extends this type) using <code>Species.Novan</code>, for example. This will raise an exception.This is an entirely optional convenience layer however, and it's more than valid to skip it and just call the assertion yourself. This is why it's not a good idea to limit by <code>AbstractSpeciesEntity</code> - an entity may not even be using it in the first place!\u00a0\u21a9</p> </li> </ol>"},{"location":"2025/01/05/","title":"5 January 2025 - New Website!","text":"<p>&lt;&lt;&lt; Previous Post Next Post &gt;&gt;&gt; </p> <p>\u00a0\u00a0Hi everyone!</p> <p>\u00a0\u00a0This isn't much of a game progress report, but this is instead me noting the occasion - The Conservatory's blog has been moved from my personal site to my (new) business site.</p> <p>\u00a0\u00a0Development of The Conservatory is unchanged. The only difference now is as follows:</p> <ol> <li>I have this new domain, https://xansworkshop.com/</li> <li>The game's repositories are now on a GitHub Organization that I own.</li> </ol> <p>\u00a0\u00a0And that's it. Hopefully you like the new website, it fits in with Xan (the character)'s thematic cues and I think it looks awesome. I'll have more to say about the game's development soonish - pinky promise!</p>"},{"location":"2025/03/03/","title":"3 March 2025 - The Dev to Alpha Transition Phase","text":"<p>&lt;&lt;&lt; Previous Post Next Post &gt;&gt;&gt; </p> <p>\u00a0\u00a0Well, I'll just start this one by saying holy hell. I've been gone a while! Lots has changed in the internim. As a matter of fact, I have tried to write this blog post three times in the past, each time I just have to stop because there's so much stuff to talk about. The problem is circular; the more I do, the more there is to talk about.</p> <p>\u00a0\u00a0For the sake of my sanity (and for your reading pleasure)...</p>"},{"location":"2025/03/03/#meta-lorestory-community-etc","title":"Meta (Lore/Story, Community, etc.)","text":"<ul> <li>A Discord server dedicated solely to The Conservatory has just gone up. Join here.</li> <li>I rewrote a lot of the lore for various species. For the time being, I have chosen to significantly reduce the content on all species pages since it's in flux right now.<ul> <li>I got permission from hdorriker et. al. to reference their universe in my game. If you have no clue what I am talking about, I give him and his friends a huge shoutout on the About page.</li> </ul> </li> <li>Lots of tiny internal changes to the story.</li> <li>A new FAQ Page has been added to the website.</li> </ul>"},{"location":"2025/03/03/#code-and-engine","title":"Code and Engine","text":""},{"location":"2025/03/03/#assets-and-mods","title":"Assets and Mods","text":"<p>\u00a0\u00a0I completely rebuilt the entire asset management system from the ground up. The old system completely ignored Godot's resource system, and I feel a bit foolish for not realizing that there's a reason the assets are compiled. This required redoing basically all code that loads some game object of any kind. That's a lot of code.</p> <ul> <li>The old system used to use directories only. Mods had to be directories too.</li> <li>The new system uses <code>ProjectSettings.LoadResourcePack</code> as Godot advises.<ul> <li>However, this does not preserve existing files. It's always one or the other, original vs. new. I need both for my system to work.</li> <li>To get around this, I had to design a new type <code>StarFileSystem</code>, a virtual representation of a filesystem from an archive file that can be indexed using Godot-like paths and <code>ObjectIdentity</code> (IDs in my game).</li> <li>In essence, this system allows me to load pck files dynamically and store their contents in a separate cache per-mod, allowing me (and other modders) to index any version of a file that I want.</li> <li>I had to come up with an agnostic way to point simple IDs (like, say, <code>vanilla:grass</code>) to its relevant assets without including a path in the ID.</li> <li>A significant amount of existing game code had to be refactored to account for this new system.</li> </ul> </li> </ul> <p>\u00a0\u00a0Part of the reason this took so long is because I screwed it up. Twice. So I had to rework the entire system three times before I could account for all the quirks (and frankly I'm tired).</p>"},{"location":"2025/03/03/#ientityaction-the-entity-action-system","title":"<code>IEntityAction</code> - The Entity Action System","text":"<p>\u00a0\u00a0I designed the Entity Action system. This is an agnostic, universal input system for all entities, including players. The system is an interface layer, that is, it provides an expectation (or \"contract\") for what an entity can do. </p> <p>\u00a0\u00a0If it's a thing, and you have to do that thing somehow by using some input, then it classifies as an entity action. Yes, it's that vague, which is part of its design.</p> <p>\u00a0\u00a0This system is very large and complex behind the curtain, but rest assured, implementing it is easy. The reason it is designed this way is because of the reusability it provides for assets, you see, any entity can perform any action in any context (unless explicitly denied by code)!</p> <p>\u00a0\u00a0So what does this mean?</p> <ul> <li>Actions can be reused. I only have to make one unarmed melee action, and then every single entity ever added to the entire game (both now and all future mods) can share that one, single action.<ul> <li>Actions, by design, don't care how they are being performed. They only need a reference to the entity performing the action.</li> <li>Actions can receive additional context, i.e. the action for firing a mining laser can (but does NOT have to) be given information about the item being used.<ul> <li>In this scenario, it will damage/discharge the item if it has been provided with the item.</li> <li>If this information is missing, it'll still fire the laser since that's about all that it can do. There's no item to discharge, so don't bother with it.</li> <li>This behavior is well-defined and predictable!</li> </ul> </li> </ul> </li> <li>I think one of the more compelling points of this is that mods that want to add, say, the ability to shapeshift into some other entity, can do so very easily. It's quite literally as easy as setting the entity's controller to the player controller and It Just Works<sup>TM</sup></li> </ul> <p>\u00a0\u00a0This system took a long time to design and a long time to get right. I had to make it twice.</p>"},{"location":"2025/03/03/#terrain-renderer-mk-iii","title":"Terrain Renderer Mk. III","text":"<p>\u00a0\u00a0Terrain rendering has had a huge facelift, and when I say \"huge\", well, I don't know how to articulate it.</p> <ul> <li>Atlasing was implemented using texture arrays, meaning that if an atlas overflows, it can just make a second one.</li> <li>Vertex data has been dramatically improved (it's smaller, and easier to pack)</li> <li>Palette rendering has been dramatically improved (palettes are sent as a texture instead of a uniform, too)</li> <li>Lighting has been dramatically improved (significantly cheaper algorithm to snap to pixels)</li> <li>Performance has been dramatically improved (it's one material for the entire world!)</li> </ul> <p>\u00a0\u00a0The terrain system literally went from \"primitive, overcomplicated mess\" to \"advanced, simple, well thought out procedure\". I can't even quantify how much work this took.</p>"},{"location":"2025/03/03/#registries-mk-ii","title":"Registries Mk. II","text":"<p>\u00a0\u00a0With the addition of entity actions and the older entity identity system, registries needed a huge rework. Specifically, registries needed to become variant. In C#, this is something applied to an interface that changes how its generic parameters work. Namely, it affects how they can be cast. For example, the ability to cast <code>List&lt;string&gt;</code> into <code>IEnumerable&lt;object&gt;</code> implicitly (note how we went from <code>string</code> to <code>object</code>) is provided by covariance. This works in the opposite direction for contravariant parameters (an example is if I have a method that accepts an <code>Action&lt;string&gt;</code> parameter, I can pass in an <code>Action&lt;object&gt;</code> parameter and it's fine with that even though the types mismatch).</p> <p>\u00a0\u00a0To improve registry behavior, registry objects needed to be made covariant (despite receiving registerable objects!) and registerable classes needed to be made contravariant! This is kind of turning the system on its head, but it's extremely important that it is designed this way. It's a bit confusing, and frankly I can't find an understandable way to describe what it does or why I did it. It's an absolute requirement for types like <code>IEntityAction&lt;...&gt;</code> and <code>IEntityIdentity</code> to work.</p>"},{"location":"2025/03/03/#summary","title":"Summary","text":"<p>\u00a0\u00a0Basically, a significant part of the game's internals got entirely redone, some had to be done several times. In fact, I'm still finishing up the new asset thing. That's why I've been gone for a month. As I approach alpha testing phase, I need everything to be ready!</p>"},{"location":"2025/03/06/","title":"6 March 2025 - Godot 4.4, Mods, and Data Galore","text":"<p>&lt;&lt;&lt; Previous Post Next Post &gt;&gt;&gt; </p> <p>\u00a0\u00a0In the last post, I gave a status update for most of what I was doing and why I had been dark for so long. Among the things mentioned was my anticipation for Godot 4.4 which, rather ironically, released within a few hours of after I made that post. So that's nice.</p>"},{"location":"2025/03/06/#godot-44","title":"Godot 4.4","text":"<p>\u00a0\u00a0Most of Godot 4.4's improvements don't affect you as a player, but some do:</p> <ol> <li>The replacement filesystem I wrote (talked about it last post) can now use GD's native temporary file management solution. There is a method to create a new temporary file from an asset in a mod archive so that methods that require access to a file can do so.<ol> <li>This behavior is atypical as most stuff should stream directly. But it's there if anyone needs it.</li> </ol> </li> <li>Mods can now load .wav files dynamically as this capability was added (I would have likely added this manually anyway, since WAV isn't exactly a complicated file format).</li> <li>Godot natively has jiggle bones. I don't know if I will use these, it depends on their performance cost, but they look pretty good already. The main concern (and benefit, honestly) is that like Dynamic Bone, or Physbone if you are a VRChat player, they require explicitly registered colliders and don't use real physics simulation. I, at the very least, want box colliders. The thing is, I want world collision too, including with physical interactions (if you have a tail, it should be able to smack stuff, for example).</li> </ol>"},{"location":"2025/03/06/#progress-on-the-new-file-system-json-handling","title":"Progress on the new File System (JSON Handling)","text":"<p>\u00a0\u00a0In the last blog post, I mentioned my creation of a custom file system called <code>StarFileSystem</code> which is an abstraction layer above Godot's <code>ResourceManager</code> with the key ability to reference assets created by specific mods, even if those assets have been overridden by another mod. This system is extremely important because some mods may have privately implemented assets that shouldn't be overridden.<sup>1</sup></p> <p>\u00a0\u00a0Just recently, I finished the final part of this system, which handles the merging of JSON files. See, loading JSON has problems:</p> <ul> <li>Allowing mods to override each others' JSON files like any other asset is destructive and incompatible. What if the replacement doesn't have data I need (destructive)? What if two mods want to change the file (incompatible)?</li> <li>Merging JSON fixes this mostly, but it's not granular enough. Things like editing specific array items is very hard to do reasonably without tricks and hacks.</li> </ul> <p>\u00a0\u00a0I actually came up with a couple solutions to this, and accompanying specifications for each. Originally I had an idea to work with something like Starbound's .patch files but honestly this solution is kind of bad when multiple mods intermingle with the same file, because it gets messy and unreadable very quickly. That, and some mods may want advanced or custom logic for their own asset files.</p>"},{"location":"2025/03/06/#solution-1-ijsonassetmerger","title":"Solution 1: <code>IJsonAssetMerger</code>","text":"<p> <code>IJsonAssetMerger</code> is an interface which receives an <code>IEnumerable&lt;(StarFileSystem, JContainer)&gt;</code> - the merger implementation can see which mod owns what data (via the filesystem), and the JSON container representing its contents. It is then up to this interface to output a completely merged <code>JContainer</code> or throw an exception where appropriate. The order of these systems is the same as the asset load order, with the original/base file being first and the top level override being last.</p> <p>\u00a0\u00a0Notably, the merger runs at asset query time, not at startup. As with other asset files, it's perfectly valid to query one mod's specific version of the file and bypass the merger entirely. This is an important detail because it means the code querying the JSON file chooses how multiple sources of the same file get merged together. This is very useful for modders which define their own data format, because then they can also choose how to load it when they need to use it.</p>"},{"location":"2025/03/06/#solution-2-ijsonassetmutator","title":"Solution 2: <code>IJsonAssetMutator</code>","text":"<p>\u00a0\u00a0This exists in contrast to the <code>IJsonAssetMerger</code> interface. Unlike its sibling, this interface is controlled by the overriding mod. It's my solution to the mess that is .patch files, and provides a code solution that must be registered by the implementor during startup. Like the merger, it executes on asset query. It's just that these can't be created on the fly like mergers can.<sup>2</sup></p> <p>\u00a0\u00a0Unlike mergers, mutators only get to see the final result of a merge operation. In essence, they perform post-processing on a merged JSON document. This should allow them to be as functional as possible. Similarly to mergers, these will execute by order of registration, which itself depends partly on asset load order.</p> <p>\u00a0\u00a0I'm hoping these two solutions allow mods to reliably and predictably load JSON files and support data merging.</p> <ol> <li> <p>In general, having private assets that ignore the override system is considered poor design and is strongly discouraged. A well-made mod should account for modifications to its own data where reasonably expected. If you look at Minecraft modding, every asset is a resource pack or data pack, and thus everything can be overridden. The ability to have private assets is a privelege!\u00a0\u21a9</p> </li> <li> <p>This is mostly because of an optimization pertaining to how files get recognized. The mutator needs to spit out an array of files or paths (among other options) that it can modify, and to ensure that asset loading remains fast, these results are cached and baked into code designed to work with specific files. Modifying this on the fly would have a negative performance hit, as would simply not having it in favor of dynamically querying mods to ask \"anyone want to modify this before I send it out?\" \u21a9</p> </li> </ol>"},{"location":"2025/03/15/","title":"15 March 2025 - World touchups, Inventories, and Entities","text":"<p>&lt;&lt;&lt; Previous Post Next Post &gt;&gt;&gt; </p> <p>\u00a0\u00a0Just recently I started on finalizing the inventory system and the entity action system. I may or may not have said these were done in an older post. And they were. Just done incorrectly.</p>"},{"location":"2025/03/15/#inventories","title":"Inventories","text":"<p>\u00a0\u00a0Inventory access is a complicated topic. In The Conservatory, only one thing can ever have access to an inventory at once! This might sound annoying, but it has a lot of benefits too.</p> <ul> <li>Inventories can be multithreaded under this system.</li> <li>Item loss can't happen unless the code throws it away, because items are always precisely tracked.</li> <li>This also fixes item duplication exploits.</li> </ul> <p>\u00a0\u00a0The issue is that one at a time access is slow and it sucks. I need something new, something more powerful and more capable. It was going to have to follow some rules:</p> <ul> <li>Anything that just wants to look at the contents of the inventory, but not change it, (that is, get read-only access) should be allowed to do that at the same time as other read-only accessors.<ul> <li>Metaphorically speaking: Multiple people can be reading text on a phone at the same time. We don't need to take turns reading it, we can all see the screen at the same time.</li> </ul> </li> <li>Anything that wants to change the inventory (add/move items, change stats) needs read-write access which only one thing can have at a time<ul> <li>Metaphorically speaking: Only one person can be typing on a phone at the same time. If you try to have two people type at once, it gets into a mess and everything is ruined.</li> </ul> </li> </ul> <p>\u00a0\u00a0Now I can already hear my fellow C# users: \"Well, that just sounds like ReaderWriterLock\"! you yell at your monitor. And to that I say you are exactly correct!</p> <p>\u00a0\u00a0In fact, this is yet another scenario where I have happened along something basically perfect for what I need:</p> <p><code>ReaderWriterLock</code> works best where most accesses are reads, while writes are infrequent and of short duration. Multiple readers alternate with single writers, so that neither readers nor writers are blocked for long periods.</p> <p>\u00a0\u00a0Inventory access follows this pattern almost 1:1. For this reason, inventories will now make use of this type.</p>"},{"location":"2025/03/15/#entity-actions-episode-what-4-now","title":"Entity Actions (Episode ... what, 4 now?)","text":"<p>\u00a0\u00a0Entity Actions are a system that's kind of new, so I have had to rethink them several times as I watch the game evolve. The previous iteration of the system was pretty solid but fundamentally flawed.</p> <p>\u00a0\u00a0Since by now my regular readers are wondering what the hell is going on and why I have to keep readjusting this system, most of the complexity comes from its defining feature - a feature that I am hellbent on adding - which is stateless actions. I won't reiterate the benefits of this and why I did it - I covered that in past blog posts.</p> <p>\u00a0\u00a0Instead, I'll mention what the big road block is this time: Your actions can change (i.e. picking up an item changes your actions if that item does stuff)! So how do I efficiently keep track of cooldowns? I can't just keep a list of everything, that's a lot of wasted memory especially if there's dozens of actions. I'd need to duplicate that entire list for every item in the game (as in, every item in an inventory slot, not item type) and every entity in the game (again, every entity in the world, not entity type) which you can imagine would waste so much memory.</p> <p>\u00a0\u00a0The current solution is to add some undefined behavior on purpose. The way action overrides work (i.e. by picking up an item) is by a layered system where objects can declare they overwrite actions at a certain priority level. Priority goes in order from Intrinsic (species abilities) \u2192 Item Actions (the things an item does when you use it) \u2192 Special Overrides (forced changes to another action).</p> <p>\u00a0\u00a0Each action set gets its own set of cooldowns for the (up to) five actions within it, and then the cooldown is selected just like the actions are when combining them into the list of actions that you see based on all overrides.</p> <p>\u00a0\u00a0The aforementioned \"undefined behavior\" I have to add is what happens when you edit the action set itself - something you shouldn't be doing anyway (why do you think I designed the layer system?) - and the answer to the question of \"what happens?\" is \"good question!\", hence undefined behavior. I'm not solving that problem for you. Use layers.</p>"},{"location":"2025/03/15/#world-touch-ups","title":"World Touch-Ups","text":"<p>\u00a0\u00a0The world system has gotten some love in lieu of Godot 4.4 adding Jolt Physics natively. I originally had this optimization in an older post, but removed it because it was far too technical. The takeaway is that Jolt can work with a lot of static collisions faster than Godot's native physics can.</p> <p>\u00a0\u00a0One of the biggest changes I have done is abandoning trimesh collisions for blocky terrain (you can still use it elsewhere in custom stuff). This is a huge performance boost to generating chunks because I don't need to build a collision mesh anymore. I also use the low level physics API for this, directly telling the physics engine to add collisions instead of making use of <code>CollisionShape3D</code> in Godot.</p> <p>\u00a0\u00a0Another significant change, albeit a destructive one, is that I have removed wedge shapes for the time being. These are complicated and wreak all sorts of havoc on the physics system. Part of why physics is so much better now is because I only need to use <code>BoxShape3D</code> which is a hell of a lot simpler to compute than a convex hull (not great but not bad) or concave triangle collision mesh (worst by far).</p> <p>\u00a0\u00a0That all aside, it has been a busy week with all these system fixes. Hopefully this is the last of it!</p>"},{"location":"2025/03/25/","title":"25 March 2025 - Steam, Soundtracks, and Terrain","text":"<p>&lt;&lt;&lt; Previous Post Next Post &gt;&gt;&gt; </p> <p>\u00a0\u00a0I've made a lot of progress over the past few days, but alas, the time has come for one of those retrospectives where I look over everything I have done and solidify existing systems. I've also got some news so this is kind of one of those \"mixed bag\" posts.</p>"},{"location":"2025/03/25/#steam","title":"Steam","text":"<p>\u00a0\u00a0I am happy to announce that I have paid Lord Gaben the fabled $100, so The Conservatory now has a Steam Store page! This page is private until I am ready for my testing phase, but don't worry - you'll know when it's up, because I'll be asking you all to wishlist it or join the tests that I host.</p> <p>\u00a0\u00a0Having a proper Steam store page is a huge milestone for me, as it kind of symbolizes how far I have come on this project. I'm so excited!</p>"},{"location":"2025/03/25/#music-and-youtube","title":"Music (and YouTube)","text":"<p>\u00a0\u00a0For those of you who have been keeping a closer eye on things, you'll know that I have been learning how to write music, to compose my game's soundtrack.</p> <p>\u00a0\u00a0Now I'm brand spankin' new to music. I don't know anything, and everything I have made thus far is purely based on what \"feels good\" (and as far as I can tell, this is an outstanding way to make music).</p> <p> With that, I am excited to be able to share with you the first song I have ever written! This YouTube video is also on the official channel for my business, though I doubt I will ever use it much beyond releasing the soundtrack, and maybe some devlogs.</p> <p> <p></p> <p>A short story, for the song...</p> <p>\u00a0\u00a0Sure, they might have been considered religious zealots by some, even though it is widely known that The Conservator of this Universe is very much real... Still, if that fact alone was somehow not enough to validate who they were, it seems that The Conservator personally designed and delivered special, highly advanced technology directly to them. They claim they received it in order to aid their research of Ether, the starry, celestine fluid seen throughout the deepest, most primordial lattices of creation.</p> <p>\u00a0\u00a0In a way, it was almost as if they had been given a divine laboratory. Some think it was a reward for their faith. Others think that The Conservator simply finds a certain joy in seeing Its children figure out what makes The Universe tick. Regardless, the work they have done since then is nothing short of awe-inspiring.</p>"},{"location":"2025/03/25/#terrain","title":"Terrain","text":"<p>\u00a0\u00a0One constant point of pain has been the world generator. In the Discord (which you can get to on the home page), I've mentioned some recent changes to it, but those are in the ramblings channel and only small tidbits of what to expect. It's still running old code that I was tinkering with, and to be frank, it's still pretty slow. As much of a joke as it is to compare any voxel game with Minecraft, I think here it's actually a very good comparison to make since it's the de facto standard of how fast a voxel game's world should load.</p> <p>\u00a0\u00a0Frankly, taking upwards of 20 seconds to load an 8x8x8 render distance of chunks is actually abysmal, no beating around the bush.</p> <p>\u00a0\u00a0While this decision does kill some time and delay things, it is vital that the terrain generator gets a rewrite. For a rundown of what has happened over development:</p> <ol> <li>The first terrain system used multithreaded design but with very basic locking. Multiple chunks could be generated, but access to a chunk was exclusive, and one at a time. Things had to queue up.<ol> <li>Notably, this system was kind of janky. I wrote my code defensively, that is, I made it try to handle errors and make guesses for what was meant to be happening. Lots of obscure and hard to trace bugs come from this sort of design!</li> </ol> </li> <li>The second (and current) system makes use of RW locking, which is the same as what I did with inventories in the last blog post: Several things can read at once, but only one thing can write at a time. This dramatically improves access efficiency, while still retaining the safety guaranteed by locking.<ol> <li>This system is extremely strict. Even the slightest mishap in data handling purposely crashes the game to prevent even a semblence of data corruption. The issue with this one is that error handlers were being triggered in the first place. My design is not good enough!</li> </ol> </li> </ol> <p> <p>\u00a0\u00a0If you wonder what \"locking\" is, it's useful in multithreaded code. An excellent analogy, and one that I have used before, is to imagine threads like people with pencils. The computer's memory is writing seen on a sheet of paper.</p> <p>\u00a0\u00a0In traditional single-threaded environments, this is as straightforward as it gets. The man reads his page, or writes on it.</p> <p>\u00a0\u00a0In multithreaded environments, things get complicated. Generally, it's safe for everyone to read stuff that's on the paper together even if all at once. Things go awry when you have several people trying to write at the same spot on the paper at the same time. That doesn't exactly work too well, now does it? There's also some issues of scenarios like, what if someone reads text that someone still hasn't finished writing yet?</p> <p>\u00a0\u00a0This is all resolved by locking. Locking provides a way for one of our metaphorical writers to say \"Hey everyone, I need to write something down, don't write at the same time as I am.\" - and then all the other people will wait if they need to write. The RW locking I mentioned prior goes an extra step, and basically adds \"Oh, and if you need to read this paragraph, wait a bit, that's the one I'm working on\" to that sentence. This ensures everyone gets safe access to the data, and no one conflicts with each other.</p> <p></p> <p>\u00a0\u00a0As it stands now, however, the current system is still too heavy. It's big and slow. The code is also unclean, with functions blurring into each other. I'll spare the fine details, but this is part of why it's so slow. The design isn't functional enough.</p> <p>\u00a0\u00a0Thankfully, these current systems are not useless. They are an excellent leanring example, and I understand precisely what I need to do to make the world generator fast.</p>"},{"location":"2025/03/25/#closing-thoughts","title":"Closing Thoughts","text":"<p>\u00a0\u00a0I'm looking forward to being able to actually show you all proper gameplay soon. I'll be honest: Nothing exists yet. It's still just backend system work. I've just started working on the frontend, the stuff you can see, and seeing all these months of work stitch together into something is truly amazing.</p> <p>\u00a0\u00a0I encourage you all to join the Discord to keep up to date! Link is on the home page.</p>"},{"location":"2025/04/22/","title":"22 April 2025 - The New Terrain System","text":"<p>&lt;&lt;&lt; Previous Post Next Post &gt;&gt;&gt; </p> <p>\u00a0\u00a0It's been a while!</p> <p>\u00a0\u00a0In the last blog post, I went over a few things about the game itself, but one of the topics also covered was about the new terrain system. I want to talk some more about that and what has been going on since that time.</p>"},{"location":"2025/04/22/#the-primary-redesign","title":"The Primary Redesign","text":"<p>\u00a0\u00a0The most noteworthy change made to the terrain system is the removal of node-based world objects. This kind of goes against the grain of typical Godot design, but it was deemed absolutely necessary for proper enforcement of design rules. It also opens the door to some improved performance opportunities (Like. By a lot. (like, holy shit tier of performance changes))</p>"},{"location":"2025/04/22/#performance-improvements-from-abandoning-nodes","title":"Performance improvements from abandoning nodes","text":"<ol> <li>No nodes means no unexpected external access.<ol> <li>Terrain geometry and physics objects are both opaque to outside code; a modder's code shouldn't just come in and delete any of the objects associated with terrain. Previously, this was possible to do (possibly on accident) which would crash the game as the terrain system detected a fault. Now, it's still possible, but significantly harder.</li> </ol> </li> <li>No nodes means no scene tree access.<ol> <li>The world benefits from parallel design, that is, the ability to task multiple threads with world generation to work together all at once.</li> <li>Adding nodes to the scene tree requires calling back to the main thread. This is, in general across all computing, an extremely expensive<sup>1</sup> thing to do that is best avoided if at all possible.</li> </ol> </li> <li>No nodes means no resource allocation.<ol> <li>Resources have their references tracked, and also a bunch of code to make sure they are used properly. They must also be allocated as distinct objects, wrapping around the low level ones.</li> <li>This design skips the nodes and resources, and directly goes to that low level data manually.</li> </ol> </li> </ol> <p> These two differences alone have improved terrain generation performance by almost 1500%! In fact, running this new system took 2.5 seconds to generate a 12x12x12 of chunks on a single thread. The old system took around 20 seconds to do that on 20 threads. Again, most of the time being spent here was calling back to the main thread. So if you ever needed a reason to know why you should avoid jumping across threads, that's why. Does this justify me saying \"like, holy shit tier\" at the start of the post? Yeah it does.</p>"},{"location":"2025/04/22/#what-else-should-get-the-no-node-treatment","title":"What else should get the no-node treatment?","text":"<p>\u00a0\u00a0Doing this to the terrain system has been hugely beneficial to code cleanliness and performance alike. Unfortunately this has kind of opened the Pandora's Box of performance optimizations for release. Namely, there's two other locations of the code that might seriously benefit from this type of change.</p> <ol> <li>The world itself. This may be a bit confusing - only the terrain (like, the physical object and the mesh) dropped nodes. The actual world itself is still a special <code>Node</code>-extending type called <code>ConservatoryWorldNode</code>. I access its <code>World3D</code> to get ahold of the physics space (the low level container that stores physics objects) and render scenario (the low level container that stores things that can be rendered).</li> <li>Entities. Entities use <code>CharacterBody3D</code> right now. This is great 99% of the time, but some entities have special needs such as being disallowed from moving, which I cannot enforce directly<sup>2</sup>. Additionally, this means I have to track child nodes and it becomes a huge mess especially if some modder deletes a required object without realizing.</li> </ol>"},{"location":"2025/04/22/#what-took-this-change-so-long","title":"What took this change so long?","text":"<p>\u00a0\u00a0Burnout. That's it. That's the paragraph.</p>"},{"location":"2025/04/22/#conflict-this-makes-things-harder-for-modders","title":"Conflict: This makes things harder for modders","text":"<p>\u00a0\u00a0One of the side effects of this change is that the convenience methods offered by Godot largely become unavailable. While terrain is functionally identical to many <code>StaticBody3D</code>s, raycasting or shapecasting to it won't reveal a <code>CollisionObject3D</code> to you. Instead, you'll have to use that obscure secondary parameter of the collider's <code>Rid</code> to access the information. I anticipate this will be quite confusing to newer modders. It is extremely rare for Godot code to do this as far as I know, and so someone somewhere is bound to be confused as hell when they see their raycast hit something but the object it hit is null.</p> <ol> <li> <p>In computing, \"expensive\" means \"has a high performance cost and takes a long time to do\". In the specific case of the world generator, this requirement to call back to the main thread took so long for the computer to do that it actually caused lagspikes when adding chunks to the world!\u00a0\u21a9</p> </li> <li> <p>\"Enforce directly\" meaning \"outright prevent it from happening\". The only solution I have now is reactive changes i.e. setting the position value when I detect the <code>Changed</code> signal.\u00a0\u21a9</p> </li> </ol>"},{"location":"2025/05/08/","title":"8 May 2025 - The Road to Beta Continues","text":"<p>&lt;&lt;&lt; Previous Post Next Post &gt;&gt;&gt; </p> <p>\u00a0\u00a0A lot has happened in the past month; development has hit another super-surge and a bunch of progress has been made. I just want to outline what's gone on this past month, as well as my plans for the immediate future.</p> <p>\u00a0\u00a0This blog post is so long that it officially qualifies for the status of T H I C C .</p>"},{"location":"2025/05/08/#entities-no-longer-use-nodes","title":"Entities no longer use nodes","text":"<p>\u00a0\u00a0In the last blog post I went over how I removed nodes from the terrain system and got an absurd performance boost out of it. This change has been translated to entities. Unfortunately, it's not so straightforward here. There had to be some odd compromises and tricks to get it all to work nicely.</p>"},{"location":"2025/05/08/#the-complexity-of-abstractentity","title":"The complexity of <code>AbstractEntity</code>","text":"<p>\u00a0\u00a0The world is pretty simple compared to entities. Translating the game's <code>StatefulVoxel</code> struct into geometry and physics objects has been done and is complete; the terrain system works exactly as it should and is able to handle different render and physics materials seamlessly.</p> <p>\u00a0\u00a0When it comes to entities, however, the story is different. Entities are not so well defined. An entity is a very abstract concept to the game, as it's basically \"a thing that exists in the world that does stuff\". If that sounds vague, it's because it is. This makes things difficult.</p> <p>\u00a0\u00a0The first challenge to face is how to handle physics. Entities were, prior to this change, a type extending <code>CharacterBody3D</code> (Godot's kinematic physics object designed specifically for character, moreso player, movement). Getting rid of this type was a hard choice because it's really good at what it does. Now, <code>AbstractEntity</code> simply tracks a reference to an <code>Rid</code> representing a low level physics body. This has several benefits, but to name a few:</p> <ul> <li>Certain physical motion types require specific node setups that are hard to enforce (i.e. <code>RigidLinear</code> bodies, which do not worry about angular momentum or rotation, dramatically simplifying simulation). This can now be directly set as a property of the entity.</li> <li>Useful, controllable types for relevant collisions. Some entities are static, some are kinematic, and some are rigid. <code>CharacterBody3D</code> can emulate this, but if I want truly perfect control, using a low level physics object allows me to mutate it as needed on the fly. This is incredibly powerful.</li> </ul> <p>\u00a0\u00a0This is well and good, but there's just one tiny problem: It's hard for me and modders to make character models that aren't node-based. Working with them in the Godot editor requires the use of nodes, otherwise editor features don't apply. This means that they still need nodes.</p> <p>\u00a0\u00a0Thankfully, I am aware of this problem. For this reason, modders will still create characters and items in Godot as scene resources. The game handles all the hard parts and worrying about where it goes in the scene tree. You just make the thing and come up with how it works. I make it work with the game itself.</p> <p>\u00a0\u00a0The main benefit to this change is again the lack of thread limits and scene tree access, just as it was for terrain. In particular here, though, it's object disposal that's much easier. Because entities are no longer bound by the scene tree, I can properly schedule their creation and deletion. It's okay if the physical character model lingers for a frame for a deferred deletion, for example. What matters is that the entity is properly marked as invalid and destroyed immediately and on my command. Previously, this was a problem when unloading worlds because the unload operation would be blocked by the deletion of entities and other objects like terrain, causing the game to hang on an \"unloading\" screen.</p>"},{"location":"2025/05/08/#expensive-ticks","title":"Expensive Ticks","text":"<p>\u00a0\u00a0One of the immediate concerns that came from entities no longer being nodes is the revocation of their <code>_Process</code> and <code>_PhysicsProcess</code> callbacks. These were pretty useful, and out of necessity I ended up creating something much better: Enter expensive ticks.</p> <p>\u00a0\u00a0The game's scene tree type, <code>FabricOfReality</code> - very avidly named, I know - contains C# events that fire on <code>Process</code> and <code>PhysicsProcess</code> respectively. This is all well and good; they run per frame and at the same pace as the game. There's just one issue. If you've played Minecraft on a laggy server, you know of the woes that is entity lag. Hitting a zombie only for it to do nothing and then you take damage from out of nowhere. It sucks.</p> <p>\u00a0\u00a0Continuing with the example, Minecraft tried to mitigate this with a slow tick rate of 20/sec. This is honestly a perfectly valid solution as it gives entities a comparatively long time to compute things without slowing down the server. It has its limits though (as mentioned before), and so expensive ticks are an experimental resolution to this problem. </p>"},{"location":"2025/05/08/#okay-just-get-to-the-point-what-do-they-do","title":"Okay, just get to the point, what do they do?","text":"<p>\u00a0\u00a0These events also run on <code>Process</code> and <code>PhysicsProcess</code> just like our ordinary tick events; that means per frame. Every time an expensive tick is ready to be sent out, all pending callbacks are collected into a queue. Then, this queue is processed one by one, with the game closely monitoring how long it takes to run all that code.</p> <p>\u00a0\u00a0When it runs these callbacks, it does so until the time elapsed passes a limit. This limit is 4ms by default, but exists in engine configs so you can change it. Once that 4ms is surpassed, the invocation list is metaphorically \"put on the backburner\"; the rest of the frame is allowed to continue. Then, on the next frame, we continue where we last left off in that invocation list. This process repeats until we hit the end.</p> <p> <pre><code>graph TB\n    Intro[Handle Subscriptions&lt;br/&gt;and Unsubscriptions] --&gt; Collect\n  Collect[Collect Callbacks] --&gt; Next[Get Next Callback];\n  Next --&gt; PreExec{{Callback unsubscribed&lt;br/&gt;during enumeration?}};\n  PreExec --&gt; |No| CheckLim{{Under the time limit?}};\n  PreExec --&gt; |Yes| Next;\n  CheckLim --&gt; |Yes| Exec[Execute Callback];\n  Exec --&gt; Next;\n  CheckLim --&gt; |No More Time| Defer[Defer Remaining Callbacks];\n  Defer --o Wait[Wait for next frame...]\n  Wait --&gt; Complete{{All current callbacks done?}}\n  Complete --&gt; |Yes| Intro\n  Complete --&gt; |No| Next</code></pre> <p></p> <p>\u00a0\u00a0The benefit to this, and arguably its failure as well depending on perspective, is that this reduces the frequency of updates. You can think of it as a way to implement dynamic tick rate. If the game would start lagging too much, the tick rate is purposely reduced to compensate, and things are designed around that fact.</p> <p>\u00a0\u00a0The only issue this raises is that entities will simulate slower when we start throttling time. Instead of the entities visibly lagging, though, their processes will instead slow down. Their processing of the world around them will suffer, but not the actual performance of the entity itself.</p> <p>\u00a0\u00a0By slowing down entity processing to salvage everything else, we solve that aforementioned \"laggy zombie\" problem. If you hit a laggy entity in The Conservatory, it will take damage as soon as you hit it (unless you are really lagging, like 2 FPS type shit). In exchange, it will react to changes in the environment more slowly, as if it were half asleep or distracted. The important thing is that the things you do and the actions you take still apply in a timely manner.</p> <p>\u00a0\u00a0The major thing you are probably asking is \"doesn't that put the player at an advantage if the game is overwhelmed\"? To which the answer is a very frank \"yes\". Yes it does. I think this is the right choice though, because it sucks when you hit a monster and nothing happens, and this fixes that problem. Would you rather the monsters be at an advantage just because you lag?</p>"},{"location":"2025/05/08/#harmony","title":"Harmony","text":"<p>\u00a0\u00a0In my continuing efforts to ensure the game is moddable in as easy a way as possible, one realization hit: People are going to need to change the game's vanilla code. Tools exist to do this, but my main worry is what if people pick different tools? The last thing I need on my hands is a modding community torn between mods that use System A and System B, so as the developer I have asserted my authority and mandated that we use Harmony - which has an even more perfect name than <code>FabricOfReality</code> does - as the patching framework.</p> <p>\u00a0\u00a0If you have ever modded a Unity game, you already know what Harmony is. MelonLoader and BepInEx both use it despite being different loaders, and for good reason - Harmony is powerful.</p> <p>\u00a0\u00a0If you aren't familiar with Harmony, it's a runtime code modification framework for Mono and .NET that allows you to patch code during runtime. This is outstanding for mods because it means you can package all of the changes you need to make to the game's code in your mod, and apply it without having to share edited game code (which would violate copyright laws). Moreover, Harmony was designed by a modder (one? more than one?), for modders. Its design pattern was made with mod compatibility in mind, making it the perfect tool for the job.</p> <p>\u00a0\u00a0Alongside the addition of Harmony as an included library, the game's vanilla code has also been upgraded to use it. This includes a couple of changes which I cover in the next section.</p>"},{"location":"2025/05/08/#improved-error-logging","title":"Improved Error Logging","text":"<p>\u00a0\u00a0The Conservatory has included a system to log crashes since its creation, which includes a really nice pretty-printer for exceptions. Here's a crash log from development when I broke asset loading:</p> <pre><code>https://youtu.be/dzMq5_thk4o?t=802\n\nCrash Time: Saturday, April 19, 2025 at 8:33:17 PM GMT+0\nContext: Executing Internal Main Loop\n\nGame Modification Status: Vanilla; No Mods\n\nBEGIN CRASH DUMP ::\n[System.TypeInitializationException]: The type initializer for 'Star3D.Render.CommonMaterials' threw an exception.\n\u2502\u2560In Star3D.Render.CommonMaterials::get_DefaultOpaqueTerrainMaterial at IL+0x0000\n\u2502\u2560In Star3D.Render.Atlas.TerrainTextureAtlas::SetParameterOnAllTerrainShaders at IL+0x0001\n\u2502\u2560In Star3D.Render.Atlas.TerrainTextureAtlas::ApplyAtlasesToShader at IL+0x001B\n\u2502\u2560In Star3D.Render.Atlas.TerrainTextureAtlas+&lt;GenerateAtlases&gt;d__39::MoveNext at IL+0x0B3C\n\u2502\u2560In Star3D.FabricOfReality+&lt;Startup&gt;d__53::MoveNext at IL+0x06FA\n\u2502\u2560In Star3D.Async.Coroutine::Resume on line 95\n\u2502\u2560In Star3D.FabricOfReality::ContinueStartup on line 190\n\u2502\u255aIn Star3D.FabricOfReality::_Process on line 189\n\u2514[System.IO.FileNotFoundException]: No such file with ID vanilla:atlased_terrain_translucent (File: vanilla:atlased_terrain_translucent (resolved using GameRootPathifier[RootFolderName=materials] into assets/vanilla/materials/atlased_terrain_translucent.tres))\n  \u2560In Star3D.IO.StarFileSystem::GetAssetFromAll at IL+0x00AD\n  \u2560In Star3D.IO.StarFileSystem::GetResourceFromAll at IL+0x0001\n  \u255aIn Star3D.Render.CommonMaterials::.cctor on line 19\n</code></pre> <p>\u00a0\u00a0With the addition of Harmony, this tool has been further improved. It will now relay information about patches to specific methods that were part of the stack trace, as shown in an edited example below:</p> <pre><code>BEGIN CRASH DUMP ::\n[System.TypeInitializationException]: The type initializer for 'Star3D.Render.CommonMaterials' threw an exception.\n...\n\u2502\u2560In Patch ExampleMod.Render.Atlas.TerrainTextureAtlasPatches::OnApplyingAtlasesToShader at IL+0x001B\n\u2502\u2551   \u2523Original Method: Star3D.Render.Atlas.TerrainTextureAtlas::ApplyAtlasesToShader\n\u2502\u2551   \u2517Harmony ID: The Example Mod (ID: examplemod)\n\u2502\u2560In Star3D.Render.Atlas.TerrainTextureAtlas+&lt;GenerateAtlases&gt;d__39::MoveNext at IL+0x0B3C\n...\n</code></pre> <p>\u00a0\u00a0As you can see, the log now includes the patch method with additional information. This information includes the original method that the patch was applied to, and the Harmony instance that was responsible for making that patch. This should make it significantly easier to debug mods that do code patches on the fly, as we can see who is responsible for what rather than by taking a guess from the stack trace (patched stack traces can get pretty messy, if you didn't know).</p>"},{"location":"2025/05/08/#closing-thoughts","title":"Closing Thoughts","text":"<p>\u00a0\u00a0All around, work has been incredibly swift as of late, and I am excited to announce that I am growing ever closer to a point where the game is properly playable. A lot of the time spent developing these past few months has been core framework upgrades to facilitate everything that I need for the game to be at its best. This has required rethinking a lot of old systems and adapting them to fit new goals.</p> <p>\u00a0\u00a0I'll do everything I can to keep you all up to date, but please note that I expect blog posts to stay fairly sparse during this critical time. As things level out, they may be come more frequent, but for the time being, this once-a-month schedule seems to be how it'll go for the foreseeable future.</p> <p>\u00a0\u00a0Thanks for reading!</p>"},{"location":"2025/05/21/","title":"21 May 2025 - The \"De-Noding\", Blog Changes, and Engine Upgrades","text":"<p>&lt;&lt;&lt; Previous Post Next Post &gt;&gt;&gt; </p> <p>\u00a0\u00a0Hello again! This is another big post. No intro - we've got things to talk about!</p>"},{"location":"2025/05/21/#blog-changes","title":"Blog Changes","text":""},{"location":"2025/05/21/#visuals-and-fixes","title":"Visuals and Fixes","text":"<p>\u00a0\u00a0I made a number of changes to how the blog handles its visuals, and fixed some issues.</p> <ol> <li>Most obviously, the blog is now w i d e. I do this for the internal documentation page, I think it looks a bit better, though it does make text look somewhat more dense.</li> <li>Search is now fixed. Apparently the script I used to add the blurred backdrop broke the search system. I'm not sure how.</li> <li>There is more contrast on the list of posts, and the section dropdown. <ol> <li>This was needed because with the fix to the search system, I'm no longer able to have a gradient on the screen itself (limitation of MkDocs, I know how to do it in HTML obviously). The lack of a blur reduced contrast due to the sharpness of the background without it, so this compensates.</li> </ol> </li> </ol>"},{"location":"2025/05/21/#new-post-format","title":"New Post Format","text":"<p>\u00a0\u00a0Two posts ago, I made a channel in the Discord server, <code>#development-ramblings</code>. This channel has served the purpose of being a dumping grounds for the small bits and pieces of work that I do over time, the ones that themselves aren't significant enough to make a blog post of their own.</p> <p>\u00a0\u00a0Prior to this channel's creation, I just had to keep mental footnotes on all of my progress on the game, and frankly it's hard to remember what all has been done in a game's alpha phase because so much is going on.</p> <p>\u00a0\u00a0As a result of this:</p> <ol> <li>Blog posts are now going to be recaps of what I have posted in <code>#development-ramblings</code>* * For the most part. Some stuff I do purposely save for these posts.</li> <li>Blog posts are mostly directed at people not in the Discord, or for people who don't want to dig through all the \"raw\" posts that make up <code>#development-ramblings</code>'s content.</li> <li>Blog posts may feel like they carry more information for this reason, depending on what has happened in the time since its previous post.</li> </ol>"},{"location":"2025/05/21/#the-de-noding","title":"The \"De-Noding\"","text":"<p>\u00a0\u00a0In the last couple posts I have gone over topics related to game system changes in lieu of The Conservatory's custom fork of the Godot engine, primarily with respect to my abandonment of the <code>Node</code> system. You don't need to read the previous posts. I'll recap here.</p> <p>\u00a0\u00a0Godot's unique design actually intends for this - nodes are really just wrappers around low level objects that the engine works with directly. They make some (generally correct) assumptions about how you want to use them, and implement most of the tedium for you, greatly simplifying code.</p> <p>\u00a0\u00a0For those of you who know more about Godot, you may be inevitably wondering why I chose to do this, especially given the added complexity of making the choice I did. There were a few reasons, but among the largest:</p> <ol> <li>Scene tree access requires being on the main thread, or deferring calls. This is by far the biggest reason for the change. <ol> <li>The important detail is that syncing to the main thread is slow, especially in Godot. <ul> <li>Deferred calls are deferred to the next frame. I can't use the result of that code immediately, for obvious reasons.</li> <li>Synchronized calls to the main thread are queried and run at the game's framerate. This basically means I do a deferred call, except I sit there doing nothing while I wait for the next frame to come around, and then it will execute my code.</li> </ul> </li> <li>As a reminder, there was a 1500% performance boost in the terrain system when it was changed to not use the scene tree.</li> </ol> </li> <li>Access to nodes allows unintended behavior. This is more of a personal reason, but one of the things I needed most was \"idiot-proofing\" on my data. Under the old system, it was possible for people to edit the data of something that the game expects to be made a certain specific way.<ol> <li>If the data was accessible, novice modders may cause a problem without understanding why it happens, and possibly try to fix it with some spaghetti that makes the experience worse for everyone.</li> <li>In particular, modders unexpectedly reparenting or freeing nodes used to have to cause a crash since there was no realistic way to handle this. This required a lot of spaghetti code and sealing various virtual methods of Godot's node types.</li> <li>By requiring access to the low level data, it effectively adds a small skill floor, and draws attention to the systems that use that data, making it very obvious how it is intended to be used so that the modder can mimic this where needed.</li> </ol> </li> </ol> <p>\u00a0\u00a0I need to address this: Working with low level objects is hard. As I mentioned in the last post, I intend to alleviate this problem by allowing nodes to be used anyway for things like prefabs and character models.</p> <p>\u00a0\u00a0Finally, in the last post, I mentioned that raycasts would not provide a <code>CollisionObject3D</code> to you. This is still true, however it has been improved. Why settle for a <code>CollisionObject3D</code> when you can just have the entire <code>AbstractEntity</code>? As it turns out, Godot doesn't actually care what an object ID is, so setting custom IDs on objects - an operation that would typically be used to bind an RID back to its Node (and by extension, is how raycasting is able to provide you with a Godot object in the first place) - allows me to assign my own game objects to raycasting targets. Relevant extension methods, like <code>RayCastResult.GetHitEntity()</code>, exist. More info on <code>RayCastResult</code> below.</p>"},{"location":"2025/05/21/#engine-fork","title":"Engine Fork","text":"<p>\u00a0\u00a0Not like the food utensil; this is a code fork - a derivation of the original code edited to suit my needs.</p> <p>\u00a0\u00a0That's right, I have failed the godot game dev try not to fork the engine challenge (impossible difficulty). However, these changes are nothing short of a requirement for the design of my game or for having good performance. Most of these changes are hacks that existed in C# (and were like, really bad for code stink) that I eventually ported into the engine.</p> <p>The most notable features:</p> <ul> <li><code>Simulation3D</code> is a new, advanced node type designed explicitly for The Fabric of Reality (the game's main class). The game client will directly render it exactly. The game server will use them to simulate several worlds in parallel.<ul> <li>Unlike <code>SubViewport</code>, this is not rendered to a target GUI element or texture.</li> <li>This class is also heavily managed by internal code; unexpectedly deleting the node or its <code>World3D</code>, or attempting to remove it before the <code>WorldInstance</code> (A pure C# game object) is unloaded will crash the game, enforcing the extremely strict use guidelines it has.</li> </ul> </li> <li>Early implementation of apples's fork that adds support for the Stencil Buffer.</li> <li>Fix to <code>Material.GetRid()</code> not being overridable.</li> <li><code>CharFXTransform</code> (used in <code>RichTextLabel</code>'s custom effects) now has context to the current <code>RichTextLabel</code> it is rendering for.</li> <li><code>RayCast3DDirect</code> is a type which supersedes <code>RayCast3D</code>. Unlike its sibling, the direct variation must be casted manually (it will not do this on physics steps for you). It also provides a method to cast statically.<ul> <li><code>RayCastResult</code> is a new type which returns the result of a raycast. It is intended for use with <code>RayCast3DDirect.CastStatically(...)</code> as a significantly improved replacement to the <code>Dictionary</code> returned by <code>PhysicsDirectSpaceState3D.IntersectRay(...)</code>.</li> </ul> </li> </ul> <p>\u00a0\u00a0In particular, <code>Simulation3D</code> is somewhat of a personal marvel. I had qualms with its predecessor, a plain <code>Node</code>-extending C# type called <code>ConservatoryWorldNode</code>. It was way too easy to irreversibly screw up the game if you tampered with this node. Moreover, this node did not support multiplayer because it used the root viewport for its world. <code>Simulation3D</code> fixes both of those problems.</p> <p> <code>Simulation3D</code> was designed for the single purpose of not letting that happen (easily). In fact, it's so tightly managed that you can't even create it. It's a hilariously stupid trick, but it is a Godot abstract class; you can't <code>Duplicate()</code> it, serialize it, or instantiate it. <code>FabricOfReality</code> is given sole management permissions to it via the use of low level pointer logic. You literally have to talk to the engine using raw memory in order to even hope to begin to manage the type.</p> <p>\u00a0\u00a0Thankfully, <code>Simulation3D</code>'s public interface (the stuff you use as a modder) is fully capable and just as easy to use as the rest of the game. It is your interface to the Godot engine through the game's world type, on my terms.</p>"},{"location":"2025/05/21/#closing-thoughts","title":"Closing Thoughts","text":"<p>\u00a0\u00a0All around, a significant amount of progress has been made these past couple weeks. The entity de-noding is basically done, I just have to reimplement physics in lieu of the new <code>Simulation3D</code> node.</p> <p>\u00a0\u00a0I still have some more work to do on <code>Simulation3D</code>. In particular these things bother me:</p> <ol> <li>A <code>Simulation3D</code> is intended to relate to a world, not a viewport. <ul> <li>Its use of <code>Viewport</code> as a base type is a compatibility choice: in the scope of \"give me the place that this thing is rendering/physically simulated\" (aka calling <code>node.GetViewport().FindWorld3D()</code>), <code>Simulation3D</code> does need to behave as a <code>Viewport</code> instance, so that way <code>Node.GetViewport()</code> returns it.</li> </ul> </li> <li>All of the methods to set up render properties need to be in sync.<ul> <li>The intent is that if you set the properties of a <code>Simulation3D</code> that pertain to rendering in the game itself, i.e. AA type, Vsync, so forth, it should affect the game in its entirety. Again, while it inherits from <code>Viewport</code>, it shouldn't be treated like one conceptually.<ul> <li>In a more perfect case, these methods would be hidden or marked as deprecated to discourage their use, as it may be confusing that editing one <code>Simulation3D</code>'s properties affects all of them. I doubt I can do that though.</li> </ul> </li> <li>On the game client, <code>Simulation3D</code> exists in a strange \"half-transparent\" state. Since the client can only see one world at a time, even if multiple <code>Simulation3D</code>s are loaded simultaneously, it sets the game's root <code>Viewport</code> to its own world privately (as in, <code>find_world_3d()</code> has been modified to return it).</li> </ul> </li> <li>I still don't have it override anything related to 2D worlds.</li> </ol>"},{"location":"2025/06/04/","title":"4 June 2025 - Lore Changes, and the Kirivian Rewrite","text":"<p>&lt;&lt;&lt; Previous Post Next Post &gt;&gt;&gt; </p> <p>\u00a0\u00a0Merry pride month. Now that a certain (unwanted) demographic has been obliterated from the readers on this page (xan gone w*ke? carson_crying.mp4), I have some lore things to mention that I have been working on behind the scenes!</p> <p>\u00a0\u00a0As it has been implied the last few posts, I'm getting close to a test release, and that means I have to come up with the second draft of the story. The story is significant to the game as it is what the progression (or, I guess the \"game-long tutorial\", like No Man's Sky in a way) is centered around. And if that bothers you, no, it's not required. If you wanna drop the story and do your own thing, have fun.</p>"},{"location":"2025/06/04/#cool-references","title":"Cool References","text":"<p>\u00a0\u00a0Before I talk story, I actually want to talk about some \"collaborations\" (I use that term very lightly) and little story inserts that certain community members are bound to enjoy.</p> <p>\u00a0\u00a0For some backing context, I have been a worldbuilder for a long, long time. One of my favorite things to see in communities is coherence. That is, Joe writes a story which John references, causing Joe to reference it back, then Amy ties in a story into the collaborative work of Joe and John, and then Suzy writes her own story which has their work in canon, so forth. These can quickly delve out of control, but sometimes they just work, and in particular, sci-fi is one of those environments where it works. It's probably due to the vastness of space. That said, I have done this exact thing.</p> <p>\u00a0\u00a0The references included in The Conservatory as part of its lore include:</p> <ul> <li>The Imminent Eschaton Moratorium Pact (\"iemp\") (hdorriker, DekaWolf, Fraxul) Relevant VRChat World (VR Not Required)</li> <li>The Terra-Widow System (Antiheat) Relevant VRChat World (VR Not Required)</li> <li>The Avali species (RyuujinZERO) Relevant FurAffinity Account</li> </ul>"},{"location":"2025/06/04/#the-conservatory","title":"The Conservatory","text":"<p>\u00a0\u00a0But what about the lore here? Well, my races have undergone some tweaks. The big highlight is on the Kirivians and the Novan.</p>"},{"location":"2025/06/04/#gaians","title":"Gaians","text":"<p>\u00a0\u00a0Gaians, the evolutionary successor to Humans, are roughly the same. The short version is \"(a specific, successful group of) scientists and artists that left Earth before society collapsed, and eventually they colonized an empty world and spread Earth life there\".</p> <p>\u00a0\u00a0The important role the Gaians have is the creation of the ISCA, kind of a starfleet-esque organization. The ISCA is largely still in flux (especially with the reference to the iemp mentioned above integrating something called R-113, which is a way to define life (or lack thereof) which receives basic rights).</p>"},{"location":"2025/06/04/#avelians","title":"Avelians","text":"<p>\u00a0\u00a0Avelians are the avian people of The Conservatory. Their lore has been tweaked a little bit, mostly in the form of their homeworld. I really wanted a race with tall stone skyscrapers (I think I saw a picture from the game Viewfinder that really inspired me. I'll play it soon<sup>TM</sup>).</p> <p>\u00a0\u00a0These folks are still in development and so they won't get much mentioned here, too much flux.</p>"},{"location":"2025/06/04/#kirivians","title":"Kirivians","text":"<p>\u00a0\u00a0Kirivians are the feline people of The Conservatory. Their lore has been significantly rewritten after I got the silly idea to make toki pona their native language as a bit of a love letter to the community. To make this work, I had to slightly tweak their culture and biology, and while I was at it I also tweaked the planet's biosphere a bit. There's a bit to unpack here. Their artstyle is still the same.</p> <p>\u00a0\u00a0Starting with the planet. Previously it was a once lush world that got destroyed by an extremely powerful solar flare, causing its magnetosphere to destabilize, killing most of the life on the surface (including the people) and whisking the oceans away into space through solar winds. The planet was almost destroyed, if not for the help of the Avelians, a close friend to the Kirivians, who devised a technique to create a magnetic \"shield\" using their fleet, while the world could be terraformed back into a livable space. Even if scarred permanently by the disaster, their world would recover.</p> <p>\u00a0\u00a0Now, in the original lore, this event was fairly recent, and people lived a post-apocalyptic lifestyle (albeit a very clean and positive one, as a bit of a literary curveball). The oceans were turned into cold deserts, not snowy, but not hot. The sky is permanently overcast, and it never seems to really rain beyond a faint mist. The continents are overrun with much more resilient fungal life, making them uninhabitable, casting people into the deserts below.</p> <p> In the tweak, I've made it so that this event happened several centuries ago. This is actually kind of a much needed change because of the time it takes to terraform, and the time it would take for things to stabilize into where I want them for presentation of the world (i.e. being permanently overcast, the ocean floor being a cold desert). It would also allow time for a new culture to develop. In conjunction, one of the holidays I had on the planet would not make sense without this cultural redevelopment. Oh, also, the continents are no longer overrun by fungus, and floral life is now present in most places. I moved the fungus to the Novans.</p> <p>\u00a0\u00a0Now, back to a thing I glossed over - toki pona as their official language. If you are not aware, this is a constructed language. It is incredibly simple, with 130-something words in mainstream use. Now you might be inevitably wondering \"how did you manage to make a space-faring civilization work on 130 words?\" - to which I answer \"I didn't\"!</p> <p>\u00a0\u00a0Kirivian biology includes the fact their brains, much like the Novan (down below), do not have a language center in the same capacity as Humans or Avelians. Kirivians previously didn't have a spoken language. They instead use pictures and paintings to communicate, mixed with very weak tactile empathic communication - you have to make physical contact with listeners to send thoughts, but its largely limited to feelings. Their primary means of visual communication is a bit inspired by Darmok from Star Trek: The Next Generation (S5E2), with their imagery relying on cultural metaphor and known events to carry significantly more meaning than what is literally shown in the image.</p> <p>\u00a0\u00a0Now, when they met the Avelians (among all of the playable races, and any inserted fan races) they had to develop some way to communicate. Moreover, this means that they had to come up with something that could be spoken, but which still suited their limitations. Thus, I realized something very close to me already exists that achieves this exact purpose: toki pona!</p> <p>\u00a0\u00a0While they may not have a strong speech center, they do have incredible memory and relational skills. In universe, I just have it that they oh-so-conveniently just happened to come up with the same toki pona and sitelen pona (the speaking system, and the writing system, respectively) that exists in the real world.</p> <p>\u00a0\u00a0This has had a cultural impact too: they may use the spoken language to describe pictures that are already known culturally. \udb86\udd11\udb86\udd24\udb86\udd6e\udb86\udd27\udb86\udd2c\udb86\udd30\udb86\udd90\udb86\udd09\udb86\udd29\udb86\udd00\udb86\udd68\udb86\udd09\udb86\udd23\udb86\udd91\udb86\udd9c\udb86\udd11\udb86\udd24\udb86\udd6e\udb86\udd27\udb86\udd71\udb86\udd09\udb86\udd7d\udb86\udd75\udb86\udd9c\udb86\udd11\udb86\udd06\udb86\udd27\udb86\udd37\udb86\udd68\udb86\udd11\udb86\udd4d\udb86\udd97\udb86\udd29\udb86\udd02\udb86\udd98\udb86\udd27\udb86\udd37\udb86\udd02</p> <p>\u00a0\u00a0A quirk of the Kirivian use of the language exists though: toki pona relies heavily on context to form the meaning of the words themselves. Kirivians will use phrases like the one above to describe one of their culturally important images or events to sort of \"prepare\" the conversation for a topic. Otherwise, they speak it just as it is spoken in the real world. </p>"},{"location":"2025/06/04/#novan","title":"Novan","text":"<p>\u00a0\u00a0The Novan got a restructure too, but not nearly as big as the Kirivians above. The big change is their planet. It used to be a volcanic hellscape. Now it's only sort of a volcanic hellscape.</p> <p>\u00a0\u00a0I wanted the Novan's weirdness to be exaggerated even more, and so as mentioned previously, I took the fungal overgrowth idea away from the Kirivians and instead made it part of the Novan world. The Novan now live in chasms and ravines where the temperatures are higher and there is not much light (better justifying their current sensory suite). On the surface of their world is a cold, silent fungal expanse. There's no plantlife. It's just fungal colonies, nothing moving, not a sound from any animals, nothing. All of the life is underground, the surface is unfriendly.</p> <p>\u00a0\u00a0This allowed me to also create a fun new thing: The Novan now use biotechnology with that fungus, mycelia is used to process both chemically and logically. Now personally, I quite dislike body horror and my lore reflects that. The most grotesque thing they might use is wet bits of fungus pumping things around. They don't use any other life ever, and they are a sophisticated people who follow their laws. The use of unauthorized biomass in technology is a serious crime, and the use of R-113 compliant biomass or equipment is a capital offense. Thankfully there is little incentivizing it, especially in the face of other races who use traditional electronics that can fill in the gaps that fungal biotechnology misses.</p> <p>\u00a0\u00a0Otherwise, they're the same lovable space cryptids as before.</p>"},{"location":"2025/06/04/#closing-thoughts","title":"Closing Thoughts","text":"<p>\u00a0\u00a0I know most of my recent blog posts are technical posts, so I thought I should make one about the game's story itself just to get people interested again. In particular I want to extend a thank you to jan Sonja (the creator of toki pona) for confirming to me that I am allowed to use the language like this. It is genuinely one of the most loving communities I have been in and so giving them recognition like this feels like a great way to return the favor back to everyone.</p> <p>\u00a0\u00a0When it comes to these races, I really want to look into more languages, but making entire languages is a very big investment that is frankly too much for me. This means that while I will have other languages in universe, they'll either be substitution script (English with different symbols, like \ueb52\ueb53\ueb40\ueb4d\ueb43\ueb40\ueb51\ueb43 \ueb46\ueb40\ueb4b\ueb40\ueb42\ueb53\ueb48\ueb42) or some incomplete fragment of what could be a language, without enough context to make it learnable. The Novan have a substitution script, and the reference of Terra-Widow mentioned at the start allows me to use Akolouthos for robotic beings. The Avelians probably have their own system, I think one has been loosely \"designed\" (scribbles turned lithography) but since I am letting my friend write that lore, it's ultimately up to him.</p> <p>\u00a0\u00a0If you have any questions about the story, you should join my Discord, it's on the blog home page. Thanks for reading.</p>"},{"location":"2025/06/22/","title":"22 June 2025 - Blog Fixes, Progress Report","text":"<p>&lt;&lt;&lt; Previous Post Next Post &gt;&gt;&gt; </p> <p>\u00a0\u00a0Hi everyone. Once again I've come to give you a teeny progress report. Things have been in a strange bit of flux and I have been slowing down work to ease my mind a bit. But there's still some new stuff.</p>"},{"location":"2025/06/22/#blog-fixes","title":"Blog Fixes","text":"<p>\u00a0\u00a0As you may have noticed, the blog is even wider than it was before. This was originally part of a fix for mobile not showing the screen at full width, but ultimately I decided it just looked better in general to have the blog be at full width.</p> <p>\u00a0\u00a0I also fixed the nav-bar on mobile, the header showing the current category of pages is no longer white, and by extension the text is now properly visible.</p>"},{"location":"2025/06/22/#new-mod-documentation","title":"New Mod Documentation","text":"<p>\u00a0\u00a0The game isn't out of course, and so this is largely internal, but I have recently done a bunch of side work for the modders out there: The Conservatory now ships with online documentation using the theme of this website.</p> <p>\u00a0\u00a0For the non-technical people out there, Visual Studio (not VS Code, just plain VS) allows me to export certain special types of comments in my code. This is documentation; a description of the code and other relevant information designed to be read by people. It's one of the most important parts of any codebase because it tells people how to use it. You can imagine why this is useful for modders!</p> <p>\u00a0\u00a0Certain special tools allow converting these comments into a website for people to use.</p>"},{"location":"2025/06/22/#previous-context","title":"Previous Context","text":"<p>\u00a0\u00a0Prior to this moment, I was using Doxygen. This is a tool that takes the data of those documentation comments and turns it into HTML. This worked mostly okay, but I had some qualms with it. It looks weird (to me), feels unorganized, and also had no context to the actual code that was being documented so a lot of links and stuff were broken.</p> <p>\u00a0\u00a0After getting upset at Doxygen, I looked into Sandcastle, ReadTheDocs, and DocFX, all of which were not satisfying to me. My older sister suggested Statiq, but this wasn't ideal either.</p> <p>\u00a0\u00a0So, in typical programmer fashion, the extreme option became appealing: Do it myself. Now I will say - this was way more complex than I thought it would be, like ridiculously complicated. But I was determined to make it work exactly how I wanted to.</p>"},{"location":"2025/06/22/#the-new-tool","title":"The New Tool","text":"<p>\u00a0\u00a0I think the most powerful part of my custom tool is the fact that it actually loads the game's core .DLL file (the code) as it generates documentation. This allows it to actually go in and inspect the exact details of my code that would never be exported as part of its documentation. The ability to look at this precise information makes documentation feel a lot better because it strips away all ambiguity. </p> <p>\u00a0\u00a0Among its primary features includes...</p> <ul> <li>The ability to display admonitions.</li> </ul> <p>This is an admonition</p> <p>You'll see these all over my website.</p> <ul> <li>The ability to read special attributes that contain messages to show to the programmer:<ul> <li><code>[IllAdvised]</code> is an internal metadata tag used to tell modders that while a method is usable, there's often a better alternative, or what they are doing is unconventional and will probably break things.</li> <li><code>[ExposedInternal]</code> is another internal metadata tag used to tell modders that the piece of code they are using was originally something locked down to vanilla code only (but which was willingly exposed to them), so they should try to see if there's a \"proper\" way to do what they want before continuing.</li> <li><code>[OnlyAvailableOn]</code> marks where some code can be used with respect to multiplayer, such as authority only, or server only, code.</li> </ul> </li> <li>The ability to observe the fine details of method parameters. Basic tools can see if a parameter uses <code>ref</code>, but my tool can see:<ul> <li><code>in</code>/<code>out</code></li> <li><code>ref readonly</code></li> <li><code>scoped ref</code>/<code>scoped ref readonly</code></li> </ul> </li> <li>The ability to see access modifiers like <code>public</code>, <code>private</code>, etc.</li> </ul> <p>\u00a0\u00a0And of course, the most important tool is the ability for me to have precise control over how exactly it displays to you with the theming and whatnot. Here's some pictures of the pages I made:</p> <p> </p>"},{"location":"2025/06/22/#progress-report","title":"Progress Report","text":""},{"location":"2025/06/22/#new-engine-feature-shapecast3ddirect","title":"New Engine Feature: <code>ShapeCast3DDirect</code>","text":"<p>\u00a0\u00a0If you are curious, a shape cast is like a ray cast, but it instead checks for colliders that intersect with a shape at a specific position in space.</p> <p>\u00a0\u00a0Like many engines, Godot allows both ray casting and shape casting. Rays are line segments used commonly for hitscan, and shapes are used for collider queries. Until now, parity with raycasting and shapecasting was broken because there was no <code>ShapeCast3DDirect</code> as a counterpart to the <code>RayCast3DDirect</code> type I added last engine update.</p> <p>\u00a0\u00a0I'll spare the details, because the reason this exists as well as its design style are exactly the same as they were for <code>RayCast3DDirect</code>.</p>"},{"location":"2025/06/22/#new-engine-feature-features-and-exclusive_variants-in-shaders","title":"New Engine Feature: <code>features</code> and <code>exclusive_variants</code> in shaders","text":"<p>\u00a0\u00a0This is the addition of statically-compiled shader variants to The Conservatory. This allows shaders to get rid of <code>if</code> statements, which are not good for GPU performance, by turning these statements into static branches. Static branches are special branches that, rather than checking while the code is running, actually check before the code runs. This does limit where they can be used to what are called \"compile-time constants\" (that is, information you know before even using the code in the first place). But, when you can leverage them, the performance gains are huge.</p> <p>\u00a0\u00a0This includes a whole editor widget to customize them, as shown below:</p> <p> </p>"},{"location":"2025/06/22/#physics-engine-api-upgrade","title":"Physics Engine API Upgrade","text":"<p>\u00a0\u00a0A slight API change was done to the physics server which allows getting if a shape is disabled on a body or area. This API is not normally included (only a means of setting the value), so I added it myself. Any GDExtensions you adapt for The Conservatory which affect or use the physics server will need to implement this method.</p>"},{"location":"2025/06/22/#entities-and-chunk-loading","title":"Entities and Chunk Loading","text":"<p>\u00a0\u00a0This detail is largely internal so I'll keep it short. Entities started out with their own value indicating how many chunks around them they would load. This no longer exists; instead, it's part of the entity identity (the type describing what an entity is conceptually).</p> <p>\u00a0\u00a0This has to do with the de-noding (see the blog post before the previous one) and physics engine trickery. Basically, to optimize the way entities work in the game, a master type called the \"Entity Marshal\" uses this to determine which entities it should keep track of for chunk loading.</p> <p>\u00a0\u00a0Entities which are classified as purely static (they can't move, not even through being teleported) are not tracked because their position will never change, so there's no need to. In the old system, it had to double check anyway to make sure their physics mode wasn't changed unexpectedly, which added code complexity and a bunch of extra work. This is no longer supported; once you declare an entity as static or teleport-only or physically simulated, it stays that way permanently.</p>"},{"location":"2025/06/22/#closing-thoughts","title":"Closing Thoughts","text":"<p>\u00a0\u00a0Not a lot has gone on, yet at the same time a huge amount has been going on. This is kind of a nothing-burger of a blog post, I know, but I just felt the need to keep you all up to date.</p>"},{"location":"2025/08/10/","title":"10 August 2025 - The First Art Pass","text":"<p>&lt;&lt;&lt; Previous Post Next Post &gt;&gt;&gt; </p> <p>\u00a0\u00a0It has been a while since my last post. I've kind of tried to maintain a silent monthly posting schedule but I've been so occupied with both myself and the project that it slipped by without me noticing.</p>"},{"location":"2025/08/10/#the-art-pass-begins","title":"The Art Pass Begins","text":"<p>\u00a0\u00a0As you may have noticed, this blog historically hasn't been big on pictures of the actual game. This is a bit of a running theme, but it's very much intentional, as basically all this time has been spent grayboxing and prototyping the vast systems involved with the game (and battling with my mental disabilities, but that's a topic for another time. I am well, don't worry!)</p> <p>\u00a0\u00a0However, now, I am beginning the art pass. The first art pass of a game's development is typically when the real transition from Alpha to Beta occurs. Things are starting to settle in and become more concrete, enough to the point where designing special art assets just for them begins to make sense. This is very exciting, and for the first time in a long time, I have things to show you!</p>"},{"location":"2025/08/10/#item-rarities","title":"Item Rarities","text":"<p>\u00a0\u00a0One detail is that The Conservatory is heavily inspired by RPGs where items have rarities associated with them, different quality levels. This follows the de facto standard of \"Common/Uncommon/Rare/Epic/Legendary\" that you are most certainly familiar with if you have played any game that has rarity levels in it. I have taken the liberty of adding three additional tiers.</p> <p>\u00a0\u00a0To describe these items, a frame has been created for these items in the inventory, like so:</p> <p> </p> <p>The rarities shown are as follows:</p> Rarity Color Description Common Dark Gray Common is the default tier and represents the most unremarkable level of rarity. Items in this tier are, as the name implies, quite common. Most natural materials that are easily accessible are here. Uncommon Green Uncommon items are marginally more interesting than their Common counterparts, still fairly common but rare enough to warrant having their own tier. Processed materials will often have this tier, like ingots or constructed objects, as will certain ores. Some alloys and synthetic materials (like plastic) will have this tier. Rare Blue Rare items are where items begin to become particularly notable. These items are not easy to find, but not difficult to find either. They are right in the middle. Complex objects like circuitry and most equipment will have this tier. Epic Violet Epic items are quite rare and often very special when you do find them. They also represent difficult to create objects, like advanced synthetic fibers (especially carbon fiber and other related substances) or advanced microcircuitry. These items are pristine. Legendary Orange Legendary items are the hardest to come across among the standard rarities, representing items rare enough to, as the name implies, be subjects of legend. Synthetic materials that use this tier are things like quantum computers, warp drives, and teleporters. The top of the top lives in this tier. Exotic Red Exotic items are not often used in vanilla, and are more of a stopgap to create a common, shared tier for modders to use when they want rarer-than-legendary items. A good possible description is that these items would be unique if not for the fact that they can be found in generated locations or as drops, even if extremely rarely. Unique Celestine Blue Unique items are self-explanatory. This is an item where a hard-coded, intentionally chosen number exists in the entire universe. Unlike all other rarities, these items cannot be farmed, found at random (* as part of generic procedural generation), or created. Divine Gold Divine items are reserved specifically for the single purpose of being The Conservator's personal belongings. This also includes creative versions of items, like power supplies which have a maximum supply rate of infinity, mining lasers that instantly break any material, or weapons that deal infinite damage. <p>\u00a0\u00a0In particular, I had reservations against adding Exotic tier at first, since the last thing I wanted to do was pull a Trove (n.b. this link goes to Fandom) where so many rarities are added that the lower ones become meaningless. Back in my day, finding a rainbow item was a thing to celebrate. Shadow didn't even exist yet! Beta sure was a different time...</p>"},{"location":"2025/08/10/#the-kirivians","title":"The Kirivians","text":"<p>\u00a0\u00a0The Kirivians have now received proper concept art done by Still-Icarus. Here's the most recent example (there's more than this but you don't get to see or read it yet).</p> <p> </p> <p>\u00a0\u00a0A lot of you are probably wondering \"Will you go with a low poly model style? Voxel based?\" to which I very avidly answer \"good question\", because I haven't decided yet. I'm making both right now to see what looks better, but I have been consistently thinking of going low poly. When I say \"low poly\" I don't mean PSX style, I think that style is getting a bit oversaturated in recent years among indie titles. Basically, I don't want intentionally visible polygons, but I don't want turbo quality either.</p>"},{"location":"2025/08/10/#languages","title":"Languages!","text":"<p>\u00a0\u00a0There's a special flavor of nerd out there that loves languages and worldbuilding, and boy do I have a feast for you. Currently, there are unique fonts for each of the four main playable races, as well as some easter eggs/additional references to other languages!</p> <p> * I plan to tweak the sitelen pona font because some glyphs, particularly \udb86\udd54, are not centered. The larger font sizes also look less than ideal. Each font has three sizes to maximize the amount of usable sizes in game: 12px, 18px, and 24px.</p> <p>The languages are as follows.</p> Name Species Notes Type Latin-base Gaians This is the font used for the Human race and so it is just basic text. The game uses this font in all places, lore-related or not. Plain English! sitelen pona Kirivians Uniquely, this is a real life language called \"toki pona\" (meaning it WAS NOT made for The Conservatory, and is not my work)! Specifically, sitelen pona is an alternate means of writing text in this language. Each symbol corresponds to one word. This says \"sitelen pona kepeken nasin sitelen suli luka luka tu\", in this case meaning \"sitelen pona written with a size 12 font.\" Logographic, Conlang Emblematic Print Avelian Avelians make heavy use of stone and metal in their construction, using impressions on clay or heated metal to write text, giving it a distinct style somewhere between stamped and brushed. Substitution Script* Photosequence Novan The Novan species does not communicate with sounds, but rather with light. Ticks thus trace out distinct flashing patterns rather than sounds. Substitution Script* Scratch Avali Not made by me! I only drew the font shown above, but I did not make the language. This is included as a bit of a shoutout to the Avali community, who is cemented primarily in Starbound. Given that this game takes much inspiration from Starbound, and that a lot of my friends are Avali, it made sense to include this out of the box for any aspiring modders looking to add space chickens into the game. Substitution Script Akolouthos Synths and Robots Designed by Antiheat (not made by me! I only drew the font shown above, but I did not make the language), Akolouthos is a systemically readable, QR-code-adjacent, text-only method of print that makes it easier for robotic life and other machines to read text in bulk in a more visually deterministic fashion. Substitution Script <p>* This MIGHT get a pseudo-conlang (think what Bethesda does for their languages) or a basic randomized/unpatterned sequence of sounds (think No Man's Sky). This is a huge amount of work and simply isn't worth it right now! Rest assured, the capability will be added ahead of time so modders can use it too.</p> <p>\u00a0\u00a0Another footnote with fonts is that I include Fairfax as the fallback font. This gargantuan font contains just about every Unicode character, and more importantly, implements UCSUR. This means that while not natively used in the game, the font is capable of writing in even more constructed languages (including sitelen pona) that are not actually used by the game. But if you ever wanted to reference something in a mod, well...</p>"},{"location":"2025/08/10/#menu-themes","title":"Menu Themes","text":"<p>\u00a0\u00a0Now that I am doing an art pass, menus are no longer basic rectangles. My skills in pixel art have skyrocketed over the past year of development and so I can get some really nice looking icons and frames for my menus. I've also spent some time paying very close attention to how menus actually work in operating systems and devices/programs that have a good feel to them.</p> <p>\u00a0\u00a0Most vitally, I have been focusing on accessibility features (you may have noticed the use of alt text on recent blog posts, which describe pictures for those with visual impairments). The Godot engine just got an upgrade implementing AccessKit, which allows accessibility programs to interact with the game. Unfortunately, there is no documentation for how to actually make it work. This isn't the fault of anyone in Godot, I don't think, because AccessKit itself has what basically boils down to \"todo: document this\" in its readme. So that's just swell.</p> <p>\u00a0\u00a0Regardless, here's what the mods menu looks like, for an example of the new style.</p> <p> </p>"},{"location":"2025/08/10/#engine-upgrades","title":"Engine Upgrades","text":""},{"location":"2025/08/10/#programming","title":"Programming","text":"<p>\u00a0\u00a0Once again, I have found myself in need of several upgrades to the Godot engine to suit my specific needs, so a few features have come out of this recently. Most notably:</p> <ul> <li><code>pivot_is_relative</code> property for <code>Control</code> nodes. This changes the <code>pivot</code> property to accept values from 0 to 1 (instead of values in pixels), in order to account for user-configurable element sizes that still need to have an anchor relative to some part of the screen.<ul> <li>For context, some UI elements have a \"home location\" that docks them to some corner of the screen. This works fine, until the user wants to resize the UI element. Ordinarily I would have to have special code listening to the <code>Changed</code> signal and update the pivot, which is very inconvenient and relies on a lot of duplicated code across many classes of elements.</li> </ul> </li> <li><code>RichTextLabel</code> got a face-lift:<ul> <li>In C# only, there is now a virtual <code>string BBCode { get; }</code> property which can be overridden. This feels a lot better than the requirement of adding a magic field.<ul> <li>Notably, <code>BBCode</code> is now additionally a valid property name. Previously, <code>bbcode</code> (all lowercase) was the only one that would be recognized which violates property naming conventions in C#. </li> </ul> </li> <li>In C# only, there are now two extra methods, <code>InstallEffect&lt;T&gt;()</code> and <code>PushCustomfx&lt;T&gt;</code>, that manage instances of the effect on their own.</li> <li>There is now a <code>Parsing</code> signal (event) which fires before and after parsing bbcode text.</li> </ul> </li> <li><code>Vector2</code>, <code>Vector3</code>, and <code>Vector4</code> also got improvements:<ul> <li>These structs now implement <code>IComparable</code>. This will sort them by length extremely quickly, even faster than doing so using <code>LengthSquared</code>.</li> <li><code>Normalized</code>, at the cost of a very tiny performance reduction, is now guaranteed to actually normalize the vector.<ul> <li>For some extreme cases where the floating point type was pushed to its limits, <code>Normalized</code> could return a vector that would distinctly still not return <code>true</code> from <code>IsNormalized</code>. This is no longer possible.</li> </ul> </li> <li>Two new methods were added, <code>ManhattanLength</code> and <code>ManhattanDistanceTo</code>. These are faster than their <code>Square</code> counterparts.<ul> <li>Manhattan length is a fairly strange space. As you may know, a circle is just every point where the distance from its center is equal to some radius \\(r\\). If you do this with Manhattan distance, you actually trace out a diamond (a square rotated 45 degrees). In 3D, you get an octahedron, and in 4D you get a 24-cell.</li> <li>A vital note when comparing vectors is to USE THE SAME SPACE. If you compare <code>x.Length() &lt; y.ManhattanLength()</code> you WILL get incorrect results! Both sides have to be measured using the same kind of space (Euler (\"ordinary\"/\"default\" space), Square, or Manhattan)!</li> </ul> </li> </ul> </li> <li><code>Mathf</code> got some upgrades too.<ul> <li><code>Mathf.IsOneApprox</code> is now available.</li> <li><code>Mathf.IsExactlyOne</code> is now available. This is a micro-optimization that uses a bitwise comparison. You won't notice the speed boost from this method until you are calling it millions of times per second, and then at that point you save maybe 1ms. So.</li> </ul> </li> <li><code>PhysicsServer3D::body_get_param</code> now has a new value <code>BODY_PARAM_INVERSE_INERTIA_TENSOR</code> which returns exactly that. </li> </ul>"},{"location":"2025/08/10/#godot-conservatory-edition","title":"Godot: Conservatory Edition","text":"<p>\u00a0\u00a0Because my version of the engine is so distinct now, I decided to name the fork. It comes with its own cool UI themes to distinguish itself from the base engine. The default theme matches that of the website here, Xan's Workshop.</p> <p> </p>"},{"location":"2025/08/10/#closing-thoughts","title":"Closing Thoughts","text":"<p>\u00a0\u00a0There's a few more bells and whistles that I haven't shown here, primarily the in-game HUD. I just don't want to show it off yet as I am still getting a feel for it. I have been silent for a while and that's just because I'm keeping my mental health in check, something becoming increasingly difficult with the current state of affairs here in the United States. </p> <p>\u00a0\u00a0I say this a lot, but there really is a lot going on behind the scenes. With Godot 4.5 on the horizon, my upgrades to the engine will soon have a stable version to branch off of. I plan to lock into 4.5 unless new features come around that warrant changing the engine version again.</p> <p>\u00a0\u00a0No matter - I lastly just want to give special thanks to jan Sonja (the creator of toki pona), Antiheat (the creator of Akolouthos), and RyuujinZERO (the creator of the Avali species) for allowing me to use their work in my game. It'll definitely make things a lot more interesting.</p>"},{"location":"2025/09/02/","title":"2 September 2025 - Mod Code Safety, Inventories (again), Lore","text":"<p>&lt;&lt;&lt; Previous Post</p> <p>You're on the latest post! </p> <p>\u00a0\u00a0Development feels like it has both slowed down and sped up simultaneously. That's confusing. Anyway...</p>"},{"location":"2025/09/02/#mod-code-safety","title":"Mod Code Safety","text":"<p>\u00a0\u00a0One of my oldest concerns with modding the game - and indeed a concern in this very moment - is the possibility for malicious code to crop up. Mods are written in C#, meaning they are basically just tiny programs which just so happen to use game code. If a bad actor up and decided to attack the community, they could very easily spread straight up malware through mods (and moreso, with the Steam Workshop being planned, they would have a perfect place to distribute it). This is absolutely unacceptable. I want you to feel reasonably safe when installing mods. As the developer, I have a duty to at least expend the effort to make mods as safe as I can. It's a thing of courtesy and care.</p> <p>\u00a0\u00a0Prior to this point, I had considered using Luau, a highly advanced fork of Lua with several incredible optimizations, for modding. It's quite powerful and would easily slot into the game's code. It also comes with its own sandboxing features for security. However, coupled with the fact that it would mean I have to actually add in a modding API rather than just letting modders use my code natively, the recent controversies with Roblox Corporation (who are directly involved with, and make use of, the Luau project) have made it significantly less appealing than it was in the past.</p> <p>\u00a0\u00a0Thing is, I got lucky. Yesterday I was pointed towards the work of Douglas Dwyer by community member Kae. This man is working on a voxel-based game engine right now, and to be frank, the guy's a genius. I'd probably use the engine if I weren't already cemented in with Godot. That said, the reason I've mentioned him is because he also created the star of today's post: The CasCore Library.</p>"},{"location":"2025/09/02/#enter-cascore","title":"Enter CasCore","text":"<p>\u00a0\u00a0CasCore is an interesting tool. For a small compromise, CasCore implements stringent security checks preventing unauthorized or potentially dangerous access to methods or fields. No more <code>Directory.Delete(@\"C:\\Windows\\System32\", true)</code> for bad actors, basically. The tool protects against a lot of attack vectors: Reflection, delegates, virtual method calls, <code>[UnsafeAccessor]</code>, the whole shabang. This means that I can provide at least a pretty stout assurance that a virus disguised as a mod won't immediately smear your computer across 7 dimensions.</p>"},{"location":"2025/09/02/#the-compromise","title":"The Compromise","text":"<p>\u00a0\u00a0As I mentioned, its use comes with a bit of a compromise. This won't affect the vast majority of modders, but it's vital to bring up anyway so people know.</p> <ol> <li>Harmony will now be delegated through my own interface layer. You do not get access to the Harmony, just a dumbed down version that I give you.<ol> <li>You will have access to prefixes and postfixes.</li> <li>Prefixes and postfixes will be checked. You can only inject into vanilla code, and attempting to access certain secure fields will count as a security violation<sup>1</sup>.</li> <li>You can see what you can or can't access based on the presence of the <code>[NoAccess]</code> and <code>[NoPatches]</code> attributes, which prevent general use and/or Harmony patching respectively.</li> </ol> </li> <li>You will not have access to IL modification and transpilers.<ol> <li>I plan to substitute these with infixes, which allow the insertion of methods arbitrarily within the target method body.<ol> <li>Infixes can not currently capture stack variables. This may change as I understand there are use cases for it, and I plan to try to make it work.</li> <li>Infixes can read and modify local variables, and can read and modify arguments.</li> </ol> </li> </ol> </li> <li>Your code will be modified before loading so that security checks are implemented. <ol> <li>This may affect its performance characteristics, but granted the code is considered secure, it will not affect function. In contrast, insecure code will be rejected<sup>1</sup>.<ol> <li>\"Insecure code\" means code that makes use of unauthorized API, like <code>File.WriteAllBytes</code> rather than the more closely managed <code>StarFileExtensions.OpenWrite(\"user://asdfg\")</code>.</li> </ol> </li> <li>When benchmarking, you may want do so while the game is running, not in an isolated environment.</li> </ol> </li> <li>There is a runtime performance cost for the invocation of virtual methods. This is unavoidable.<ol> <li>This cost is not incurred when you call your own virtual methods in your own assembly.</li> <li>This cost is incurred when you call someone else's virtual methods, as well as vanilla virtual methods, and interface methods (where the type being called on is the interface, not the implementing class/struct).</li> </ol> </li> </ol> <p>\u00a0\u00a0All around, I am confident that CasCore is the best choice to facilitate a safe modding environment.</p>"},{"location":"2025/09/02/#new-inventories","title":"New Inventories","text":"<p>\u00a0\u00a0Inventories have gotten some focus again lately since they are so central to the experience. In particular, I recently got back into Starbound, with Frackin' Universe installed. One of the big drawbacks of this mod is the reliance on crafting components for various machinery. It makes sense and adds a lot of the fulfilling work required to craft advanced desires, but it also floods the inventory really badly to the point where you can't keep everything you need on hand. It's annoying and feels awful.</p> <p>\u00a0\u00a0Originally I planned to solve this a bit too precisely. My intent was to add a \"Components\" inventory within your main inventory, a basic, list-formatted, high capacity inventory that stored items meant only for crafting and nothing else. This way you can have them on hand all the time without worrying about them taking up space. This has a few problems though:</p> <ul> <li>Even if useful, it felt kind of overpowered and also complicated the implementation of inventories a lot, because now they need two data structures to store items.</li> <li>This was too specific and not generally appliable; what if a modder wanted to add a different special inventory like this? No system existed to facilitate this.</li> </ul>"},{"location":"2025/09/02/#the-inventory-hub-system","title":"The Inventory Hub System","text":"<p>\u00a0\u00a0My new solution was a bit more thought out: The Inventory Hub. This is not something you actually see and touch in gameplay, it's entirely abstract in the code. You just get a normal inventory like you are used to. So what makes the Inventory Hub different?</p> <ol> <li>The Inventory Hub is extensible. At a minimum it has a \"main inventory\" and an optional coin purse (this is the object used to track and store currencies).<sup>2</sup></li> <li>It can have more than one inventory within it. These extra inventories work like Starbound's tab system where an item goes into a specific kind of inventory made for that kind of item.<ol> <li>Unlike a list inventory, you still have a separate, sortable item grid for each special inventory category. This means you reap the benefits of organization and a grid.</li> </ol> </li> <li>It facilitates the mounting and dismounting of extra inventories. If you find a backpack, it will become a tab in your inventory just like a category, and you'll access it that way too.</li> <li>It allows univeral item searching and presence checks. This means if you want an item to apply an effect while in the inventory, you can do that. Likewise, you can pull from a backpack or the main inventory when using crafting recipes.</li> </ol> <p>\u00a0\u00a0This system sounds complicated but it really isn't. It's actually compatible with my existing inventory system immediately because I planned ahead with inventories, especially with the events contained on inventories. The only changes I need to make are:</p> <ul> <li>The mount/dismount system.</li> <li>Item whitelists/blacklists to allow or prevent certain inventories from accepting specific items.</li> <li>A new value added to items so they can indicate which inventory category they go into, by ID.<ul> <li>This is separate from item tags which there can be as many as you want.</li> </ul> </li> </ul>"},{"location":"2025/09/02/#lore","title":"Lore","text":"<p>\u00a0\u00a0I don't often talk about lore because this early in development, it's not really something I'm focused on. You can't have lore in a game if there is no game, you know? On top of that, it's frequently changing, so 8 times out of 10 I'll say something and then it'll be outdated, which isn't great. But occasionally, bits and pieces of lore get worked on for one reason or another. </p> <p>\u00a0\u00a0As the more astute of you may know, I have been working with RWGryphon on the game's lore since I want to include his story in a significant capacity (as a note, his story is something we have both worked on since we were young children, it started out as a little fantasy and we just kept adding to it). One of the major contentions we faced for a very long time was how to make our two worlds mix. Primarily, I have The Celestine Conservator, the creator of the universe. He has The Radiance, also the creator of the universe. Surely you can see the problem. The thing is, these two beings are distinctly different, and so \"just make them the same deity\" isn't an option here. We largely ignored this glaring issue for many months, instead choosing to focus on the stuff that matters - lore for the various playable races, other aliens, that sort of stuff.</p> <p>\u00a0\u00a0However, just recently, we finally managed to solve the contention. We found a way to make both work in a believable way, thanks to one design choice I made with The Conservator: It's not omnipotent. This allowed us to effectively shoehorn in The Conservator as the creator of the rest of the universe. The Radiance is still the absolute creator of all things (as He originally was in RWG's story), but we altered His lore so that He focused on only one set of worlds, basically a pet project where the universe was its byproduct. The Conservator was created as a lesser deity for the purpose of putting life into the rest of the infinite expanse that is the universe, hence \"the creator of the rest of the universe\".</p> <p>\u00a0\u00a0In particular I really love this design because it lets each one keep their role, and explains how they interact with reality. The Radiance is not a character you will see nor interact with. He will only be mentioned in some lorebooks as a recurring background element. The Conservator is a character you can visit (at least, such is the plan right now), but as something that isn't omnipotent, it's oblivious to the happenings of the universe. This is an important detail because it allows The Conservator to be a character in the story. It also helps with compatibility with other lore for various species that I reference, because their universes may or may not have their own religion and deities (or lack thereof).</p> <p>\u00a0\u00a0Despite our satisfying progress of stories within the universe, this contention was always a huge void that was just kind of sitting there menacingly. It did prevent a lot of serious progression from being done with the world story, since we never knew who would be responsible for what aspects of reality, creating ambiguity. It's hard enough having all-powerful beings in a story. It's even worse when the writers don't know how the hell to use them. So that's fixed now. Woohoo.</p>"},{"location":"2025/09/02/#closing-thoughts","title":"Closing Thoughts","text":"<p>\u00a0\u00a0As far as things look now, development is just kind of \"happening\". There's no super major progress, but it's not stagnant either. I actually have the new inventory menu sort of made (I say \"sort of\" because it's outdated now). A picture was going to be shared here but I decided against it because I plan to do some more with the game's interface before anything else.</p> <p>\u00a0\u00a0Another thing of note is that I am considering having special tool slots. Starbound's MM slot feature is especially useful. For context, in Starbound you have a tool called the \"Matter Manipulator\" which is always present and can't be deleted. It has its own special slot, with its own special keybind to equip it. Mods took this a step further and allowed overwriting the slot with other manipulator variants and related mining tools. I love this behavior to the point where I'd like to implement it myself. This also makes it easy to have the paint tool for blocks without worrying about items.</p> <p>\u00a0\u00a0One of the other ideas I was more playfully considering was thematic menus. In particular I love when menus carry a specific theme for characters or species, like imagine your inventory menu having different aesthetics if you play as a Gaian vs. a Kirivian vs. a Novan, right? The hard part with this is that making it look good and not like reused-asset-slop requires hand-drawing all of the menus, and then superimposing relevant elements (like buttons) onto the menu. As much as I would love to do this, I simply don't have the time to, nor the artistic prowess (my consistency is just a bit lacking right now), and the clutter from all the different graphics is kind of daunting. It's something I'll have to consider probably some time during beta. Still, it seems fun.</p> <ol> <li> <p>In this case, the game will crash with <code>FATAL_CODE_SECURITY_VIOLATION</code>, caused by a <code>SecurityException</code>.\u00a0\u21a9\u21a9</p> </li> <li> <p>If this hub system works particularly well, I may nix the coin purse concept and just add a \"money inventory\". The main thing is that the coin purse allows having huge amounts of currency, whereas item stacks are stored in <code>UInt16</code> format (65535 is the largest stack size that can be ever created).\u00a0\u21a9</p> </li> </ol>"},{"location":"other-lore/isca/","title":"The Interstellar Sapience Congruity Accord (\"Interstellar Accord\", \"The Accord\", or \"ISCA\")","text":"<p>Nothing on this page is a promised feature or guaranteed to be in the game.</p> <p>If you are seeing this warning bubble, here is a reminder that this project is in early development. Anything you see here is NOT a promise or guarantee. Features on this page WILL BE ADDED, REMOVED, OR CHANGED WITHOUT ANY SORT OF NOTICE. If I find you on twitter.com saying how I \"broke promises\" because you saw something on this page that I removed later, I will point at you and laugh for being a dummy idiot doodoo bref dummy head, a real stinker, perhaps dare I say, a poopyhead even.</p> <p>\u00a0\u00a0The Interstellar Sapience Congruity Accord (ISCA) is a governmental body created by the Gaians, Avelians, and Kirivians. It serves as a means of creating a peaceful unity with other beings in the universe, and grants well-defined rights to these beings regardless of membership.</p> <p>\u00a0\u00a0The ISCA strives to be as accessible as possible to all species. Membership is relatively easy to attain, with the following being the most significant of the requirements:</p> <ul> <li>Member governments must uphold the values of the ISCA, and must enforce that their citizens do not undermine its values.</li> <li>Members must enforce all ISCA rights and cannot rescind them or create exceptions under any circumstances.<ul> <li>All ISCA officials above the rank of (not yet defined) have the ability to unilaterally approve or deny political asylum across the entire organization.</li> </ul> </li> <li>Members do not need a dedicated homeworld, only an organized and stable government.</li> </ul>"},{"location":"other-lore/isca/#history","title":"History","text":"<p>Not well defined!</p> <p>This section is not well defined due to the fluid nature of the lore in the game's current state.</p> <p>\u00a0\u00a0Originally, the ISCA was the \"XGRF\" (Cross-Galactic Research Foundation), owned only by the Kirivans and Avelians. The Gaians, being from half way across the galaxy, were the catalyst that turned it into something greater. When it became obvious to them that these newly-arrived Gaians were a significantly more docile people compared to their ancestors (the Humans), and moreover that they needed to be ready to account for new species, all three races found themselves in agreement: the ISCA was the most reasonable next step to take in the development of their collective cultures.</p>"},{"location":"other-lore/isca/#neural-translator","title":"Neural Translator","text":"<p>\u00a0\u00a0One crucial piece of technology for the ISCA is the Neural Translator. This is an advanced, implantable neural network designed to recognize patterns in language to form reliable translations in real-time. Everybody speaks their own language, and everybody else understands. It is also equipped to understand new languages in as little time as possible.</p>"},{"location":"other-lore/isca/#fan-content-and-mods","title":"Fan Content and Mods","text":"<p>\u00a0\u00a0Understandably, a lot of people who interact with this game are the kind of people who love to make fan content. Here is me telling you that you are allowed (and encouraged) to make your own species be members, allies, or enemies to, the ISCA. Seriously, go right ahead! I love it when people feel like they can integrate and be a part of my story. I very intentionally left it open ended and easy to get in for this exact purpose. I want your creative little self-inserts and fanons!</p> <p>\u00a0\u00a0For example...</p> <p>\u00a0\u00a0A small part of the Avali community has shown an interest in the game. For this reason, I gave my thanks in the form of allowing Scratch to be used in-game. Additionally, some stuff such as the ability for a <code>Species</code> object in game code to declare native temperatures/pressures that are survivable came from realizing someone might want to mod it in.</p> <p>Hello, Avalikin.\"Hello, Avalikin.\"</p> <p>\u00a0\u00a0And...</p> <p>\u00a0\u00a0My request to use Akolouthos (often just called \"Ako\") in-game was accepted. This is something used in Antiheat's universe (which I mark as a source of inspiration over on the About page). This one is particularly interesting; it is a vertical typeface designed for use by synethetic (robotic) races. It can still be read manually if you know the symbols. Typically, typed phrases do their best to remain square. Each glyph is square as well. This is a 4x4, with two characters overflowing to the right:</p> <p>HELLO, SYNTHETICS.\"Hello, Synthetics.\" HELLO, SYNTHETICS.This way \u2192 I actually really like this mode of writing, because it just looks like a proper datablock. It almost intuitively feels like something that is easily usable for robotic species, hence why I was so excited to try to use it.\"I actually really like this mode of writing, because it just looks like a proper datablock. It almost intuitively feels like something that is easily usable for robotic species, hence why I was so excited to try to use it.\"</p>"},{"location":"other-lore/story-overview/","title":"Overview","text":"<p>Nothing on this page is a promised feature or guaranteed to be in the game.</p> <p>If you are seeing this warning bubble, here is a reminder that this project is in early development. Anything you see here is NOT a promise or guarantee. Features on this page WILL BE ADDED, REMOVED, OR CHANGED WITHOUT ANY SORT OF NOTICE. If I find you on twitter.com saying how I \"broke promises\" because you saw something on this page that I removed later, I will point at you and laugh for being a dummy idiot doodoo bref dummy head, a real stinker, perhaps dare I say, a poopyhead even.</p> <p>\u00a0\u00a0For obvious reasons, I will not be telling you the plot outline verbatim. Not only is it subject to change as mentioned above, but it's also fairly internal right now! So while this may be what is on my storyboard, it may not be what happens in game.</p>"},{"location":"other-lore/story-overview/#exposition","title":"Exposition","text":"<p>\u00a0\u00a0The player begins the game in what seems to be a dream or a daze. They are in some facility, there's alarms blaring, things are up in flames, but there's nobody there! Fire suppression seems to be failing or missing, and the player can't help but to notice a sigil drawn repeatedly all over the walls, ceiling, and floor.</p> <p>\u00a0\u00a0The player has to find an escape, running through a set of halls that aren't (yet) on fire. As they move on, strange distortions seem to be occurring in reality itself, as if someone is trying to rip apart the fabric of spacetime. Ultimately, the player will be led around the maze of hallways with no way out, only to get caught in an explosion and thrown into a rift.</p> <p>\u00a0\u00a0The player wakes up on the surface of the planet, their crashed ship nearby. Its basely functioning nav system reports that this region of space is not known, and no starcharts match. The player is lost, alone, and stranded.</p>"},{"location":"other-lore/story-overview/#the-goal","title":"The Goal","text":"<p>\u00a0\u00a0The player's first goal is to survive, and find clues to what might have happened to them. We love a good mystery!</p>"},{"location":"other-lore/units/","title":"Units in The Conservatory","text":"<p>\u00a0\u00a0I love my sci-fi to be at least reasonably coherent. No sci-fi can be perfect - if it were, there would be no \"fi\" in the phrase. Still, people love it when it seems coherent enough and makes intuitive sense.</p> <p> While the game will usually measure in your choice of Metric or Imperial units, I have also included in-universe custom units called Interstellar Standard Units, based off of cosmological constants, which you can use if you are feeling particularly daring.</p>"},{"location":"other-lore/units/#the-interstellar-standard-unit-system","title":"The Interstellar Standard Unit System","text":""},{"location":"other-lore/units/#real-world-universal-constants-as-seen-in-the-conservatory","title":"Real World Universal Constants, as seen in The Conservatory","text":"<p> First, some background lore from real life. In 2019, all of our standard units of measurement (SI units) were modified to be built upon Universal Constants. These are constants based on the laws of physics themselves. This boasts several real world benefits to the way we measure things!</p> <ol> <li>The values can never become inaccurate or change over time. They can only become more precise. The speed of light will always be exactly 299792458 meters per second in a vacuum, for instance, and this is a truth of reality that can not be changed.</li> <li>These values are the same everywhere in the universe<sup>1</sup>, which means if we ever encounter aliens, these units are universal. We can tell an alien that a meter is a certain amount of Planck lengths (one of these universal constants) and even if they have no clue what a meter is, they can figure that out on their own!</li> </ol> <p>\u00a0\u00a0Turns out this is awesome for writing stories too, like The Conservatory's lore.</p> <p>\u00a0\u00a0The Conservatory uses real world Universal Constants, however it assumes completely precise values exist<sup>2</sup>. The math is the same as the real world, with the exact values for Planck's constant and the Boltzmann constant. The Planck length is treated as exactly \\(1.616255\\times10^{-35}\\) meters. Other universal constants (Length, Mass, Temperature, Time, G) can be calculated from all of these.</p> <p>\u00a0\u00a0When calculating the values in-game, please impolitely discard preservation of significant figures. The game's math doesn't care about them, and since we aren't doing real physics or science here, it doesn't really matter.</p>"},{"location":"other-lore/units/#what-are-the-game-units","title":"What are the game units?","text":"<p>Don't overwhelm yourself!</p> <p>There's a lot of information here, but you probably don't need it all! If you are just looking for how to use these numbers when writing stories or dialogue, skip to the next section after the data tables below.</p> <p>\u00a0\u00a0Here's the raw units. If you want to know how to write stories using these, see the next section.</p> Usage Name Abbreviation Value Measurement Length Stride \\(st\\) \\(\\ell_P\\times2^{112}\\) \\(\\text{1 st}\\approx0.08392\\) meters Length Sprint \\(sp\\) \\(\\mathsf{stride}\\times2^{16}\\) \\(\\text{1 sp}\\approx5499.78\\) meters Time Tempora \\(tm\\) \\(t_P\\times2^{144}\\) \\(\\text{1 tm}\\approx1.202288\\) seconds Time Hold \\(hl\\) \\(\\mathsf{tempora}\\times64\\) \\(\\text{1 hl}\\approx1.28\\) minutes Time Octholds \\(oct\\) \\(\\mathsf{hold}\\times64\\) \\(\\text{1 oct}\\approx1.36\\) hours Time Cycle \\(cy\\) \\(\\mathsf{tempora}\\times2^{16}\\)\\(\\mathsf{octhold}\\times16\\) \\(\\text{1 cy}\\approx21.887\\) hours\\(\\text{1 cy}=16\\) octhold Time Sequence \\(se\\) \\(\\mathsf{cycle}\\times512\\) \\(\\text{1 se}\\approx1.28\\) years Temperature Thermo \\(th\\) \\(T_P\\times2^{-108}\\) \\(\\text{1 th}\\propto0.43658\\) Kelvin Temperature Plasma \\(pl\\) \\(\\mathsf{thermo}\\times2^{16}\\) \\(\\text{1 pl}\\propto28611.72873\\) Kelvin Mass Fulcra \\(fl\\) \\(m_P\\times2^{24}\\) \\(\\text{1 fc}\\approx0.3651\\) kilograms Mass Cargo Fulcra \\(flc\\) \\(\\mathsf{fulcra}\\times2^{16}\\) \\(\\text{1 flc}\\approx23930.149\\) kilograms - - - - - Velocity Warp \\(W\\) \\(c\\)\\(\\mathsf{strides}\\times \\frac{{299792458\\text{ m}}}{1.202288\\mathsf{\\text{ s}}}\\) \\(\\text{1 W} = c\\)\\(\\approx20925774.675254\\) st/tm"},{"location":"other-lore/units/#real-world-units-used-above","title":"Real World Units Used Above","text":"Name Abbreviation Value Meaning Planck length \\(\\ell_P\\) \\(=1.616255\\times10^{-35}\\) meters Smallest measurable length allowed by the laws of physics. Planck time \\(t_P\\) \\(\\approx5.391246366844892\\times10^{-44}\\) seconds The amount of time it takes to travel \\(\\text{1 }\\ell_P\\) at the speed of light \\(c\\). Planck temperature \\(T_P\\) \\(\\approx1.41678418\\times10^{32}\\) Kelvin Maximum allowed temperature by the laws of physics. Planck mass \\(m_P\\) \\(\\approx2.17643437560\\times10^{-8}\\) kilograms Odd one out. Less of an obvious meaning than the others, with no good analogy."},{"location":"other-lore/units/#advice-for-writers","title":"Advice for Writers","text":"<p>\u00a0\u00a0Numbers are based on powers of two. Instead of numbers like 5, 10, or 100, our interstellar citizens really enjoy 2, 4, 8, 16, 32, 64, so forth.</p>"},{"location":"other-lore/units/#time","title":"Time","text":"<p>\u00a0\u00a0Sorry, I lied. You'll have to look at the table above (the bigger one) to learn what these units are.</p> <ul> <li>Try these quick substitutions for our common phrases (these are not mathematically correct!):<ul> <li>\"Just a few seconds\" =&gt; \"Count a few tempora\"</li> <li>\"Give me 5 mintues\" =&gt; \"Give me 4 holds\"</li> <li>\"... 15 minutes\" =&gt; \"... 16 holds\"</li> <li>\"30 minutes\" =&gt; \"32 holds\"</li> <li>\"60 minutes\" =&gt; \"64 holds\" (Like in person, rarely used but still valid.)</li> <li>\"An hour\" =&gt; \"1 octhold\"</li> <li>\"12 hours\" =&gt; \"8 octholds\"</li> <li>\"24 hours\" =&gt; \"16 octholds\" (Like in person, rarely used but still valid.)</li> <li>\"A day\" =&gt; \"A cycle\"</li> <li>\"A year ago\" =&gt; \"A sequence ago\"</li> <li>\"A decade ago\" =&gt; \"8 sequences ago\"</li> <li>\"A century ago\" =&gt; \"64 sequences ago\" (this is 80 years, not 100, but colloquially it's used the same way)</li> </ul> </li> </ul> <p> There is an analogue to Star Trek's Stardate system used by this game. It uses a unit of time measured since the foundation of the ISCA</p> Sequence . Cycle / Whole Octholds Fewest digits (Sequence) (dot) Three digits (Cycle, 000-511) (forward slash) Four Digits (whole holds, 0000-1023) <p>Example: <code>1.442/0965</code> is 1 sequence + 442 cycles + 15 octholds (960 holds) + 5 holds Could be thought of as \"2 years, 100-some days, at 22:47\" (n.b. this is me eyeballing it and is not accurate)</p> <ol> <li> <p>Shhh.. Shhh. Yes. I know. It's more important that people understand even if some nuance is left out with respect to relativity and whatnot.\u00a0\u21a9</p> </li> <li> <p>These values normally have some margin for error due to quantum mechanics preventing you from actually measuring something with 100% accuracy. The Universe doesn't particularly enjoy being snooped in on. The game throws this limitation away because it makes things very hard to work with!\u00a0\u21a9</p> </li> </ol>"},{"location":"other-lore/characters/conservator/","title":"The Celestine Conservator","text":"<p>Nothing on this page is a promised feature or guaranteed to be in the game.</p> <p>If you are seeing this warning bubble, here is a reminder that this project is in early development.</p> <p>Content you see here is in a constant state of change. NOTHING here a promise or guarantee of a feature in the game. Things change.</p>"},{"location":"other-lore/characters/conservator/#overview","title":"Overview","text":"<p>\u00a0\u00a0The Celestine Conservator is the titular character of the game, and a divine figure in the universe. It is a rather short (~1.2m) white marble statue. Pictures are included below.</p> <p>\u00a0\u00a0Its head shape has yet to be really decided, there's two designs, one with a flat panel, the other with a ring.</p> <p>Disclaimer: The sound effect in this video is not present in the game.</p> <p>This is actually an ambient sound from No Man's Sky. I just have it in this video to help set the mood.</p>  Your browser does not support the video tag.  <p>ALT: A variation of the character model for The Celestine Conservator. It is a short figure made of white marble. There is no ground it is standing on, instead only an open sky. The sky is bright white on the bottom, and blue on the top. It is standing without animation, in its A-pose. The viewer first zooms into the head, an almost circular ring of white marble that is cut down the middle. A wisp is positioned inside of the hole of the ring, a bright cyan ball of light with swirling lines within it. The camera then moves backwards, and rotates around its torso, showing off an effect present on the armor and head wherein bright blue stars are visible within some of the surface. The right arm of The Conservator is a long, thin sword which has replaced its forearm. The stars change angle as the viewer moves, as if the viewer were looking through a portal. The viewer finally moves down to the legs and waist, showing off the marble material's slight colorations for varying parts of the body.</p> <p>\u00a0\u00a0The original head shape - a flat panel - also looks very appealing. Here is the original design of The Conservator before I made its armor.</p> <p> </p>"},{"location":"other-lore/characters/conservator/#character-story","title":"Character Story","text":"<p>\u00a0\u00a0The Conservator is one of those characters purposely left vague. It is almost a god. While it has the power of creation, it is not absolute; it does not see and know all, it is not omnipotent. This puts it in an interesting place where it may still operate on what feelings it chooses to allow itself to have, and may make decisions without knowledge of the consequences of any given action.</p> <p>\u00a0\u00a0It has its own little world, a vast, blank, white expanse (a bit like the video above) with buildings and creatures made from the same four materials - white marble, gold, silver, glass, and the blue wispy soul energy. It resides in a small temple, swimming around the air, looking at the constellations in its hand, occasionally toying with creation.</p>"},{"location":"other-lore/characters/librarian/","title":"The Librarian","text":"<p>Nothing on this page is a promised feature or guaranteed to be in the game.</p> <p>If you are seeing this warning bubble, here is a reminder that this project is in early development.</p> <p>Content you see here is in a constant state of change. NOTHING here a promise or guarantee of a feature in the game. Things change.</p> <p>\u00a0\u00a0The Librarian is an AI construct that runs within all space stations designed by the ISCA. As its name implies, it is responsible for information gathering and access, and provides a vast array of resources to interstellar travellers and personnel alike.</p>"},{"location":"races/avelian/","title":"Playable Races: Avelian","text":"<p>Nothing on this page is a promised feature or guaranteed to be in the game.</p> <p>If you are seeing this warning bubble, here is a reminder that this project is in early development. Anything you see here is NOT a promise or guarantee. Features on this page WILL BE ADDED, REMOVED, OR CHANGED WITHOUT ANY SORT OF NOTICE. If I find you on twitter.com saying how I \"broke promises\" because you saw something on this page that I removed later, I will point at you and laugh for being a dummy idiot doodoo bref dummy head, a real stinker, perhaps dare I say, a poopyhead even.</p> <p>Information recently trimmed</p> <p>I am focusing on lore for the game, meaning things are in a constant state of flux. Cultural values and other relevant information of the sort have been removed from the page. They will be re-added at a later date. Sorry!</p> <p>This document written in-character, as if you were reading a manifest from the game's lorebook.</p>"},{"location":"races/avelian/#key-overview","title":"Key Overview","text":"Attribute Associated Information Home World Avos (Navilius System (F3V), Planet \u2116 2) Propagation Technique Asexual or Sexual Reproduction Average Height 1.2m Average Mass 30kg Average Lifespan 72.2 Years"},{"location":"races/avelian/#overview","title":"Overview","text":"<p>\u00a0\u00a0Avelians are an order of posh bipedal avians, bearing a resemblance to a wide varity of ancient Earth avian species, like owls, hawks, and sparrows. Sorry this page is a nothing burger right now.</p>"},{"location":"races/avelian/#phenotype","title":"Phenotype","text":""},{"location":"races/gaian/","title":"Playable Races: Gaian","text":"<p>Nothing on this page is a promised feature or guaranteed to be in the game.</p> <p>If you are seeing this warning bubble, here is a reminder that this project is in early development. Anything you see here is NOT a promise or guarantee. Features on this page WILL BE ADDED, REMOVED, OR CHANGED WITHOUT ANY SORT OF NOTICE. If I find you on twitter.com saying how I \"broke promises\" because you saw something on this page that I removed later, I will point at you and laugh for being a dummy idiot doodoo bref dummy head, a real stinker, perhaps dare I say, a poopyhead even.</p> <p>Information recently trimmed</p> <p>I am focusing on lore for the game, meaning things are in a constant state of flux. Cultural values and other relevant information of the sort have been removed from the page. They will be re-added at a later date. Sorry!</p> <p>This document written in-character, as if you were reading a manifest from the game's lorebook.</p>"},{"location":"races/gaian/#key-overview","title":"Key Overview","text":"Attribute Associated Information Home World Gaia (Sol II System (G2V), Planet \u2116 4) Propagation Technique Sexual Reproduction (Male/Female), Live birth Average Height 1.5m Average Mass 62kg Average Lifespan 92.2 Years"},{"location":"races/gaian/#overview","title":"Overview","text":"<p>\u00a0\u00a0Gaians are descendants of the Human species of the planet Earth. They are responsible for the foundation of the Interstellar Sapience Congruity Accord (ISCA) and are much more docile and unified than their ancestors. They are mostly bald, endoskeletal bipeds, which exhibit particularly high intelligence.</p>"},{"location":"races/gaian/#phenotype","title":"Phenotype","text":"<p>\u00a0\u00a0Gaian anatomy is effectively the same as Human anatomy with a few changes.</p> <p>\u00a0\u00a0Gaians still have two primary types of hair, vellus (the thin, almost invisible kind that covers their entire body) and terminal (the large, thicker, visible hair, such as that on their legs, face, or head). Hair colors are typically brown in shade, with varying lightness, ranging from bright colors like pale gray, to dark colors like brown or black. Orange hair, which was a rare trait in some Humans, was not passed down to Gaians.</p> <p>\u00a0\u00a0Gaian eyes follow typical Human eye colors (green, brown, black, hazel, blue) but a mutation has caused rare occurrences of bright gray to occur. The sclera still remains completely white, and their pupils round. Unfortunately, there are no known natural Gaians who have 20:20 eyesight; the distribution among individuals with refractive error still remains roughly the same as it was with Humans, with a majority of individuals being nearsighted. Technology is often used to correct eyesight however, so eyeglasses are not common, considered to be more of a fashion statement rather than a useful tool.</p> <p>\u00a0\u00a0Gaian appendages still follow the standard vertibrate model, with four fingers and a thumb. Gaian feet have evolved to discard their four smaller toes, though the bone structure still remains the same, giving their feet a \"sock in a sandal\" look. Height remains relatively the same as their predecessors, with an average height of 1.5m.</p> <p>\u00a0\u00a0The Gaian respiratory system is still the same, with two lungs which perform respiration through capillaries in the alveoli. The trachea is connected to the upper esophagus, and much like their predecessors, they are occasionally prone to inhaling food and drink as a result of their significantly shifted larynx (voice box).</p> <p>\u00a0\u00a0The Gaian digestive system is also largely the same, however they do not have genetic disorders like diabetes in their genone. Additionally, Gaians still have an intestinal microbiome, but it has changed fairly significantly, with a stronger dependence on microbes for processing. It has changed so much in fact, that gaians have discussed the topic of being classified as symbiotes in the near evolutionary future as a very real possibility.</p>"},{"location":"races/human2/","title":"\ueb4f\ueb4b\ueb40\ueb58\ueb40\ueb41\ueb4b\ueb44 \ueb51\ueb40\ueb42\ueb44\ueb52: \ueb47\ueb54\ueb4c\ueb40\ueb4d","text":"<p>\ueb53\ueb47\ueb48\ueb52 \ueb43\ueb4e\ueb42\ueb54\ueb4c\ueb44\ueb4d\ueb53 \ueb48\ueb52 \ueb48\ueb4d\ueb53\ueb44\ueb4d\ueb43\ueb44\ueb43 \ueb45\ueb4e\ueb51 \ueb53\ueb47\ueb44 \ueb51\ueb44\ueb42\ueb48\ueb4f\ueb48\ueb44\ueb4d\ueb53\ueb52 \ueb44\ueb55\ueb44\ueb51\ueb5f</p> <p>\ueb45\ueb4e\ueb51 \ueb40 \ueb4b\ueb4e\ueb42\ueb40\ueb4b\ueb48\ueb59\ueb44\ueb43 \ueb55\ueb40\ueb51\ueb48\ueb40\ueb53\ueb48\ueb4e\ueb4d, \ueb48\ueb4d\ueb42\ueb4b\ueb54\ueb43\ueb48\ueb4d\ueb46 \ueb55\ueb40\ueb51\ueb48\ueb40\ueb53\ueb48\ueb4e\ueb4d\ueb52 \ueb48\ueb4d \ueb58\ueb4e\ueb54\ueb51 \ueb4d\ueb40\ueb53\ueb48\ueb55\ueb44 \ueb4b\ueb40\ueb4d\ueb46\ueb54\ueb40\ueb46\ueb44, \ueb4d\ueb40\ueb55\ueb48\ueb46\ueb40\ueb53\ueb44 \ueb53\ueb4e \ueb53\ueb47\ueb44 \ueb4d\ueb44\ueb40\ueb51\ueb44\ueb52\ueb53 \ueb40\ueb4b\ueb4b\ueb48\ueb44\ueb43 \ueb52\ueb4f\ueb40\ueb42\ueb44 \ueb52\ueb53\ueb40\ueb53\ueb48\ueb4e\ueb4d \ueb40\ueb4d\ueb43 \ueb51\ueb44\ueb50\ueb54\ueb44\ueb52\ueb53 \ueb40\ueb52\ueb52\ueb48\ueb52\ueb53\ueb40\ueb4d\ueb42\ueb44 \ueb45\ueb51\ueb4e\ueb4c \ueb53\ueb47\ueb44 \ueb4b\ueb48\ueb41\ueb51\ueb40\ueb51\ueb48\ueb40\ueb4d\ueb5f</p>"},{"location":"races/human2/#_2","title":"\ueb4a\ueb44\ueb58 \ueb4e\ueb55\ueb44\ueb51\ueb55\ueb48\ueb44\ueb56","text":"\ueb40\ueb53\ueb53\ueb51\ueb48\ueb41\ueb54\ueb53\ueb44 \ueb40\ueb52\ueb52\ueb4e\ueb42\ueb48\ueb40\ueb53\ueb44\ueb43 \ueb48\ueb4d\ueb45\ueb4e\ueb51\ueb4c\ueb40\ueb53\ueb48\ueb4e\ueb4d \ueb47\ueb4e\ueb4c\ueb44 \ueb56\ueb4e\ueb51\ueb4b\ueb43 Earth (Sol \ueb52\ueb58\ueb52\ueb53\ueb44\ueb4c (G2V), \ueb4f\ueb4b\ueb40\ueb4d\ueb44\ueb53 3) \ueb4f\ueb51\ueb4e\ueb4f\ueb40\ueb46\ueb40\ueb53\ueb48\ueb4e\ueb4d \ueb53\ueb44\ueb42\ueb47\ueb4d\ueb48\ueb50\ueb54\ueb44 \ueb52\ueb44\ueb57\ueb54\ueb40\ueb4b \ueb51\ueb44\ueb4f\ueb51\ueb4e\ueb43\ueb54\ueb42\ueb53\ueb48\ueb4e\ueb4d (\ueb4c\ueb40\ueb4b\ueb44/\ueb45\ueb44\ueb4c\ueb40\ueb4b\ueb44), \ueb4b\ueb48\ueb55\ueb44 \ueb41\ueb48\ueb51\ueb53\ueb47 \ueb40\ueb55\ueb44\ueb51\ueb40\ueb46\ueb44 \ueb47\ueb44\ueb48\ueb46\ueb47\ueb53 1.7m \ueb40\ueb55\ueb44\ueb51\ueb40\ueb46\ueb44 \ueb4c\ueb40\ueb52\ueb52 62kg \ueb40\ueb55\ueb44\ueb51\ueb40\ueb46\ueb44 \ueb4b\ueb48\ueb45\ueb44\ueb52\ueb4f\ueb40\ueb4d 78.5 years"},{"location":"races/human2/#_3","title":"\ueb47\ueb48\ueb52\ueb53\ueb4e\ueb51\ueb58","text":"<p>\ueb47\ueb4e\ueb4d\ueb44\ueb52\ueb53\ueb4b\ueb58 \ueb53\ueb47\ueb48\ueb52 \ueb52\ueb47\ueb48\ueb53\ueb4f\ueb4e\ueb52\ueb53 \ueb48\ueb52 \ueb44\ueb4b\ueb40\ueb41\ueb4e\ueb51\ueb40\ueb53\ueb44 \ueb44\ueb4d\ueb4e\ueb54\ueb46\ueb47 \ueb40\ueb52 \ueb48\ueb53 \ueb48\ueb52\ueb5f \ueb48 \ueb40\ueb4c \ueb4d\ueb4e\ueb53 \ueb56\ueb51\ueb48\ueb53\ueb48\ueb4d\ueb46 \ueb47\ueb48\ueb52\ueb53\ueb4e\ueb51\ueb58\ueb5f \ueb4e\ueb4d\ueb53\ueb4e \ueb53\ueb47\ueb44 \ueb4c\ueb44\ueb4c\ueb44\ueb52, \ueb4f\ueb4b\ueb44\ueb40\ueb52\ueb44\ueb5f</p>"},{"location":"races/human2/#_4","title":"\ueb42\ueb54\ueb4b\ueb53\ueb54\ueb51\ueb44","text":"<p>\ueb48\ueb4d \ueb53\ueb47\ueb48\ueb52 \ueb4f\ueb4e\ueb52\ueb53 \ueb48 \ueb56\ueb48\ueb4b\ueb4b \ueb41\ueb44 \ueb53\ueb40\ueb4b\ueb4a\ueb48\ueb4d\ueb46 \ueb40\ueb41\ueb4e\ueb54\ueb53 \ueb53\ueb47\ueb44 \"Human\" \ueb51\ueb40\ueb42\ueb44\ueb5f \ueb53\ueb47\ueb44\ueb58 \ueb4e\ueb51\ueb48\ueb46\ueb48\ueb4d\ueb40\ueb53\ueb44 \ueb45\ueb51\ueb4e\ueb4c \ueb40 \ueb52\ueb4c\ueb40\ueb4b\ueb4b \ueb4f\ueb4b\ueb40\ueb4d\ueb44\ueb53 \ueb42\ueb40\ueb4b\ueb4b\ueb44\ueb43 \"Earth\"\ueb5f </p> <ul> <li>\ueb53\ueb47\ueb44\ueb58 \ueb40\ueb51\ueb44 \ueb47\ueb48\ueb46\ueb47\ueb4b\ueb58 \ueb48\ueb4d\ueb52\ueb54\ueb45\ueb45\ueb44\ueb51\ueb40\ueb41\ueb4b\ueb44</li> <li>\ueb43\ueb44\ueb52\ueb4f\ueb48\ueb53\ueb44 \ueb47\ueb4e\ueb56 \ueb4b\ueb4e\ueb4d\ueb46 \ueb53\ueb47\ueb44\ueb58 \ueb47\ueb40\ueb55\ueb44 \ueb44\ueb57\ueb48\ueb52\ueb53\ueb44\ueb43, \ueb53\ueb47\ueb44\ueb58 \ueb52\ueb44\ueb44\ueb4c \ueb54\ueb4d\ueb40\ueb41\ueb4b\ueb44 \ueb53\ueb4e \ueb52\ueb53\ueb4e\ueb4f \ueb45\ueb48\ueb46\ueb47\ueb53\ueb48\ueb4d\ueb46 \ueb4e\ueb55\ueb44\ueb51 \ueb44\ueb40\ueb42\ueb47 \ueb4e\ueb53\ueb47\ueb44\ueb51 \ueb44\ueb55\ueb44\ueb4d \ueb56\ueb47\ueb44\ueb4d \ueb53\ueb47\ueb44 \ueb53\ueb47\ueb51\ueb44\ueb40\ueb53 \ueb53\ueb47\ueb44\ueb58 \ueb40\ueb51\ueb46\ueb54\ueb44 \ueb4e\ueb55\ueb44\ueb51 \ueb48\ueb52 \ueb44\ueb57\ueb48\ueb52\ueb53\ueb44\ueb4d\ueb53\ueb48\ueb40\ueb4b\ueb5f</li> <li>\ueb53\ueb47\ueb44\ueb58 \ueb55\ueb40\ueb4b\ueb54\ueb44 \ueb4c\ueb40\ueb53\ueb44\ueb51\ueb48\ueb40\ueb4b\ueb52 \ueb52\ueb4e \ueb44\ueb57\ueb53\ueb44\ueb4d\ueb52\ueb48\ueb55\ueb44\ueb4b\ueb58 \ueb53\ueb47\ueb40\ueb53 \ueb53\ueb47\ueb44\ueb58 \ueb47\ueb40\ueb55\ueb44 \ueb4f\ueb47\ueb51\ueb40\ueb52\ueb44\ueb52 \ueb52\ueb54\ueb42\ueb47 \ueb40\ueb52 \"I have to go to work.\"\ud83d\udc7d\ufe0f\ud83e\udd23\ud83e\udd23</li> <li>\ueb52\ueb4e\ueb42\ueb48\ueb40\ueb4b\ueb4b\ueb58 \ueb51\ueb44\ueb49\ueb44\ueb42\ueb53\ueb44\ueb43 \ueb4e\ueb51 \ueb43\ueb44\ueb51\ueb40\ueb4d\ueb46\ueb44\ueb43 \ueb48\ueb4d\ueb43\ueb48\ueb55\ueb48\ueb43\ueb54\ueb40\ueb4b\ueb52 \ueb51\ueb44\ueb46\ueb54\ueb4b\ueb40\ueb51\ueb4b\ueb58 \ueb55\ueb48\ueb52\ueb48\ueb53 \ueb40 \ueb52\ueb48\ueb53\ueb44 \ueb4e\ueb45\ueb53\ueb44\ueb4d \ueb51\ueb44\ueb45\ueb44\ueb51\ueb51\ueb44\ueb43 \ueb53\ueb4e \ueb40\ueb52 \ueb53\ueb56\ueb48\ueb53\ueb53\ueb44\ueb51\ueb5f</li> </ul> <p>\ueb53\ueb47\ueb44 \ueb42\ueb54\ueb4b\ueb53\ueb54\ueb51\ueb44\ueb52 \ueb45\ueb4e\ueb54\ueb4d\ueb43 \ueb4e\ueb4d \ueb53\ueb47\ueb44\ueb48\ueb51 \ueb56\ueb4e\ueb51\ueb4b\ueb43 \ueb40\ueb51\ueb44 \ueb51\ueb48\ueb42\ueb47, \ueb41\ueb54\ueb53 \ueb40 \ueb4b\ueb40\ueb51\ueb46\ueb44 \ueb4f\ueb40\ueb51\ueb53 \ueb4e\ueb45 \ueb53\ueb47\ueb44 \ueb4f\ueb4e\ueb4f\ueb54\ueb4b\ueb40\ueb53\ueb48\ueb4e\ueb4d \ueb50\ueb54\ueb4e\ueb53\ueb44\ueb52 \ueb52\ueb53\ueb51\ueb40\ueb4d\ueb46\ueb44 \ueb51\ueb44\ueb45\ueb44\ueb51\ueb44\ueb4d\ueb42\ueb44\ueb52 \ueb52\ueb54\ueb42\ueb47 \ueb40\ueb52 \"The Bite of '87\", \ueb56\ueb47\ueb48\ueb42\ueb47 \ueb51\ueb44\ueb45\ueb44\ueb51\ueb52 \ueb53\ueb4e \ueb40 \ueb4f\ueb4e\ueb4f\ueb54\ueb4b\ueb40\ueb51 \ueb41\ueb51\ueb4e\ueb40\ueb43\ueb42\ueb40\ueb52\ueb53 \ueb44\ueb4d\ueb53\ueb48\ueb53\ueb58 \ueb42\ueb40\ueb4b\ueb4b\ueb44\ueb43 \"\ueb4c\ueb40\ueb51\ueb4a\ueb44\ueb51 \ueb4f\ueb4b\ueb48\ueb44\ueb51\" \ueb48\ueb4d \ueb51\ueb44\ueb40\ueb42\ueb53\ueb48\ueb4e\ueb4d \ueb53\ueb4e \ueb53\ueb47\ueb44 \ueb45\ueb51\ueb44\ueb43\ueb43\ueb58 \ueb45\ueb40\ueb59\ueb41\ueb44\ueb40\ueb51\ueb5f</p> <p> </p> <p>\ueb53\ueb47\ueb44\ueb58 \ueb4c\ueb4e\ueb52\ueb53 \ueb42\ueb4e\ueb4c\ueb4c\ueb4e\ueb4d\ueb4b\ueb58 \ueb55\ueb40\ueb4b\ueb54\ueb44 \ueb40\ueb4d \ueb40\ueb4d\ueb48\ueb4c\ueb40\ueb4b \ueb51\ueb44\ueb45\ueb44\ueb51\ueb51\ueb44\ueb43 \ueb53\ueb4e \ueb4e\ueb45\ueb53\ueb44\ueb4d \ueb40\ueb52 \"kiggy :3\" \ueb56\ueb47\ueb48\ueb42\ueb47 \ueb56\ueb44 \ueb41\ueb44\ueb4b\ueb48\ueb44\ueb55\ueb44 \ueb53\ueb4e \ueb41\ueb44 \ueb4e\ueb4d\ueb44 \ueb4e\ueb45 \ueb53\ueb47\ueb44\ueb48\ueb51 \"All Powerful Beings\"\ueb5f \ueb53\ueb47\ueb48\ueb52 \ueb4e\ueb4d\ueb44 \ueb47\ueb40\ueb52 \ueb41\ueb44\ueb44\ueb4d \ueb46\ueb48\ueb55\ueb44\ueb4d \ueb40 \ueb46\ueb48\ueb45\ueb53 \ueb52\ueb47\ueb4e\ueb56\ueb4d \ueb40\ueb52 \ueb40 \ueb42\ueb4e\ueb4d\ueb44 \ueb52\ueb47\ueb40\ueb4f\ueb44\ueb43 \ueb47\ueb44\ueb40\ueb43 \ueb4c\ueb4e\ueb54\ueb4d\ueb53\ueb44\ueb43 \ueb40\ueb4f\ueb4f\ueb40\ueb51\ueb40\ueb53\ueb54\ueb52 \ueb54\ueb52\ueb44\ueb43 \ueb53\ueb4e \ueb4a\ueb44\ueb44\ueb4f \ueb52\ueb54\ueb52\ueb53\ueb44\ueb4d\ueb40\ueb4d\ueb42\ueb44 \ueb42\ueb4b\ueb4e\ueb52\ueb44 \ueb53\ueb4e \ueb53\ueb47\ueb44\ueb48\ueb51 \ueb42\ueb4e\ueb4d\ueb52\ueb54\ueb4c\ueb4f\ueb53\ueb48\ueb4e\ueb4d \ueb4e\ueb51\ueb48\ueb45\ueb48\ueb42\ueb44 \ueb53\ueb4e \ueb4c\ueb48\ueb4d\ueb48\ueb4c\ueb48\ueb59\ueb44 \ueb40\ueb42\ueb53\ueb48\ueb4e\ueb4d\ueb5f \ueb53\ueb47\ueb48\ueb52 \ueb44\ueb4d\ueb53\ueb48\ueb53\ueb58 \ueb48\ueb52 \ueb42\ueb40\ueb4b\ueb4b\ueb44\ueb43 \"Jambo\":</p> <p> </p> <p>\ueb40\ueb4d\ueb4e\ueb53\ueb47\ueb44\ueb51 \ueb40\ueb4b\ueb4b \ueb4f\ueb4e\ueb56\ueb44\ueb51\ueb45\ueb54\ueb4b \ueb41\ueb44\ueb48\ueb4d\ueb46 \ueb53\ueb47\ueb44\ueb58 \ueb51\ueb44\ueb46\ueb54\ueb4b\ueb40\ueb51\ueb4b\ueb58 \ueb42\ueb4e\ueb4c\ueb4c\ueb54\ueb4d\ueb44 \ueb56\ueb48\ueb53\ueb47 \ueb48\ueb52 \"Jesus Christ\", \ueb40\ueb4b\ueb52\ueb4e \ueb42\ueb40\ueb4b\ueb4b\ueb44\ueb43 \"The Son of God\", \ueb40 \ueb4f\ueb51\ueb4e\ueb4c\ueb48\ueb4d\ueb44\ueb4d\ueb53 \ueb51\ueb44\ueb4b\ueb48\ueb46\ueb48\ueb4e\ueb54\ueb52 \ueb45\ueb48\ueb46\ueb54\ueb51\ueb44\ueb5f</p> <p> </p>"},{"location":"races/kirivian/","title":"Playable Races: Kirivian","text":"<p>Nothing on this page is a promised feature or guaranteed to be in the game.</p> <p>If you are seeing this warning bubble, here is a reminder that this project is in early development. Anything you see here is NOT a promise or guarantee. Features on this page WILL BE ADDED, REMOVED, OR CHANGED WITHOUT ANY SORT OF NOTICE. If I find you on twitter.com saying how I \"broke promises\" because you saw something on this page that I removed later, I will point at you and laugh for being a dummy idiot doodoo bref dummy head, a real stinker, perhaps dare I say, a poopyhead even.</p> <p>Information recently trimmed</p> <p>I am focusing on lore for the game, meaning things are in a constant state of flux. Cultural values and other relevant information of the sort have been removed from the page. They will be re-added at a later date. Sorry!</p> <p>This document written in-character, as if you were reading a manifest from the game's lorebook.</p>"},{"location":"races/kirivian/#key-overview","title":"Key Overview","text":"Attribute Associated Information Home World Numala (Colaras System (G0Ia+), Planet \u2116 4) Propagation Technique Sexual Reproduction (Male/Female), Live birth Average Height 1.5m Average Mass 59kg Average Lifespan 54.8 Years"},{"location":"races/kirivian/#overview","title":"Overview","text":"<p>\u00a0\u00a0Kirivians are furred bipeds who primarily live nomadic lives in the stars. They are often compared to cats due to a number of similarities in facial structure to Gaian feline species. They are highly social and extremely welcoming to their peers, strangers and family alike. It is a level of unity unseen in other races, and stands out as an oddity compared to other races in the ISCA.</p>"},{"location":"races/kirivian/#phenotype","title":"Phenotype","text":"<p>\u00a0\u00a0Kirivians tend to have fur lengths ranging from 2cm to 5cm depending on genetics. They often have two coats of fur of different colors. The coats tend to be Silver, Gunmetal, Orange, Dusty Red, Brown, Gold, or White.</p> <p>\u00a0\u00a0They have two eyes with round pupils. They do not have an iris, and instead the sclera of their eye is colored. Typical colors are Green, Yellow, Blue, and Orange.</p> <p>\u00a0\u00a0Their appendages are bipedal in nature, but unlike Gaians they only have three fingers and a thumb instead of four. Their fingers are also composed of only two joints rather than three. Unlike the cats they are often compared to, they do not have claws. Their legs are digitigrade-like, with a distinct three-segment build. Curiously, they are hooved, and do not have paws on their feet like one might expect. The hooves are not split, and are shaped somewhat like hockey pucks.</p> <p>\u00a0\u00a0The Kirivian digestive system is effectively identical to that of most mammals on Gaia, functionally. They do not have organs like the pancreas and gall bladder, as these enzymes are generated naturally within their stomachs.</p> <p>\u00a0\u00a0The Kirivian respiratory system is also identical to most mammals on Earth, with two lungs. Unlike mammals, their trachea does not share space with their esophagus, and instead their mouth only goes to their stomach, their noses only go into their lungs.</p>"},{"location":"races/novan/","title":"Playable Races: Novan","text":"<p>Nothing on this page is a promised feature or guaranteed to be in the game.</p> <p>If you are seeing this warning bubble, here is a reminder that this project is in early development. Anything you see here is NOT a promise or guarantee. Features on this page WILL BE ADDED, REMOVED, OR CHANGED WITHOUT ANY SORT OF NOTICE. If I find you on twitter.com saying how I \"broke promises\" because you saw something on this page that I removed later, I will point at you and laugh for being a dummy idiot doodoo bref dummy head, a real stinker, perhaps dare I say, a poopyhead even.</p> <p>Information recently trimmed</p> <p>I am focusing on lore for the game, meaning things are in a constant state of flux. Cultural values and other relevant information of the sort have been removed from the page. They will be re-added at a later date. Sorry!</p> <p>This document written in-character, as if you were reading a manifest from the game's lorebook.</p>"},{"location":"races/novan/#key-overview","title":"Key Overview","text":"Attribute Associated Information Home World Arcnova (NEC-Core System (Pulsar), Planet \u2116 1) Propagation Technique Natural Mutagen-Enhanced Cloning Process Average Height 3.2m Average Mass 104kg Average Lifespan 224.6 Years"},{"location":"races/novan/#overview","title":"Overview","text":"<p>\u00a0\u00a0Novan are exoskeletal, tall, slender bipeds. Unlike most races, they are incapable of speech and auditory speech processing, as they do so through visual stimulus. They are perhaps the furthest from typically expected bipedal life and, for lack of a better word, the most \"alien\".</p>"},{"location":"races/novan/#phenotype","title":"Phenotype","text":"<p>\u00a0\u00a0Novan are often colored all black, with slight shades of either red, violet, or blue. They often have lines or regions of bright cyan or magenta glowing parts, typically in joints or parts of the chitin which must buckle or bend. Their panels are typically solid, not unlike an insect's exoskeleton. Their chitin panels are typically 3 to 5 centimeters thick, and in total make up around 20% of their body mass. For this reason, they are extremely strong.</p> <p>\u00a0\u00a0Novan have five eye-like lobes shaped in a pentagonal formation, with one eye centered on their forehead. These are not all eyes, however, and each pair serves a different purpose.</p> <ul> <li>The odd forehead eye is used for empathic communication with nearby peers and other races. </li> <li>The middle pair is used for communication, and are asymmetrical. Through triboluminescense, UV and X-Ray radiation can be fired off in short bursts towards their peers via the left of the pair. The right side has an organ sensitive to these flashes. This is how they communicate, through a series of specifically timed flashes.</li> <li>The lower pair can see within the infrared spectrum, and is used for navigation of hazards on their world. This vision is not particularly clear, and so Novan vision is poor.</li> </ul> <p>\u00a0\u00a0Novan have four long, pointed ears. These are used for locating prey and threats, and are independently controllable. This allows them to form full 3D maps of their surroundings, including with vertical discretion. They are extremely sensitive. Novan report that they can often hear people using cloaking technology.</p> <ul> <li>To reiterate, they are not capable of auditory processing. Their brains are incapable of breaking sounds apart to identify them as speech.</li> </ul> <p>\u00a0\u00a0The Novan digestive system classifies them as hemophages - blood eaters. Under both of their forearms are two large tubules which contain silicate spears approximately 30cm long and 2cm in diameter. These needles are connected through a long, stretchy artery directly to their lymphatic system. To eat, they launch these spears at prey and \"drink\" their blood, passing it through the lymphatic system to clean out contaminants like viruses and bacteria, and then directly integrate the blood into their own systems. Most importantly:</p> <ul> <li>They do not have a waste system. As a consequence, they lack all faculties required for digestion of food items. They do not have a stomach nor do they have intestines. They do not have mouths.</li> <li>If one of their feeding spears breaks, it can easily be regrown. The same is true for the filament connecting it back to their body.</li> <li>Spears are typically launched at a velocity of 50m/s.</li> </ul> <p>\u00a0\u00a0The Novan respiratory system works a bit like above-water gills. It is exposed through six slits located on their backs. These gills absorb carbon dioxide and split the carbon atom off, which is used to construct parts of their chitin and in biological chemical reactions. The gills secrete and dispose of oxygen and cellular waste molecules.</p>"}]}