{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"The Conservatory Development Blog","text":"<p>\u00a0\u00a0Hello! Welcome to The Conservatory Development Blog! Here, I post chronological updates on my progress through the game's development. I also host peeks into the lore of the game's universe. Go explore!</p> <p>\u00a0\u00a0This site is powered by <code>mkdocs-material</code> and is what I will (or do, depending on when you are reading this) use for official documentation.</p>"},{"location":"#what-is-the-conservatory","title":"What is The Conservatory?","text":"<p>\u00a0\u00a0You can learn about the game and my main reason for wanting to create it on the sidebar, here: What is The Conservatory?</p>"},{"location":"#how-can-i-stay-up-to-date","title":"How can I stay up to date?","text":"<p>\u00a0\u00a0I encourage you to join the Discord server! Here, I post updates (including new blog posts), and occasionally will livestream the development of my game. You can also ask questions about it here.</p>"},{"location":"#where-do-i-read","title":"Where do I read?","text":"<p>\u00a0\u00a0The latest blog post was uploaded on 15 March 2025: 15 March 2025 - World touchups, Inventories, and Entities. You can find it and other entries on the left side of the page, under the Blog category.</p>"},{"location":"#how-do-i-make-mods-wheres-the-code-documentation","title":"How do I make mods? Where's the code documentation?","text":"<p>\u00a0\u00a0If you are looking for the modding tutorials, visit The Modder's Guide (this link has been temporarily 404'd because it's too early in development).</p>"},{"location":"about/","title":"What is The Conservatory?","text":"<p>Nothing on this page is a promised feature or guaranteed to be in the game.</p> <p>If you are seeing this warning bubble, here is a reminder that this project is in early development. Anything you see here is NOT a promise or guarantee. Features on this page WILL BE ADDED, REMOVED, OR CHANGED WITHOUT ANY SORT OF NOTICE. If I find you on twitter.com saying how I \"broke promises\" because you saw something on this page that I removed later, I will point at you and laugh for being a dummy idiot doodoo bref dummy head, a real stinker, perhaps dare I say, a poopyhead even.</p> <p> The Conservatory is a narrative-backed, voxel-based universal sandbox game.</p>"},{"location":"about/#the-developer-and-the-inspiration","title":"The Developer and The Inspiration","text":"<p>This section is largely optional.</p> <p>This is a huge autobiography and a bunch of shoutouts to media I like that helped influence the design choices I've made (or plan to make) to the game. It's a good read if you really want the extra detail, but if you just want to figure out what the game is (as in, what it's like to play, what it'll have in it), skip this section!</p> <p>\u00a0\u00a0This section mostly classifies as a sort of \"moodboard\". I'm not good with words. I'm crazy autistic and couldn't explain this if my life depended on it. So instead, I'm going to show you pieces of media that evoke the feelings. Feel the frame of reference for yourself:</p>"},{"location":"about/#sources-of-inspiration","title":"Sources of Inspiration","text":"<p>\u00a0\u00a0If you are in this list, consider yourself honored, at least by me! These are various pieces of media or games that I strongly recommend having a look at, seriously!</p>"},{"location":"about/#vrchat-worlds","title":"VRChat Worlds","text":"<p>By far the largest of these sections.</p> <p> For some context for those who have never played VRChat: <ul> <li>VRChat is free on Steam (press here to open it directly in the Steam app). <ul> <li>You do not need VR to play it, you can play with typical FPS controls on desktop.</li> </ul> </li> <li>It is largely dominated by furries and the sort. For average Joe, the takeaway here is that you can imagine most players as a member of some selected species, a bit like aliens in a sci-fi universe.<ul> <li>Everybody is their own thing, but typically based on something real or made up and shared by many others, and so there is uniformity in groups of people. These common species are often called \"avatar bases\", as they serve as a common \"base\" for people to customize their avatars. So if you see me using that term, \"avatar base\", think species or race.</li> <li>This is useful because a significant amount of the worlds linked below play on this fact.</li> <li>You do not need to find a special avatar to visit these worlds. You can visit in anything, default avatar included. Just jump in!</li> <li>It is worth it to note that in VR social games like this, the body people use is significantly closer to the sense of self for the user, so while in a typical PC game such strong emphasis on your character may not be important, in VR it is especially important for some people. </li> </ul> </li> </ul> <p>\u00a0\u00a0Anyway, the worlds:</p> <ul> <li>Qoo H. Bocuma International Airport, The Pact, and Hokyl Night by hdorriker, DekaWolf, and Fraxul (collectively). These three worlds take place in one universe. This captures a certain lighthearted attitude about sci-fi worlds that I wish wasn't so rare. I'm not going to lie to you, I'm pretty tired of the crisp, perfected future species, but I'm also tired of the grunge criminal-run megacities. I want something funny in my bowl of future. Why's it always super clean or super filthy?<ul> <li>Qoo H. Bocuma International Airport covers both international and interstellar travel. It contains hilarious gags for specific families of avatar bases, and a bunch of jokes for the tight knit and the public alike. You can also ride the (sentient) baggage system. Eurobeat included for the carts.</li> <li>Hokyl Night is the city that the airport is in. And when I say \"the city\", I mean \"the city\". The whole thing. Like you get floating point rounding error artifacts near its borders (thanks Unity). It's the whole city.</li> <li>The Pact is an embassy for the races that make up the universe, and it's a treasure trove of the little jokes and hilariously creative humor that scratches the sci-fi itch. Bureaucracy is so boring. That's why they host office kickball tournaments with varyingly possibly-ill-ideologically promotional posters, of course!</li> <li>It's worth it to mention that while humor is a huge part of these worlds, they are still serious! It's a bit like Hitchhiker's Guide with its humor, in that the world is coherent and has legitimate things, but they aren't afraid to put a promotional poster that says \"Do you hate pooping?\" right next to a travel ad (I am not joking).</li> </ul> </li> <li>Wild Flower \uff5c \u91ce\u306e\u82b1 , Nest \u30cd\u30b9\u30c8, and I N I T I U M\u00a0 \u2044\u2044\u2044 \u30a4\u30cb\u30b7\u30e3\u30eb by Artsy Glitch. These worlds also share a universe (*as far as I can tell). They have a particular artstyle that definitely influenced my style for Kirivian architecture. It's this weirdly relaxing mixture of refurbished post-apocalyptic bunker x solarpunk. Honestly the feelings that this set of worlds evokes are too difficult to describe with words, in particular I urge you to visit these yourself.<ul> <li>Wild Flower \uff5c \u91ce\u306e\u82b1 is a somewhat large bunker with varying living accomodations ranging from antique furniture to neo-material furniture that just screams \"space age\" to me. It has a TV, botanical observatory, indoor firepit, and a bedroom. I'm not trying to sell you a house, pinky promise.</li> <li>Nest \u30cd\u30b9\u30c8 is another decked out bunker, but this time it's single room, intended to be made your VR home world in all likelihood. Very cozy, same aesthetic as the previous world, but far more personable.</li> <li>I N I T I U M\u00a0 \u2044\u2044\u2044 \u30a4\u30cb\u30b7\u30e3\u30eb is an interesting world whose lore is not entirely clear. It seems to be taking care of(?) some strange tree which is closely related to evangelical occurrences? They do seem to have frames for futuristic angels laying around, which is pretty sick.</li> </ul> </li> <li>Antiheat's Apartment by Antiheat (who woulda thunk) is, despite the name, an entire city rather than just the apartment within that city. Antiheat's universe here intermingles with that created by hdorriker et. al., and captures a slightly-more-serious tone. It's one of your more typical sci-fi worlds, but it has a feel to it that I really like knowing it's an extension of a universe I already really love.</li> <li>Furality Sylva: Treehouse Village by Furality Team is a virtual convention world. This one was a huge, huge source of inspiration for the style of the Kirivian people rather than their architecture. This perfectly captures that nomadic vibe. I am very thankful that the team uploads archives of previous years' conventions for public access.</li> </ul>"},{"location":"about/#film","title":"Film","text":"<p>\u00a0\u00a0I'm not much of a TV/Movie guy so this will be considerably smaller, but of those that I have watched, some of them have managed to weasel their way into my writing.</p> <ul> <li>Star Trek (esp. The Next Generation and Deep Space Nine) is basically the only TV series that I have actively tried to watch the entirety of. I'm picky with my shows! Mr. Roddenberry's vision for the series and his usage of real scientists to make the show at least somewhat believable made a night and day difference between this and the series that were inspired by it.<ul> <li>Star Trek made me realize the importance of coherent rules in the universe. He answered the question of \"why can't you just...\" for a pretty significant amount of cases where certain technology exists, and even if the coverage wasn't perfect, it still made a difference and it shows.</li> </ul> </li> </ul>"},{"location":"about/#other-games","title":"Other Games","text":"<p>\u00a0\u00a0Four games were the \"core\" inspiration for this, so they are in their own section below. Honorable mentions are here.</p> <ul> <li>Rain World is a very important title. Despite my love (and qualms) toward the game, it is undeniable that it set a pretty significant precedent for what it means to be an immersive game. It shows just how much the little details matter. That's why it's popular! A bunch of the little details that make the ecosystem feel real in the constraints of what it is, have set it head and shoulders above other games in its league, and it is very highly regarded for this fact.</li> <li>Robocraft has fun building with blocks and guns. If you have played Crossout, it's kind of the original predecessor to it. Another good analogue is TerraTech. Unfortunately I don't know how much longer this link will work; as of today (8 January 2025) FreeJam has announced it is shutting down entirely, which means Robocraft is going with it.</li> </ul>"},{"location":"about/#whats-the-game-like","title":"What's the game like?","text":"<p>Remember...</p> <p>Things here will change. Please refer to the top of the page for more information.</p> <p>\u00a0\u00a0Probably what you are here for. What's the gameplay like? How does it work?</p> <p> The Conservatory is a sci-fi/fantasy themed, voxel-based sandbox game, with a very small, simple, narratively-driven progression. It mixes magic and tech, something I have always loved together. It should have multiplayer if all goes well.</p> <p>\u00a0\u00a0The game's world is procedurally generated, and exists in a multiverse. However, the game's storyline reserves only 2 of the 18 quintillion universes available to you (a total of \\(2^{64}\\) available, to be exact). Accessing the others is possible.</p> <p>\u00a0\u00a0The player will be able to build freely a bit like Minecraft and can also build on their ship; each player has a ship tied to their save file. There will be voxel materials (blocks), which can be carved to cut out (or add) any of the 8 corners. Some voxels are rigid, forming smaller cubes (like stair blocks in Minecraft), and some voxels are smooth, forming slopes. There will also be props, which are complex, mesh-based objects that can be placed in the world for decoration, function, or both. All blocks store fluids (think Minecraft's waterlogging but for any fluid).</p> <p>\u00a0\u00a0Players will need to make progressively more and more complicated machinery and tools to progress through the game, adapting their home base to fit their needs as they learn and progress.</p>"},{"location":"about/#the-inspiration","title":"The Inspiration","text":"<p>\u00a0\u00a0For some perspective, here's some popular/well-known titles that directly inspired my design, and why they are sources of inspiration.</p> <ul> <li>Minecraft<ul> <li>This is kind of here out of moral obligation. Every voxel game is a Minecraft clone, no exceptions. Running gag.</li> </ul> </li> <li>Starbound<ul> <li>Starbound is incredible for the writers and roleplayers with its absolutely lovely art and music, and vast universe.</li> <li>But... I wouldn't even wish the agony of trying to mod this game upon my worst enemy. It's rough.</li> </ul> </li> <li>Empyrion: Galactic Survival<ul> <li>Empyrion is a lot of fun and scratches the Robocraft itch. You have to build your own space ship out of blocks and such.</li> <li>But... The game is kind of bland. It's missing a lot, it's buggy, and gets old quick. The developer, at least as of writing, is actively against the idea of code modding. So even modders like me can't add new stuff.</li> <li>And... It's missing that lovely feel that Starbound has which helps it to feel well rounded and cozy. It feels \"cheap\", for lack of a better term. So much work has gone into it but it's just not quite there yet.</li> </ul> </li> <li>No Man's Sky<ul> <li>NMS is a technical marvel and basically the best of the best of all time when it comes to procedural generation.</li> <li>But... It is very difficult to facilitate writing and roleplay in because it's not well suited for it. It's a game to play, not to be a part of, so the entire universe feels more like a display case than something to integrate with.</li> <li>And... It's missing that freedom of building that you can get in voxel games. It instead uses prefab-based building, and while decoration options are in the hundreds, it still always looks the same as you go between bases.</li> </ul> </li> </ul>"},{"location":"about/#the-design-goals","title":"The Design Goals","text":"<ul> <li>I want good storytelling and art, to feel involved. I want to be a part of the world, and to be able to control the world for the sake of presentation and immersion. I want to facilitate the ability to write your own story for your character and be someone.</li> <li>I want the ability to freely interact with the world, typically best expressed through voxels. Everything should be buildable, even your ship, and it should be buildable in as many places as possible. </li> <li>I want people to be able to painlessly mod my game. I want mods to be natively supported and easy for anyone to make.</li> </ul>"},{"location":"about/#the-story","title":"The Story","text":"<p>\u00a0\u00a0Well, this is awkward. So originally the story was in this section, but I have since moved it to its own page because there's a lot there: The Story.</p>"},{"location":"about/#the-people-involved","title":"The People Involved","text":"<p>\u00a0\u00a0Same thing here. It was here, but now it's not. See: Credits.</p>"},{"location":"credits/","title":"Credits","text":"<p>"},{"location":"credits/#the-conservatory-credits","title":"The Conservatory Credits","text":""},{"location":"credits/#main-crew","title":"Main Crew","text":""},{"location":"credits/#godot-authors","title":"Godot Authors","text":"<p> The Conservatory was made using Godot, the free and open source game engine.</p> <p>Visit them here.</p>"},{"location":"credits/#xan","title":"Xan","text":"<p>The guy who did the thing.</p> <p>Programming*except for the Godot engine. 2D Art (Pixel, Graphics) 3D Art (Voxels, Characters, Objects) Lore (All species except Avelian) Music (Fanfare, Some Background)</p>"},{"location":"credits/#rwgryphon","title":"RWGryphon","text":"<p>Resident birb author and best friend. Don't be fooled by the small list! He has made contributions that are core to the very game's existence. Seriously.</p> <p>2D Art (Concept Art) Lore (Key Characters, Worldbuilding, the Avelian species) Music (Storyline critical music)</p>"},{"location":"credits/#software","title":"Software","text":"<p>\u00a0\u00a0Lots of software was used in the making of the game! Here's the apps I depend on:</p> <p>Visual Studio 2022 (Community Edition) .NET (C# Programming Language) Visual Studio Code Blender Aseprite ImHex Audacity Paint.NET</p>"},{"location":"credits/#honorable-mentions","title":"Honorable Mentions","text":""},{"location":"credits/#lawnreality","title":"LawnReality","text":"<p>Musical Wizard No direct work on the project, but he gets his name here because his music is public.</p> <p>Royalty Free Music (400+ tracks??!?!) There's So Much Music More Music Like 7 stacks of Music</p>"},{"location":"credits/#still-icarus","title":"Still-Icarus","text":"<p>Wandering Artist</p> <p>Additional Concept Art (all species)</p>"},{"location":"credits/#special-thanks","title":"Special Thanks","text":"<p>Mom and Dad Thanks for letting me stick around while I work on this.</p> <p>Darrell Flood I use some of your fonts in my game. I bought them in your itch.io fire sale.</p> <p>Ben Golus Resident GPU Wizard. You mostly helped people in Unity but every time I had some weird shader issue or wondered how to do something / if something was a good idea, you were there in the replies with genuinely amazing advice.</p> <p>Kiavich One of the little title themes, named \"Iterators\". It's good.</p> <p>Tundr You suggested the original name for the Avelians, back when they were called Balaur. Sorry it didn't stick.</p> <p></p>"},{"location":"faq/","title":"Development FAQ and History","text":"<p>This is NOT a list of promises!</p> <p>Anything you see here is NOT a promise or guarantee. Features mentioned on this page WILL BE ADDED, REMOVED, OR CHANGED WITHOUT ANY SORT OF NOTICE. While I will try to honor most of the things I want to see in this game, I'm just one guy, and the last thing I want to do is tell you that you'll get something that I can't fulfill.</p> <p>\u00a0\u00a0This page covers common questions I get and some of the history of the game's development.</p>"},{"location":"faq/#faq","title":"FAQ","text":"<p>Q: What's it like? A: I took serious inspiration from Starbound, No Man's Sky, and Empyrion: Galactic Survival. If you want a more fulfilling answer, you can read the long page about the game's history.</p> <p>Q: How many planets can I visit? A: At least \\(2^{64}\\)2 to the power of 64<sup>1</sup></p> <p>Q: Will it have multiplayer? A: I really, really want it to. The issue is that I haven't made multiplayer before though, and while I firmly understand the concept of client and server, network authority and the like, I don't know if I can get it to work in The Conservatory. It's a daunting task.</p> <p>Q: Can I build my own ship and fight with it? A: I'd love that, but I don't know. If I do, it'll probably be primitive stuff (like no detatching parts / physical damage, just a health pool and maybe the ability to disable weapons or something).</p> <p>Q: How do save files work? Are universes shared? A: Universes are shared on your PC. The save files for all locations in the game exist universally, and always load no matter which character you have started playing as. If you want separate worlds, go somewhere else in the universe, or go to a different universe.</p> <p>Q: Do you support modding? A: Hell yeah! I'm shipping the game with full documentation, (probably) its PDB file (or some substitute), and even handwritten guides with pictures describing things I think modders will want to do, like adding new voxels, species, and locations. I have made it my goal to make modding as easy as possible.</p> <p>Q: How far along are you / when will it be done? A: These things. They take time. Especially as a solo dev! All snarkyness aside, I don't know. The game is probably able to hit a beta within the coming months. I have my goal set and I'm making my way towards it slowly but surely!</p> <p>Q: Can I be a tester? A: Probably. But only when I host public tests. Private testing will be people picked by me.</p> <p>Q: Is it gonna be on Steam? A: It's one of my goals!</p>"},{"location":"faq/#history","title":"History","text":"<p>\u00a0\u00a0The Conservatory has had a very, very long history with varying levels of significance. Things go back a lot further than you think!</p>"},{"location":"faq/#2018-2020-the-well-named-game3d-and-its-story-start-to-finish","title":"2018 - 2020 \u2e2c The well-named Game3D - and it's story, start to finish!","text":"<p> Game3D was the very distinctive and original internal placeholder name for the first iteration of this project. It was made in Unity at the time.</p> <p>\u00a0\u00a0At this point in history, I was interested in creating a narrative experience. I might still use the lore idea but in general it was a short, simple, choose-your-own-adventure style narrative. In fact, some of the races in The Conservatory are actually reimagined forms of the characters here!</p> <p>\u00a0\u00a0In this game's lore, the player was a dustrat - a simple, self-sufficient like people who were scrappers and farmers. They were closely inspired by gremlins from Spiral Knights. They existed in a toxic, destroyed world, where all of the rich and lucky folks lived in the sky above all the smog and dust. They lived in ruin and were barely scraping by. These people have been revised into the Kirivians and given a much more hopeful story, by the way!</p> <p>\u00a0\u00a0The story of the game is that The Primes, a term encompassing the hyper-advanced people that lived in the sky, left the dustrats to rot. They thought of the dustrats like vermin, primitive cavemen undeserving of mercy. They were kept out of the public eye. The thing is, before The Primes went into the sky, they had bases on the ground. These bases are now derelict and abandoned, with occasionally broken automated security trying to defend it, from time to time.</p> <p>\u00a0\u00a0The dustrats and The Primes had a common enemy, however. I rather embarassingly forgot what it was called, so I will just steal from WildStar and call it \"The Strain\". The Strain is a living, spreading, fungus-like mega-colony that can create simpler creatures composed entirely out of itself. I guess another good analogy is Phazon from the Metroid series.</p> <p>\u00a0\u00a0On the surface, every day is a struggle against the spread of The Strain. It sends toxic barrages and monsters into civilized areas in an attempt to gain territory and assimilate the helpless people. The Primes figured that the only way to win was to leave, and built their giant cities in the skies. The cities are held up by giant towers that are constantly checked and cleaned. Turns out managing The Strain is a lot easier when you control where it spreads, a bit like a tower defense I suppose.</p> <p>\u00a0\u00a0The Novans use the artstyle I gave to The Strain: Dark black tones with purple, cyan, yellow, red, and green highlights. Very alien, very unsettling, yet somehow breathtaking in its own way.</p> <p>\u00a0\u00a0The player's adventure began when they were sent with a group of friends to a derelict Prime facility. Thing is, they found something there that changes everything: A bioweapon. This bioweapon was designed to destroy The Strain, but was quite casually left behind once The Primes left for the skies (why bother working on it and perfecting it if we'll just leave anyway)? So there it was, sitting in a facility unfound for centuries. The issue is that it was still under very high security, and the only way to unlock the containment area was to reactivate the facility, which means turning all of the old robots and AI back on. Thankfully, the player realizes that the constructs and AI there were so incredibly old that they didn't even know the dustrats existed, so to these constructs they were just another sapient race that had taken the place of their creators through the passage of time.</p> <p>\u00a0\u00a0Now that the player has the help of these facility constructs to unlock the bomb, they run into a new set of problems: For one, the facility is on the border of where The Strain has spread. It's quite literally at the doorstep of the facility. The other issue is that the bomb wasn't armed. To arm it, they needed to get the codes, and they had two choices for this: Venture into the corrupted land to a neighboring security facility that probably had the codes (it did, but this was left vague to the player for a sense of uncertainty), or have the constructs phone home and ask their creators in the sky for the codes. Basically, die to fungal zombification, or tell your enemies you are in a facility they own where they could just send the kill instruction to the robots that are now helping you.</p> <ol> <li>Phone home (good? ending). This allows the codes to be acquired, but not first without calling the attention of The Primes. The player is told that this will reasonably have bad repercussions because The Primes do not like the dustrats. This starts a war. The Primes try to say \"don't use the bioweapon, we have a better solution!\" (delete all life from the surface). The player uses the tech from the facility, including weapons and armor, to fight The Primes off and defend their people from this terrible fate. This causes the player's race to eventually decide that they can and should overrun utopia and take it over, improving the lives of their people, at the expense of The Primes.</li> <li>DIY (neutral ending). The player travels into the unknown hellscape of Strain territory to find the security facility. This starts the same war-like scenario, but it's dustrats vs. strain. The people agree that this offensive might be the war to end all wars, so they give it their all and destroy The Strain permanently. The Primes have no shits to be given, so the two exist, one (still) in utopia, and the other (still) a bunch of scavengers and scrappers.</li> </ol> <p>\u00a0\u00a0And of course, the well-anticipated secret third option:</p> <ol> <li>Assimilate (bad ending). This starts like #2, but the player takes a detour from their group during the offensive. This causes the player to come across Life Bullshittery<sup>TM</sup> that ultimately can result in them being turned into a creature of The Strain. In this case, the player acts selfishly and becomes part of a huge collective of power. The player switches sides by destroying the bomb and then ensuring The Strain covers 100% of the surface. This destroys the player's old way of life, including all friends and family who resist. Whether or not they get powerful enough to take down the primes was left open ended, but I think it would be very possible.</li> </ol>"},{"location":"faq/#2020-2021-creatures-of-sonaria","title":"2020 - 2021 \u2e2c Creatures of Sonaria","text":"<p>\u00a0\u00a0During this time I got a job working for Twin Atlas on Creatures of Sonaria, a Roblox game that's a clone of The Isle. It started out with me literally saying \"this game kinda bleh can I work on it?\" and then I just got the most casual job acceptance of my life. </p> <p>\u00a0\u00a0The full story of my brief time working here is long and full of drama. If you want to know what happened, please ask and I will answer (I actually kind of already did on my Bluesky). Inevitably I know some people who know me from CoS will see me here and wonder what happened, so that's why this paragraph is here.</p>"},{"location":"faq/#2022-2023-game2d","title":"2022 - 2023 \u2e2c Game2D!","text":"<p>\u00a0\u00a0That's right, it's Game3D but with one less dimension! ... uh, wait.</p> <p>\u00a0\u00a0Well, joking aside, that's literally what it was. I switched to SDL, thinking to make my own engine as an exercise to my skill. I actually got very far, my first major roadblock was having to get shaders working and I didn't feel like redoing my renderer.</p> <p>\u00a0\u00a0This actually kind of had two phases. The first was in C++. When I realized that I wanted my game to support modding, I changed to C# and wrote an SDL wrapper in .NET. Finally, when I realized that this project might actually be something serious, I thought about the grand scheme of things and some changes were made, leading to where I am now.</p> <p>\u00a0\u00a0A key point to bring up is that I actually got far along with development of the title in 2D here. Believe it or not, the quest and dialogue system that The Conservatory uses is the same one from this project!</p>"},{"location":"faq/#2023-present-starlike3d-aka-the-conservatory-mostly","title":"2023 - Present \u2e2c Starlike3D aka The Conservatory (mostly)","text":"<p>\u00a0\u00a0As I continued to work on Game3D's design plan, I realized that I wanted a role playing game. I had this really compelling place, and I love role playing games. So the first thing in mind, because my maps were voxel based, was a sandbox. This is where I began to take inspiration from other games. To be frank, I love Starbound, No Man's Sky, and Minecraft. I wanted to make something that was like all three of them at once. And with that, I got started on The Conservatory. The original story slowly got phased out until it became irrelevant, hence why I told it to you up above.</p> <p>\u00a0\u00a0The primary change of plan was the most obvious choice: No more custom engine. If I wanted to make a game, I needed to make a game (not an engine). </p> <p>\u00a0\u00a0I thought about going back to Unity, but at the time I was worried about royalties. The thing is, I may be a techno-wizard turbo nerd, but I still have mental disability and having to worry about money stuff is really overwhelming to me. Only a year later, Unity tried the disaster that was install fees. So I guess I really dodged a bullet on that one didn't I? Unity was out of the question.</p> <p>\u00a0\u00a0Unreal was also a contender, but the .NET support hadn't yet released. The thing is, I still knew for a fact that my game had to be written in C#. It's easy to use, powerful, and supports modders. So no Unreal. C++ is not easy to reverse engineer, and so it's not friendly to new programmers looking to get into modding a game they like.</p> <p>\u00a0\u00a0I found another engine but honestly I forgot what it was called. I don't even remember anything about it. I just mention it because I find it really funny that there's this period where I had some weird obscure engine that I have zero recollection of. It was also kind of garbage anyway lmao. Bro forgor\ud83d\udc80</p> <p>\u00a0\u00a0And then finally, I set my eyes on Godot. Honestly, I can't emphasize enough how the stars aligned for this one. It wasn't the first time I tried Godot, in fact I tried it way back for the original Game3D but lost patience too fast (and at the time, it was a hobby project, so it was much easier to use Unity which I already understood. I wasn't concerned with ti being a \"real project\"). </p> <p>\u00a0\u00a0Anyway, the stars aligned because Godot is in a period of time where it's getting some absolute freakin' banger updates. 4.2, 4.3, and soon 4.4 are all outstanding upgrades that add seriously useful and vital features to the engine. I can't use my words to describe how happy it makes me.</p> <p>\u00a0\u00a0Godot feels like one of those cartoon moments where the characters are stuck and need something like a key to open a door, and there's just a very conveniently shaped rock nearby that works as a key. Literally just \"Ooh, look at this, it's perfect.\" And that it is. I have very few gripes with it. Best of all, it supports C# natively (including bleeding edge versions of .NET!!!) and is super easy for modders to use!</p> <ol> <li> <p>\\(2^{64}\\)2 to the power of 64 at a minimum. This is the amount of unique seeds that can exist, but I can salt seeds (combine them with other seeds) to effectively wedge randomness into everything, making the apparent amount of unique combinations larger. Still, that amount of \\(2^{64}\\)2 to the power of 64 is the lower limit as per the mathematics.If this number (somehow) seems like a letdown, think of this: If you could visit a planet in the blink of an eye (100ms, and that's a very fast blink!), did you know that it'd still take 58 billion years (yes, with the letter B) for you to see them all?\u00a0\u21a9</p> </li> </ol>"},{"location":"2024/03/31/","title":"31 March 2024 - Music from LawnReality (and more)","text":"<p>You're at the start! Next Post &gt;&gt;&gt; </p> <p>\u00a0\u00a0Today I am excited to announce that I have just been given permission by LawnReality to use a very large majority of his music in my game!</p> <p>\u00a0\u00a0I'm an indie developer, so I don't have a budget, especially one to pay a musician for a full soundtrack. While my very best friend RWGryphon has generously allowed me to use his music (especially since he helps me with the lore), having LawnReality's absolute arsenal of fantasy/sci-fi music is literally the perfect match for this game which is of the same genre.</p> <p> I will say, you probably already know his music without realizing it. His music was largely popularized just upwards of a decade ago (wow) when a few folks on Roblox made use of it. In particular, you may be familiar with Fading Memories.  <p></p> <p>\u00a0\u00a0I always jokingly describe him as \"the CEO of the OC music that played in your head when you were 9 years old\", because that's basically it. The furries reading this today know exactly what I am talking about. Autism wavelengths are overpowered man.</p> <p>\u00a0\u00a0When I describe it as his \"absolute arsenal\" of music, I mean it. 444 tracks(!)</p>"},{"location":"2024/05/20/","title":"20 May 2024 - A Peek into Modding","text":"<p>&lt;&lt;&lt; Previous Post Next Post &gt;&gt;&gt; </p> <p>\u00a0\u00a0A lot of the modding API is inspired by that of Minecraft Forge. As it is designed now, all objects in the game go through the <code>StarRegistries</code> class internally (including modded assets). </p>"},{"location":"2024/05/20/#the-registry-system","title":"The Registry System","text":"<p>\u00a0\u00a0Registries are basically the same as Forge's Deferred Registry system, with the following exceptions:</p> <ul> <li>Registration is done explicitly by the modder, there is no event.<ul> <li>The game does not have an event bus like Forge does</li> <li>There is an attribute which can be attached to static classes to initialize them immediately.</li> </ul> </li> <li>Registry access is done manually and requires a reference to your own mod.</li> </ul> <p>\u00a0\u00a0Otherwise, systems are roughly the same:</p> <ul> <li><code>IRegistry&lt;T&gt;</code> allows mods to ask for the ability to register, returning...</li> <li><code>IRegistryAccess&lt;T&gt;</code>, which allows mods to register objects under an ID that works basically the same as (and has the same rules as) <code>ResourceLocation</code> from Minecraft <code>namespace:entry</code>, which returns...</li> <li><code>IRegistryObject&lt;T&gt;</code>, which holds a reference to an object that will exist after registries are locked in (after the game has loaded to the main menu). This intermediary object can be passed around to other code to preemptively have a reference to the final object as soon as it is available.</li> </ul> <p>\u00a0\u00a0Minecraft's <code>Tag&lt;T&gt;</code> type also has an analogue in my game, for agnostic object handling.</p>"},{"location":"2024/05/20/#asset-loading","title":"Asset Loading","text":"<p>\u00a0\u00a0Mods load assets a bit like resource packs. Mods can override other mods' stuff, to an extent, however the game actually empowers developers to choose when (and if) that occurs - even potentially several ways at once for the same asset!</p> <p>\u00a0\u00a0To do this, I have extended Godot's local path system (<code>res://...</code> and <code>user://...</code> are the built in local paths) to include several new ones. Most importantly is <code>asset://&lt;modid&gt;/...</code> which loads the override asset, that is, if two mods declare a file at the same location, the one that loads last will override all previous mods. This will return that override.</p> <p>\u00a0\u00a0But sometimes, you need an asset that you made and you can't allow changes. That's fine. Just use <code>mod://&lt;modid&gt;</code> instead of <code>asset://&lt;modid&gt;</code> to explicitly tell the game that you want the version from that specific mod.</p> <p>\u00a0\u00a0Assets accept a <code>modid</code> parameter so that assets can be namespaced, i.e. overriding <code>asset://vanilla/somefile.txt</code> in another mod is possible.</p>"},{"location":"2024/05/25/","title":"25 May 2024 - Goodbye 010 Editor, Hello ImHex","text":"<p>&lt;&lt;&lt; Previous Post Next Post &gt;&gt;&gt; </p> <p>\u00a0\u00a0For a long time I used to use 010 Editor. It's a hex editor with the ability to use patterns, that is, map out structs in the file and display them in a neat little data tree.</p> <p>\u00a0\u00a0The thing is, this app costs money. Admittedly I realized I was a bit of a schmuck when my buddy told me about the vastly superior ImHex, a FOSS alternative.</p> <p> For this reason, all included mappings of game data now use the <code>*.hexpat</code> format for ImHex, rather than 010 Editor's <code>*.bt</code> format. This brings me to the next point: All file types used by the game come with data mappings so you can open files (like world data files, your save file, and etc.) to directly see the data in the file. No need to map it out yourself.</p>"},{"location":"2024/05/31/","title":"31 May 2024 - Terrain Voxel Rendering","text":"<p>&lt;&lt;&lt; Previous Post Next Post &gt;&gt;&gt; </p> <p>\u00a0\u00a0Terrain Voxel Rendering is definitely a bit of a challenge. I have to render a lot of geometry really quickly or else the game hitches and you have to stand there waiting for it to load.</p> <p>\u00a0\u00a0The thing is, I also want quality. A huge inspiration is stuff like Minecraft, but one thing Minecraft distinctly lacks (primarily due to artstyle, not limitations) is real lighting.</p>"},{"location":"2024/05/31/#pbr","title":"PBR","text":"<p>\u00a0\u00a0For this reason, my voxels allow a full set of PBR (Physically Based Rendering) textures:</p> <ul> <li><code>texture-albedo.png</code> is the color of the texture. It also supports color palettes.</li> <li><code>texture-normal.png</code> is a normal map. This basically uses colors to store a direction in 3D relative to the surface (which is why they are often very blue, because blue is Z, and Z is forward). These directions tell the game how light should reflect off of a surface without actually requiring that to be in the mesh itself.</li> <li><code>texture-smoothness.png</code> is a black/white texture where black indicates a rough, matte material, and white indicates a smooth, shiny material.</li> <li><code>texture-metallic.png</code> is a black/white texture that changes how shinyness looks. Black makes shiny materials look \"plasticy\", and white makes them look like polished metal.</li> <li><code>texture-emission.png</code> is a black/white texture that tells the system which pixels glow and how strongly they do so. The color is copied from albedo.</li> </ul> <p>\u00a0\u00a0All of these are optional but very useful, as seen here for some metal blocks:  </p>"},{"location":"2024/05/31/#color-palettes","title":"Color Palettes","text":"<p>\u00a0\u00a0One of the things I really like about Starbound, another game that inspired mine, is that you can paint blocks. I want to add this feature to my game, and to do so, I have to make voxels that can optionally use color palettes instead of colored textures.</p> <p>\u00a0\u00a0Implementing this wasn't too hard as you can see in the image up above, those blocks use palettes and then I have a dedicated \"metallic block\" palette type for coloring metals like that.</p> <p>\u00a0\u00a0The way palettes work is based on gradients, each gradient has 8 shades of color. Voxels can store anywhere from 2 to 8 uniquely colored parts (specifically either 2, 3, 5, or 8 due to data packing stuff). The amount of colorable parts is determined by myself or a modder when a new voxel is added to the game's code. You don't have to use all the parts you allocate, though.</p> <p>\u00a0\u00a0Here's the nature and foliage palette.</p> <p> </p> <p>\u00a0\u00a0Can you see how each color row has 8 shades of a color? Now, these gradients don't have to be one color. If you wanted to do an exotic shift from blue to violet in one of these rows, you can!</p> <p>Nerd Section - Read this only if you want tech details</p> <p>As you ask for more parts, the amount of color choices goes away:</p> <ul> <li>2 parts allows 256 different color choices per part</li> <li>3 parts allows 32 different color choices per part</li> <li>5 parts allows 8 different color choices per part</li> <li>8 parts allows 4 different color choices per part</li> </ul> <p>If you wonder why it works this way, it's because palette information is stored in 16 bits. 8 bits is a byte, and a byte can count up to 255 (0 thru 255 is 256 unique numbers, 0 is a number too, you know!). Counting in binary:</p> <ul> <li>2x256: <code>00000000</code> <code>00000000</code></li> <li>3x32: <code>00000</code> <code>00000</code> <code>00000</code> <code>.</code> (1 wasted bit, I only use 15 of the 16)</li> <li>5x8: <code>000</code> <code>000</code> <code>000</code> <code>000</code> <code>000</code> <code>.</code> (again 1 wasted bit)</li> <li>8x4: <code>00</code> <code>00</code> <code>00</code> <code>00</code> <code>00</code> <code>00</code> <code>00</code> <code>00</code></li> </ul> <p>\u00a0\u00a0Of course, for those of you who want better artistic control, you can also elect to just not use a palette for your material and instead use an RGB texture.</p>"},{"location":"2024/06/14/","title":"14 June 2024 - Pixel Art Shadows","text":"<p>&lt;&lt;&lt; Previous Post Next Post &gt;&gt;&gt; </p> <p>\u00a0\u00a0If you look at the previous blog post about terrain rendering you will see that the shadow there is really sharp. It doesn't match the pixel art aesthetic at all!</p> <p>\u00a0\u00a0Well, lucky for you, a new Godot feature could not have better timing. Using this new feature, I am able to snap shadows to pixels!</p> <p> </p> <p>\u00a0\u00a0Unfortunately, there is a nasty bug that I can't really figure out where sloped surfaces get all sorts of horrible artifacts. This doesn't bode well for higher poly prop models that I plan to include in the game. Look here:</p> <p> </p>"},{"location":"2024/06/27/","title":"27 June 2024 - Roslyn Analyzers and VSIX","text":"<p>&lt;&lt;&lt; Previous Post Next Post &gt;&gt;&gt; </p> <p> Roslyn is the system running Visual Studio's C# analyzer and compiler. C# is the programming language I use to make the game.</p> <p>\u00a0\u00a0The analyzer is responsible for basically idiot-proofing (to an extent) the code I write by informing me of mistakes of possible accidents ahead of time so that the most obvious and preventable issues can be prevented. For example, making a value and then never using it will raise an alert informing me of such.</p> <p> VSIX, on the other hand, is an extension framework used to customize Visual Studio.</p>"},{"location":"2024/06/27/#the-conservatory-analyzer","title":"The Conservatory Analyzer","text":"<p>\u00a0\u00a0I wanted to make my own analyzer for modders, since you can create custom behavior for the analyzer and add custom warnings, really useful for the quirks of the game to make life easier for modders.</p> <p>\u00a0\u00a0There's just one small issue: I wanted to add unique text highlighting and messages to info popups when you hover your mouse over stuff. And that's where I majorly fucked up. I was a fool to desire something that seemed so simple.</p> <p>\u00a0\u00a0That's right, this is a bit of a rant because I don't think I have ever been so irritated by code before.</p>"},{"location":"2024/06/27/#history-of-net","title":"History of .NET","text":"<p>\u00a0\u00a0So for context, we need to learn about .NET's hilariously complicated past.</p> <p>\u00a0\u00a0.NET is the system that underlies C#. You have probably seen it from time to time especially in older programs, \"You need to install .NET Framework for this!\" or whatever else.</p> <p>\u00a0\u00a0In the archaic past, we actually had three .NETs:</p> <ol> <li>.NET Framework, which was a windows-focused specialized toolkit designed for making desktop applications.</li> <li>.NET Core, which was a cross-platform generalized toolkit where you could write code once and have it work on every OS. It could also write web applications and a few other doohickeys that I won't get into</li> <li>.NET Standard, which is basically Core's older brother. Standard stopped after 2.0 and Core took over from there.</li> </ol> <p>\u00a0\u00a0Both of these could mostly do the same thing if you ignored the platform specialization, but they were very different.</p> <p>\u00a0\u00a0After these two coexisted for a long time, Microsoft realized the problem and was like \"we can't keep maintaining two of the same thing\". This was a hurdle because .NET Framework ended on version 4.8, but .NET Core ended on version 3.1, and they both had their specialties. They needed to merge them together, though.</p> <p>\u00a0\u00a0What they ended up doing was siding with .NET Core (a good choice, I think, because it was the one that worked on all platforms).</p> <p>\u00a0\u00a0Remember how I brought up the version numbers? That was a small problem for the new unified system, which is called \".NET\" - plain, no word after it. Just \".NET\". So if you ever see me say that without \"Framework\" or \"Core\" after it, I mean the new unified one. Ok?</p> <p>\u00a0\u00a0So - .NET began on version ... 5! Yes, the first release was version 5. This might sound really weird, but honestly it was kind of genius to stop even more confusion from adding up. People would likely download Core or Framework if it started on 1 because they would see the bigger version numbers of Framework/Core and go \"oh, those must be newer\", when that is not in fact true.</p> <p>\u00a0\u00a0Thankfully, after .NET 5 dropped, things got way less confusing. It's actually quite elegant! Namely:</p> <ul> <li>Every year, a new .NET releases. They are currently about to release .NET 9, The Conservatory uses .NET 8.</li> <li>Every even version number (6, 8, ...) is \"Long-Term Support\", or LTS for short. It stays supported for longer than the odd releases.</li> </ul> <p>But we are talking about Roslyn Analyzers in this blog post. That's right, we're going back to hell.</p>"},{"location":"2024/06/27/#so-how-does-this-tie-into-the-history-lesson-you-just-gave-me","title":"So how does this tie into the history lesson you just gave me?","text":"<p>\u00a0\u00a0As mentioned, Roslyn isn't the only thing I wanted. Roslyn can do code analysis and produce warnings, but that's half the equation. I also wanted custom display, through a VSIX Extension. Like when you hover your mouse over a thing, I wanted a custom message with my own special format unique to the game to really help figure out what's going on. I actually got this to work, see:</p> <p> </p> <p>\u00a0\u00a0Well, this is where I open pandora's box and call the swarm of locusts a bunch of pussies. Roslyn is the system that compiles C# code. C# has to work everywhere, so Roslyn runs on .NET Standard.</p> <p>\u00a0\u00a0VSIX, however, is for Visual Studio (not Visual Studio Code, by the way. Just \"Visual Studio\". The proper IDE, not the fancy text editor). Visual Studio is a Windows application, so VSIX runs on .NET Framework.</p> <p>\u00a0\u00a0You starting to see the problem?</p> <p>\u00a0\u00a0I want to use both at once, but they are fundamentally incompatible with each other. My solution to this shown above barely works, like it's janky. Like it's bad. I trashed that project it was so bad. I'll try again later.</p> <p>\u00a0\u00a0The solution is like ... holy shit. It's simultaneously one of the most stupid yet one of the most \"yeah thats what i woulda did\" type tricks, and I learned it from some Chinese repository I forgot the name of, but basically the solution goes like this:</p> <ol> <li>Package the .NET Framework Common Language Runtime (the thing that makes C# work) into a <code>.dll</code> file</li> <li>Load .NET Standard for Roslyn, and create the analyzers</li> <li>Load the entire runtime for .NET Framework as an addon to the code???</li> <li>Load VSIX through the loaded runtime</li> <li>Revel at the homonculus baby of the two versions of .NET that you have just forcefully merged into an unidentifiable screaming monstrosity</li> <li>Repent for your sins (Optional)</li> <li>Profit</li> </ol> <p>\u00a0\u00a0And yeah. It works, sort of. It's by far the most fucked up solution I think I have ever seen. But it works. Sort of.</p> <p>\u00a0\u00a0The issue is that the runtime exists in a discrete state. It's a runtime, so it tries to do what it would do on a normal computer and load the code into its own little bubble. This means that the code existed in this weird limbo state where it was technically loaded by .NET standard but only sort of, and the real thing still lived in the Framework bubble. I could access those parts of the code but I had to use a weird shared memory page hack and it was a disaster. I don't even want to articulate how hilariously hacky it was.</p> <p>\u00a0\u00a0Later in the future I'll probably try it again in a more sane way, but that means I have to develop two apps together instead of just one. Fuck.</p>"},{"location":"2024/07/13/","title":"13 July 2024 - The Sky of Numala","text":"<p>&lt;&lt;&lt; Previous Post Next Post &gt;&gt;&gt; </p> <p>\u00a0\u00a0One of the playable races in the game is The Kirivans. You can read about them here: Playable Races: Kirivian.</p> <p>\u00a0\u00a0Their home world, called Numala, is perpetually overcast due to some funky space jargon and sci-fi bullshittery (again, check the page linked above).</p> <p>\u00a0\u00a0They are particularly special to me as they capture a very specific feeling and interest of mine, so I put a lot of time into ensuring the atmosphere of their world was just right: Imagine a rainy spring day.</p> <p>\u00a0\u00a0One of the things that can pretty dramatically affect this sensation is the background environment, such as the sky. It is a huge part of the set that makes up the world and so I put a lot of time into it, it has a custom shader designed to render smooth, rolling clouds. I am very proud of how it came out.</p> <p> </p> <p>\u00a0\u00a0Writing shaders has always been one of my hidden passions because it is the good way (i.e. not AI slop) to link art to programming. I am instructing a rock that's really good at math with decimals on how to build the colors needed to draw a sky.</p> <p>\u00a0\u00a0It feels good being a lithomancer.</p>"},{"location":"2024/08/03/","title":"3 August 2024 - The Settings Menu, Mod Configs","text":"<p>&lt;&lt;&lt; Previous Post Next Post &gt;&gt;&gt; </p> <p>This is a technical post!</p> <p>The subject matter of this post is oriented to other programmers and would-be modders. It may be difficult to understand and I am assuming the reader has programming knowledge, but I will try to make it easy to read.</p> <p>\u00a0\u00a0I just finished the framework for the Config/Options Screen, which includes the API used by modders to configure your mods.</p> <p>\u00a0\u00a0This thing is fancy and extensible. If you have modded other games you know how much of a pain in the ass it is to make configs because you gotta make custom types, or split your type into separate sliders and values and do all the menu bullshit and ugh, right?</p> <p>\u00a0\u00a0The Conservatory comes with something far nicer. It is a system designed on programmatical interfaces.</p> <p>\u00a0\u00a0A great way to think of them is to consider the symbols and buttons we use on apps and pages across the internet. Everybody's looks different, but the moment you see a hamburger menu icon \u2261, you know it opens a menu. Everybody's menu is different and done in their own way, yet you still understand how to use every single one of them on the internet. An <code>interface</code> type in code is basically that, for the computer: A way to use something that is simple and universal.</p> <p>\u00a0\u00a0Interfaces are extremely powerful for this reason because they take potentially very different code from many places, and create one, unified way to interact with it.</p> <p>\u00a0\u00a0If you want code details, check out the documentation of <code>IConfigurationValue&lt;T&gt;</code> here.</p> <p>\u00a0\u00a0But in basic terms:</p> <ul> <li><code>IConfigurationValue</code> is agnostic and has a non-generic, <code>object</code>-based instance for ease of use.</li> <li><code>IConfigurationValue&lt;T&gt;</code> is strictly typed.</li> <li><code>IRangedConfigurationValue&lt;T&gt;</code> is a range type <code>where T : INumber&lt;T&gt;</code> - meaning that any numeric type, even custom types of numbers that you invented, are allowed. All you need is the ability to convert it to/from float.</li> <li>A few others.</li> </ul> <p>\u00a0\u00a0More basically, these values are supported by default:</p> <ul> <li><code>bool</code> for switches/toggles</li> <li><code>object[]</code> (but particularly <code>ObjectIdentity[]</code> for built in localization) for dropdown menus.</li> <li><code>INumber&lt;T&gt;</code> for sliders of any numeric type.</li> <li><code>Godot.Color</code> for a full color selection wheel (HSV, RGB, Hex, sliders, hue circle, the whole thing).</li> <li><code>string</code> for optionally validated text input.</li> </ul> <p>\u00a0\u00a0You can add more types if desired, you just need to make the menu element for interacting with it (the value itself, the game handles the rest for you.)</p> <p>\u00a0\u00a0Here is a prototype of the options screen which is missing a lot of the options I plan to have.</p> <p> </p>"},{"location":"2024/09/27/","title":"27 September 2024 - Lighting is final!","text":"<p>&lt;&lt;&lt; Previous Post Next Post &gt;&gt;&gt; </p> <p>\u00a0\u00a0I went on a bit of a hiatus for a while as I focused on other stuff.</p> <p>\u00a0\u00a0This one is short: Remember that old lighting bug when I added pixel shadows? The one where it created weird triangle artifacts? That bug is no more!</p> <p>\u00a0\u00a0With some fancy math (creating a 3x3 rotation matrix from the normal, binormal, and tangent vectors of the face being rendered) I was able to properly rotate the shadow projection in 3D space to align it to the surface.</p> <p>\u00a0\u00a0If that makes zero sense to you, here's a before/after that should make more sense:</p> <p> </p>"},{"location":"2024/11/05/","title":"5 November 2024 - Terrain (core) is done!","text":"<p>&lt;&lt;&lt; Previous Post Next Post &gt;&gt;&gt; </p> <p>\u00a0\u00a0It has been just over a month since my last post but I have been busy.</p> <p>\u00a0\u00a0One of the things I have been doing is another huge change to how voxels work in lieu of data cost, memory efficiency, and disk usage. Put simply: I scrapped the game's terrain system and then made it again from scratch, using the knowledge from my previous attempt.</p> <p>\u00a0\u00a0This does impose some limits (which I have actually edited into the previous blog entries, so a bit of time travel witchery going on), but for good reason.</p>"},{"location":"2024/11/05/#core","title":"\"Core\"?","text":"<p>\u00a0\u00a0The terrain system has two parts:</p> <ul> <li>The core is the system that makes it work, the technique for how to build a world and store its data.</li> <li>The generator is the system that actually builds worlds, generating landscapes procedurally based on a set of rules.</li> </ul> <p>\u00a0\u00a0The core is the part that I just got done, because without a working core, the generator fundamentally cannot exist.</p>"},{"location":"2024/11/05/#so-what-changed","title":"So what changed?","text":"<ul> <li>Memory cost of terrain went down a lot (8GB for large world down to about 1.5GB)<ul> <li>Most of the memory cost was from me rather eagerly throwing huge values into the voxel structure. Single bytes make a difference.</li> <li>This value is also distorted because I had a memory leak at one point with geometry generation.</li> </ul> </li> <li>Terrain now generates on workgroups.<ul> <li>Terrain was already multithreaded - and this is where a lot of the difficulty came from - but now it's also designed to generate in discrete dispatched pieces of work.</li> <li>Fellow game devs might see similarity in this terminology, and yes, it does indeed mean that generation could be delegated to the GPU via compute shaders! An analogue class exists on the CPU that uses the processor's multiple threads to crudely emulate a compute shader, but this class simply provides the means to an end.<sup>1</sup></li> </ul> </li> <li>Terrain geometry also now generates on another thread.</li> <li>Interaction with the engine is kept to a minimum, and calls back to the main thread now only occur at the end of a chunk's generation to tell Godot to add the node to the scene tree, which is not a thread-safe operation.</li> <li>The file format for terrain was optimized into regions.<ul> <li>This prevents widespread world corruption by limiting the size of corrupted data to 16x16x16 chunk regions.</li> <li>A region file can be kept open by the system for a while, to optimize IO.</li> </ul> </li> </ul>"},{"location":"2024/11/05/#what-happens-now","title":"What happens now?","text":"<p>\u00a0\u00a0Now, I am going to redesign the entity system. It was never actually working to begin with, I just set up its framework to get a feel for what I wanted, and to figure out how I might make it work (and I needed it to spawn in the player). Now that I have the world working, I can focus on adding things to that world.</p> <ol> <li> <p>Despite the ability to generate on the GPU, and originally implementing it this way, there were some flaws with this. The first is that anyone who wanted to run on a dedicated server (if I do multiplayer) would find that they are unable to, for lack of a GPU. The second is that through clever use of SIMD instructions and fast noise algorithms (primarily based on fBm), I have actually managed to make the CPU generator work almost as fast as the GPU generator. The third is that getting structures and premade objects to the GPU would have been a nightmare to standardize and so I kind of dodged a bullet there.\u00a0\u21a9</p> </li> </ol>"},{"location":"2024/11/07/","title":"7 November 2024 - The Entity System","text":"<p>&lt;&lt;&lt; Previous Post Next Post &gt;&gt;&gt; </p> <p>\u00a0\u00a0I briefly mentioned this in the previous blog post, but my goal now is to formalize and create the entity system - the system which is responsible for making NPCs and animals work.</p> <p>\u00a0\u00a0All around, this system is a big goal for me, but it's one that I consider to be very important to my design and so I have made sure to very carefully plan how it should work as to prevent accidents during development and feature creep.</p>"},{"location":"2024/11/07/#design","title":"Design","text":"<p>\u00a0\u00a0In general, though, I have the following concrete \"rules\" for entities:</p> <p>Outdated Goals!</p> <p>These design goals are no longer being followed exactly as written (or, there have been some tweaks). They are kept here for historical purposes of the blog. The next post contains updated information.</p> <ol> <li>All living entities should have an agnostic controller which works off of a set of common, universal actions.<ol> <li>This allows a basic abstract controller which can have more added onto it if needed - this includes the player controller, effectively adding a native ability to be any entity in the game.</li> </ol> </li> <li>Entities should provide an identity which allows them to recognize allies/foes not by type but instead by attribute. <ol> <li>This goes hand in hand with the above, where an entity (including players) which is registered as a certain species will be treated as a member of that species.</li> <li>Modders will be urged to never check the class type when checking entity identity.</li> </ol> </li> <li>Entities with physical bodies should have physical bodies. This is largely inspired by Rain World which physically simulates every single character model in the game.<ol> <li>This system makes a significant impact on the player's actions as it allows them to feel like they are truly interacting with the world. If you critically damage someone's limb, it should be unresponsive to their body and limp.</li> <li>This system doubles as a physics bone (jiggle bone, dynamic bone, whatever) system.</li> </ol> </li> <li>Entities should have a framework to react to simple stimulus, and an even simpler emotional memory. Perhaps the most vital rule in extension with above, and also inspired by Rain World. This is probably what earns the game its praise for having such a \"well-simulated ecosystem\". It solves one of the oldest problems in gaming.<ol> <li>This doesn't have to be realistic, it just has to be believable, characters have to react to what happens. In essence, we are taking advice from Gabe Newell.</li> <li>If you hurt something, it should remember that and not like you.</li> <li>If you set off an explosive or even a sudden loud sound, people and animals should run away or be prompted to investigate.</li> <li>If you give something to someone, they should remember this.</li> </ol> </li> </ol> <p> Most importantly, I have a plan to get all of these implemented. A lot of this idea, especially points 3 and 4, are pretty stretchy goals, but I am very confident that they are attainable and I am certain people will enjoy it. They are a lot simpler than they sound, and that is important to remember.</p> <p>\u00a0\u00a0All around I am very excited, as the design of the game is truly coming together. I'll keep you all posted (ideally)!</p>"},{"location":"2024/11/13/","title":"13 November 2024 - The Entity System, Part 2: Physics","text":"<p>&lt;&lt;&lt; Previous Post Next Post &gt;&gt;&gt; </p> <p>\u00a0\u00a0In the last post I went over what I wanted from an entity system. One of these points was physics rigs.</p> <p>\u00a0\u00a0Well, I had a system already. The issue I realized pretty quickly is that I would be wrestling with Godot trying to make articulated physics rigs work (or, in English, character models that use physics to move, but can still be animated). It just wasn't worth the trouble.</p>"},{"location":"2024/11/13/#the-problem","title":"The Problem","text":"<p>\u00a0\u00a0The issue comes from Godot's built in type for this: <code>PhysicalBoneSimulator3D</code>. This is a system that does bone physics simulations for you. It's awesome, but it's meant to be completely autonomous. Think ragdolls. Animation is completely overridden (ignored), and bones simulate purely using physics.</p> <p>\u00a0\u00a0I spent the better part of the last couple days brainstorming how to make it animatable while taking a bit of a break. I spent previous days making a system to try to retrofit control into this system and make all sorts of fancy maths to push bones to their animation targets and blah blah blah... Then my Eureka! moment hit: If I need to control the physics, then control the physics! Don't use <code>PhysicalBoneSimulator3D</code> - it was designed to take control, not give it.</p>"},{"location":"2024/11/13/#the-solution","title":"The Solution","text":"<p>\u00a0\u00a0So as you may know, Godot has a special physics object type called <code>CharacterBody3D</code>. </p> <p>\u00a0\u00a0In essence, it's a kinematic object<sup>1</sup> with special utility methods designed to handle collision from both itself moving into other things, and things moving into it.</p> <p>\u00a0\u00a0Now, it was designed to be used - as the name implies - as the collider for your entire character model (like your hitbox). But...</p> <p>\u00a0\u00a0...There's nothing that says I can't assign a <code>CharacterBody3D</code> to individual bones to simulate them. I would have to simulate them manually, yes, but that's precisely what I need! It's a bit of a cursed use but at the same time it's a perfectly valid and intentional use. Very strange solution indeed.</p> <p>\u00a0\u00a0I'm mostly writing about this because I am quite excited to have found this solution after a couple days of banging my head against a wall in confusion. I'll keep you all posted on how it's going.</p> <ol> <li> <p>A kinematic object is a physics object which cannot be moved by pushing it; applying a force to it does nothing. Instead, it is designed to be moved manually.\u00a0\u21a9</p> </li> </ol>"},{"location":"2024/11/16/","title":"16 November 2024 - We're going to have to use ... math!","text":"<p>&lt;&lt;&lt; Previous Post Next Post &gt;&gt;&gt; </p> <p>This is a technical post!</p> <p>I'll be using some language that might not be easily understood by people who don't enjoy their maths and programming.</p> <p>\u00a0\u00a0Today I had to update a complex numeric type that I use for computing values based on universal constants. This type is called <code>BigDecimal</code> and is an analogue to C#'s <code>System.Numerics.BigInteger</code> type combined with <code>System.Decimal</code> to support fractions well out of range of what even <code>double</code> or <code>decimal</code> can muster.</p> <p>\u00a0\u00a0Turns out, telling the computer how to use a new type of number is WAY harder than it sounds. Okay, correction, it's easy if it's an integer type.</p> <p>\u00a0\u00a0The type is implemented based on the work of Jan Christoph Bernack, who very graciously released their work into the public domain (I would link it, but I can't seem to find it). When I nabbed the type for use in The Conservatory, I completely rewrote it and also implemented <code>System.Numerics.INumber&lt;TSelf&gt;</code> for C#'s generic math feature.</p> <p>\u00a0\u00a0This was a bit of a doozy to get right because I have to support a lot of methods. Now, I did that many months ago. Took about a day to get it all done to a satisfactory level.</p> <p>\u00a0\u00a0The thing is, my knowledge of math is a bit lacking. Most of what I know that isn't from school is stuff I learned from random YouTube videos, and connecting the dots from code experience. I can tell you exactly how both a CPU and a GPU works, but I can't do anything beyond matrix multiplication (yet).</p> <p>\u00a0\u00a0For this reason, there were some functions I skipped, because the math was very daunting. I finally got around to adding these methods though, and it was a journey.</p>"},{"location":"2024/11/16/#implementing-powers-xn","title":"Implementing Powers: \\(x^n\\)","text":"<p>\u00a0\u00a0When programming, powers are actually easy to implement, granted \\(n\\) is limited to \\(n\\in\\Bbb{Z}^+\\) (including 0; that is, 0 and all positive integers).</p> <p> All hell broke loose when I realized that I have to implement \\(n\\in\\Bbb{R}\\) (all real numbers).</p> <p>\u00a0\u00a0I was not expecting how much of a hassle it would be for me to figure these things out. I guess in part it's because it requires the next three things to be implemented...</p>"},{"location":"2024/11/16/#implementing-the-exponential-function-ex","title":"Implementing the Exponential Function: \\(e^x\\)","text":"<p> \\(e\\) is Euler's Number, and it is a very special number in math. If you are curious, 3blue1brown has a wonderful video on the topic.</p> <p>\u00a0\u00a0When it comes to a base of \\(e\\), there's a special algorithm for this due to the nature of what makes \\(e\\) so unique.</p> <p>\u00a0\u00a0This method is implemented using:</p> \\[\\exp x:=\\sum _{k=0}^{\\infty }{\\frac {x^{k}}{k!}}\\] <p>\u00a0\u00a0I actually quite like sigma notation because it makes intuitive sense as a programmer. Freya Holm\u00e9r explained this wonderfully on Bluesky, but for convenience, here's the image:</p> <p> </p> <p>A very fitting note is attached: [T]his started a civil war on the former host of twitter and I'm not interested in relitigating that lol [...] yes I'm being reductive, and yes both notations can do more than just this, and yes one of them is more readable than the other to you and that's okay and normal c:</p> <p>\u00a0\u00a0Now I implemented that math 1:1, like this:</p> <pre><code>[Pure]\npublic static BigDecimal ApproximateExp(BigDecimal exponent, uint iterations = 100) {\n    ArgumentOutOfRangeException.ThrowIfNegativeOrZero(iterations);\n    // scout_insanity.mp4\n    BigDecimal numerator = One;\n    BigDecimal denominator = One;\n    BigDecimal result = One;\n    for (uint k = 1; k &lt;= iterations; k++) {\n        numerator *= exponent;\n        denominator *= k;\n        result += numerator / denominator;\n    }\n    return result;\n}\n</code></pre> <p>\u00a0\u00a0Okay, one down, two to go!</p>"},{"location":"2024/11/16/#implementing-the-natural-logarithm-lnx","title":"Implementing the Natural Logarithm: \\(ln(x)\\)","text":"<p>\u00a0\u00a0The natural log was another big hurdle to get implemented. I did it like so:</p> \\[\\frac {1}{\\ln(x)} = \\frac {2x}{x^2-1}\\sqrt{\\frac {1}{2}+\\frac {x^2+1}{4x}}\\sqrt{\\frac {1}{2}+\\frac {1}{2}\\sqrt{\\frac {1}{2}+\\frac {x^2+1}{4x}}}\\ldots\\] <p>\u00a0\u00a0To be honest, this one is where I think math kind of lacks a vital concept of \"memory\", but that's just my programmer brain talking.</p> <p>\u00a0\u00a0I actually think this one is easier to understand in code.</p> <p>\u00a0\u00a0For the math nerds out there, in code, the = sign is temporal (dependent on time), effectively the same as the \\(\\Leftarrow\\) symbol to refer to assignment of a value. <pre><code>int x = 5; // This initializes a new variable x to be equal to 5.\nx = x + 7; // Usually written as x += 7 which is a shorthand meaning the same thing.\n</code></pre></p> <p> Or in essence, <code>x = x + 7</code> in code is the same as \\(x \\Leftarrow x+7\\).</p> <p>\u00a0\u00a0In my code, I broke the equation into discrete parts. Variables in \\(\\mathtt{\\text{typewriter font}}\\) indicate a programmatical variable, which are often assigned full names rather than letters.</p> \\[\\mathtt{iterativeResultPart} \\Leftarrow \\sqrt{\\frac{1}{2} + \\frac{x^2+1}{4x}}\\] \\[\\mathtt{previousInner} \\Leftarrow \\mathtt{iterativeResultPart}\\] <p>\u00a0\u00a0What I then do is a loop based on a number of iterations. Repeatedly, this statement is evaluated based on a parameter which declares how many times to do so:</p> \\[\\mathtt{previousInner} \\Leftarrow \\sqrt{\\frac{1}{2} + \\frac{\\mathtt{previousInner}}{2}}\\] \\[\\mathtt{iterativeResultPart} \\Leftarrow \\mathtt{iterativeResultPart \\times previousInner}\\] <p>\u00a0\u00a0Then finally, the result is returned as:</p> \\[\\frac {2x}{x^2-1} + \\mathtt{iterativeResultPart}\\] <p>\u00a0\u00a0This achieves the same purpose as the original equation above. This equation actually computes \\(\\frac{1}{ln(x)}\\), also.</p>"},{"location":"2024/11/16/#implementing-square-roots-sqrtx","title":"Implementing Square Roots: \\(\\sqrt{x}\\)","text":"<p>\u00a0\u00a0This one actually wasn't so bad. It uses a slightly improved technique for how to manually find a square root by hand, same method people in school learn. Nothing really special here.</p> <p>\u00a0\u00a0The \"slight improvements\" allow it to make better incremental jumps in each guess.</p>"},{"location":"2024/11/16/#and-now-its-done","title":"And now it's done!","text":"<p>\u00a0\u00a0With these, I can use a rule to evaluate \\(x^n\\). The rule states these two are the same exact thing:</p> \\[x^n = e^{ln(x^n)}\\] <p>\u00a0\u00a0The natural logarithm there can be rearranged to remove that exponent from \\(x\\). These two are the exact same thing as well...</p> \\[ln(x^n) = \\text{n }ln(x)\\] <p>\u00a0\u00a0So using this, we can rearrange the equation just a bit more, and...</p> \\[x^n = e^{\\text{n }ln(x)}\\] <p>\u00a0\u00a0And that's something I can work with using the functions I created. We did it!</p>"},{"location":"2024/11/18/","title":"18 November 2024 - Lore Tweaks, and Inverse Kinematics","text":"<p>&lt;&lt;&lt; Previous Post Next Post &gt;&gt;&gt; </p> <p>\u00a0\u00a0Two completely unrelated topics in one blog post? Hell yeah!</p>"},{"location":"2024/11/18/#lore-tweaks","title":"Lore Tweaks","text":"<p>\u00a0\u00a0After some time spent spitballing with my buddy Gryph (who, if you do not know, helps to write lore and contemplate ideas), I decided on some slight name changes and lore changes for the included races playable in the game.</p> <ol> <li>Humans are cringe naenae babies who wrecked Earth. They were replaced by an evolutionary offshoot called Gaians.</li> <li>Numolon (the cat race) are now Kirivians.</li> <li>Balaur (the bird race) are now Avelians.</li> <li>Novan are the same because they are really cool.</li> </ol>"},{"location":"2024/11/18/#inverse-kinematics","title":"Inverse Kinematics","text":"<p>\u00a0\u00a0One of the core systems needed to make entities work is the system that tells them how to move and interact with the world. Inverse Kinematics is one of these techniques, and it's something you use every day without even realizing it. It is the mathematics that figures out how to rotate linked parts (like an arm, with a shoulder and elbow) so that it reaches out and touches something.</p> <p>\u00a0\u00a0This is a lot easier said than done and there's a lot of algorithms ranging from trivially simple to godly complicated to achieve this with varying pros and cons.</p> <p>\u00a0\u00a0I've implemented these so far:</p> <ul> <li>Two-segment / \"shoulder and elbow\" IK</li> <li>CCD IK</li> </ul>"},{"location":"2024/11/18/#two-segment-ik","title":"Two-segment IK","text":"<p>\u00a0\u00a0This is a very simple algorithm which, as the name implies, has two segments. It is sometimes called \"shoulder and elbow\" IK because you can imagine it like your arm, with a shoulder which you can rotate (mostly) freely, and an elbow joint which works like a hinge.</p> <p>\u00a0\u00a0This type of IK is specifically designed to solve for this setup of joints, and can use some special shortcuts to make it very fast and accurate. However, as the name implies, it is limited to only two segments. You can't add any more segments for more advanced rigs.</p> <p>\u00a0\u00a0This type is useful in niche scenarios, but in those niches it is by far the most performant and most accurate solution possible, with instantaneous convergence to the goal (most other algorithms need to run over and over again to \"refine\" their results).</p>"},{"location":"2024/11/18/#ccd-ik","title":"CCD IK","text":"<p>\u00a0\u00a0CCD IK stands for Cyclic Coordinate Descent Inverse Kinematics. It is a technique which supports any amount of segments. It works by rotating each segment so that it rotates the end of the limb/chain of bones towards the target point to reach to.</p> <p>\u00a0\u00a0Doing this repeatedly for each bone over and over again, will eventually cause it to bend and reach the goal. It's an okay technique, and it's not too hard to implement. It also has the benefit of supporting limits, like hinges, which can even include ranges of rotation.</p> <p>\u00a0\u00a0As a caveat, it can often get stuck and hit what are called \"singularities\", where there is no obvious solution to the mathematics employed to determine the rotation. CCD is prone to spazzing out in some scenarios, basically. It's a balance between versatility and capability to reach its target. </p> <p>\u00a0\u00a0This technique is great for robotic arms and other mechanical assemblies.</p> <p>\u00a0\u00a0I may change what algorithms I go for, though I anticipate all of my use cases can be addressed with these two.</p>"},{"location":"2024/11/24/","title":"24 November 2024 - The Entity System, Part 3: Physics. Again. Help.","text":"<p>&lt;&lt;&lt; Previous Post Next Post &gt;&gt;&gt; </p>"},{"location":"2024/11/24/#reintroduction","title":"Reintroduction","text":"<p>\u00a0\u00a0Some time ago I made two posts about the entity system. Originally I was chugging along forward with the data structure and moving ahead until I started implementing character physics.</p> <p>\u00a0\u00a0So to recap (and introduce some new information):</p> <ul> <li>I had the idea of using <code>CharacterBody3D</code> as my collider type for bones due to the existence of <code>move_and_slide()</code> provided by the engine. This method simulates physics for characters and is specifically designed for this one purpose.</li> <li>I now use <code>AnimatableBody3D</code> which is effectively the same, but it derives from <code>StaticBody3D</code> which allows for some better handling due to trimming out a lot of behavior that is not necessary. It also has a similar but distinctly different <code>move_and_collide()</code> method which does roughly the same thing.</li> </ul> <p>\u00a0\u00a0And now, a story.</p> <p>\u00a0\u00a0This is the story of a developer named Xan. Xan was about to write physics simulation code for character models, something he was very excited to work on, something where the path ahead was so clear he knew precisely what had to be done to achieve his goal.</p> <p>\u00a0\u00a0That was, until the time to write the code came along. \"Let's use this built in method to simulate motion with other physics objects,\" he said. But he was distraught to realize that only some of the necessary information was used by the code provided by the engine.</p> <p>\u00a0\u00a0See, the method accepts one parameter of motion, the linear velocity. This describes the direction the object is moving, and how fast. But something was missing...</p> <p> \"Hm, that's odd,\" he says to himself. \"Where is the angular velocity parameter?\" he wondered aloud.</p> <p>\u00a0\u00a0Xan was soon to discover that there was not, in fact, an angular velocity parameter.</p>"},{"location":"2024/11/24/#what-happens-now","title":"What Happens Now?","text":"<p>\u00a0\u00a0Ordinarily this would not matter so much, typically objects just apply their rotation first then simulate motion. It's not technically correct but for 99% of cases - especially with respect to characters which are not typically spinning - it is fine. With bones, however, there's a fundamental problem with this: Bones are constrained by rotating joints. Bones don't move and slide. They rotate.</p> <p>\u00a0\u00a0To simulate characters, bones need to be able to spin which the physics simulator doesn't support on any type except <code>RigidBody3D</code>, which is not kinematic.</p> <p>\u00a0\u00a0So you know how mass is just a number kind of like weight? Yeah so turns out rotation has its own type of mass called an \"inertial tensor\" and it's a 3x3 matrix.</p> <p>\u00a0\u00a0I don't know why I keep running into hilariously specific scenarios where the most ungodly complicated math emerges and I am thrown into the deep end, but I'll be damned if I don't say I haven't learned more math in the past six months of this game's progress than I have in a school year. Good lord.</p> <p>\u00a0\u00a0So yeah, that's my new goal: Implement rotational physics simulation that has proper accuracy. I will say now for those wondering, I am not implementing true correct physics simulations. Instead I am just moving a bit and checking iteratively (so more like SM64's quartersteps for rotation, and its 1/16th steps, and to optimize, rotation simulations are clamped to 360 degrees so comically fast rotation speeds aren't going to break it. No sideways long speens for you.)</p> <p>\u00a0\u00a0The need for rotational tensors is for collision handling and making the moving parts experience torque forces when they hit at a point other than the center of mass.</p>"},{"location":"2024/12/05/","title":"5 December 2024 - Physics, Entities, and ...Music!","text":"<p>&lt;&lt;&lt; Previous Post Next Post &gt;&gt;&gt; </p> <p>\u00a0\u00a0This is more of a generic status update post since I have been gone a little while and want to keep you all up to speed. Not much in this one.</p>"},{"location":"2024/12/05/#physics-and-entities","title":"Physics and Entities","text":"<p>\u00a0\u00a0On the logic side of things, most of my existing entity code<sup>1</sup> is still compatible with everything in the game now, the main hurdle here is the change in node structure. Another huge flaw I had was that living entities did not use discrete classes for each kind of entity. I have a separate class called <code>Species</code> which is used to store the identifying features of living creatures (it's almost the same as what Starbound does). I still have this class, but now entities need a dedicated class for their species as part of the data structure.</p> <p>\u00a0\u00a0Onto the area of physics. I'm still stuck. I have some options left before I just drop character physics.</p> <ol> <li>Try to make RigidBodies \"kinematic-ish\" with custom integration. <ol> <li>This has the cost of giving a huge middle finger to physics which will result in weird behavior.</li> </ol> </li> <li>Use my simulation technique as it stands now, but force all colliders to be spheres.<ol> <li>This works best with my model of fast character physics because I can trim out calculations pertaining to inertia, mass, and friction. Without these factors, spheres become purely linear objects, and collisions become as simple as distance checks, allowing fast physics calculations.</li> <li>This has the drawback of pretty dramatically limiting the shape that physical bones can have and collide with. I don't think modders would like this.</li> </ol> </li> <li>Turn bones into unstoppable forces. This is built in behavior to Godot via animatable physics objects, but as mentioned, they are unstoppable forces. It doesn't make sense for some dude's tail to yeet a box across the room because it got in the way. The tail should stop.<ol> <li>This is definitely the easiest solution but also wreaks the most havoc. I doubt people would like this much either.</li> </ol> </li> <li>Pull a BONEWORKS and have two rigs simultaneously, one controlled directly from code, the other simulated, and make the simulated bones try to reach the scripted ones.<ol> <li>This would introduce complexity and I worry it will nuke performance in excess.</li> </ol> </li> </ol>"},{"location":"2024/12/05/#music","title":"Music","text":"<p>\u00a0\u00a0As of two days ago, I started learning FL Studio and how to write music. So far I think I have the basics down, but my capabilities are unfortunately harshly limited, and iteration time is long because I have to listen back to my own stuff after many idle hours so that flaws stick out a bit more. It's harder to find flaws when it has just been created. Useful tip for all art mediums. Make a thing, sit on it for hours or days, then come back, and the flaws will stick out to you.</p> <p>\u00a0\u00a0Anyway, that is definitely a background goal, learning to write my own music for the game.</p> <ol> <li> <p>I tend to design \"skeleton frameworks\" for things I plan to work on in the future. This way, I can get a feel for how I want something designed in the moment, without putting a significant amount of time into actually developing it. It's kind of the manual equivalent of prewarming, and helps promote more agnostic and scalable designs.\u00a0\u21a9</p> </li> </ol>"},{"location":"2024/12/10/","title":"10 December 2024 - Entity Model (Character) Customization","text":"<p>&lt;&lt;&lt; Previous Post Next Post &gt;&gt;&gt; </p> <p>\u00a0\u00a0In a previous blog post, I covered the technical details of an internal code type <code>IConfigurationValue&lt;T&gt;</code>. This, as its name implies, is the underlying data type for all configurations. It was originally designed for agnostic use; it is what allows the game's settings to work, but modders can also use it to add configs to their mods. Most notably, it does this while also providing a simple layer to allow these configuration options to be associated with a menu item, so that the option can be displayed in a settings menu without any work other than simply making the widget. The game handles all the hard work of positioning and sizing it to fit for you. You just tell it what to draw.</p> <p>\u00a0\u00a0This system is so versatile, however, that I have given it a third use: Character customization!</p> <p>\u00a0\u00a0When you are creating a new character and want to see its customization options, the list of options is assembled on the fly based on what the model says it can customize, and it leverages the full config system. This means there is inline support for the following types of options:</p> <ul> <li>Toggles</li> <li>Sliders</li> <li>Dropdown menus</li> <li>Color pickers (HSV Wheel + RGB Sliders + Hex input included!)</li> <li>Text input</li> <li>Custom types invented by modders</li> </ul> <p>\u00a0\u00a0I find this very exciting because it opens the door for potentially advanced customization options for custom species, which will hopefully be able to suit the needs and desires of aspiring creators. Coupled with the game's data format, the possibilities for scalable data are endless.</p>"},{"location":"2024/12/21/","title":"21 December 2024 - Physics Peeves, Mod Analyzer Woes","text":"<p>&lt;&lt;&lt; Previous Post Next Post &gt;&gt;&gt; </p> <p>\u00a0\u00a0Oh boy, it's another complaining post!</p>"},{"location":"2024/12/21/#physics-peeves","title":"Physics Peeves","text":"<p>\u00a0\u00a0I have a love-hate (like, 90% love, 10% hate) relationship with Godot Jolt physics. For those who don't know, plain Jolt is a third party physics engine that is universally better than Godot's native 3D physics system, especially with respect to assembly (as in, physical assembly, not code) complexity. Needless to say, Godot physics panics and breaks down a bit too soon when making mechanisms.</p> <p>\u00a0\u00a0Originally, I used Godot physics until I started working on character models, when I found interest in <code>PhysicalBoneSimulator3D</code>. Of course, I quickly ran into the issue of physics going spastic and completely breaking. When I asked for help, I was advised to use the plugin to cross-port Jolt into Godot instead of native physics.</p> <p>\u00a0\u00a0To be frank, I could probably write an entire blog post about Jolt. It's a really awesome physics engine. I think the only physics engine I have as much appreciation for is something like Valve's Rubikon (as it functions in the present day, think Half-Life: Alyx).</p>"},{"location":"2024/12/21/#gripes-and-nitpicks-with-godot-jolt","title":"Gripes and Nitpicks with Godot Jolt","text":"<p>\u00a0\u00a0Godot Jolt is phenomenal, until it isn't. It is missing features I consider vital for the design of my game, some make more sense than others to be missing.</p> <ul> <li>Physics simulation is not multithreaded, even though Godot has an option for this and Jolt supports it natively.<ul> <li>This seems to be fixed in the official integration that came as part of 4.4-dev7?</li> </ul> </li> <li>Godot Jolt is not deterministic, and I plan to have a multiplayer game.<ul> <li>This isn't a huge deal, network ownership is still going to be needed anyway.</li> <li>This limitation makes sense, I'm like a rich kid complaining that the gold leaf on his coin is too thin.</li> </ul> </li> <li>Certain collision shapes (i.e. <code>WorldBoundaryShape3D</code>) don't work.</li> </ul>"},{"location":"2024/12/21/#useful-parts-of-godot-jolt","title":"Useful parts of Godot Jolt","text":"<p>\u00a0\u00a0That's not to say it is useless though. There's some things that are absolutely useful.</p> <ul> <li>Higher performance physics is always a win.</li> <li>Static compound shape construction (physics bodies with multiple collision shapes).<ul> <li>Originally, my terrain colliders used baked and cached compound shapes made via V-HACD.<ul> <li>This was extremely laggy under Godot physics, even as static colliders.</li> </ul> </li> <li>Godot prefers mutable compound shapes, and Jolt prefers static compound shapes.<ul> <li>You may have heard of things like \"baking\" in computers, this refers to a common tradeoff. You know how games have a power slider, like speed vs. health? Computers have something a bit like that, where you trade off computational time for data cost.</li> <li>Godot prefers allowing data to be changed quickly, at the cost of slow physics code but fast object creation and destruction.</li> <li>Jolt prefers denying data changes in a timely manner, at the benefit of fast physics code but slow object creation and destruction.</li> </ul> </li> </ul> </li> </ul>"},{"location":"2024/12/21/#mod-analyzer","title":"Mod Analyzer","text":"<p>\u00a0\u00a0A long while ago, I made a blog post about Roslyn Analyzers and VSIX and how it is nightmarishly and horrifyingly awful to work with both at the same time. Status update: It still fucking. sucks. To be honest, I don't know if I will even release it with the modding SDK at this point. That's how bad it is. I might just give up on it, and I don't give up easy.</p> <p>\u00a0\u00a0Every couple weeks or so I get the idea, \"hey, maybe I'll try working on the analyzer again\"! Then, I proceed to fiddle around with things for the next couple hours, and finally throw the project back into the abyss in defeat. Last time this happened I made negative progress because now my VSIX does nothing and I have no clue why. What, did you think I was going to debug it? What are you, insane? Everybody knows that for some god-awful reason you can't use breakpoints and the debugger when hosting the experimental VS build.</p> <p>\u00a0\u00a0If anyone on the VS/Roslyn team is reading this perchance, please hear my call for help. The documentation is outdated. VSIX documentation that I get led to is still telling people to use the synchronous model. The documentation for Roslyn is long and complicated, so much so that it's giving me flashbacks to when I was first learning to write code some 15 years ago. It's an uphill battle from two sides and it feels awful to learn.</p> <p>\u00a0\u00a0I feel like to really get VSIX to work the way I want it to with my customizations to the code view, I'd practically have to learn how Visual Studio itself works, because it is by far one of the most confusing and unintuitive systems I have ever dealt with.</p> <p>\u00a0\u00a0As far as Roslyn goes, it's just way too complicated for me. I have a loose grasp that there is something known as a syntax tree, and that it stores the code somehow. But as far as how and when and where and in what context and how it splits it apart, I am clueless.</p>"},{"location":"2024/12/21/#i-need-help","title":"I need help","text":"<p>\u00a0\u00a0Most of my analyzer's functionality comes from <code>Attribute</code>s. For example, methods that declare or inherit <code>[MayRunOnAlternateThread]</code> are supposed to add a color coded piece of text to the tooltip when you hover your cursor over the method to view documentation (I actually have a picture of this working in the old blog post, see the top of this section).</p> <p>\u00a0\u00a0Some analyzer functions will observe method calls. For example, if the body of the aforementioned example method is calling something decorated with <code>[MustRunOnMainThread]</code>, this should raise a warning. This seems like a fairly easy analysis to make, \"if the thing I am calling has this annotation, and the caller has this other annotation, raise a warning\".</p> <p>\u00a0\u00a0Like this is not that complicated, this feels easy, and I think that's why I keep coming back to it. It's just that actually implementing it feels like trying to make it through a labyrinth.</p> <p>\u00a0\u00a0Hopefully I can work through this, but as far as I care now, I will be skipping work on the mod analyzer.</p>"},{"location":"2024/12/24/","title":"24 December 2024 - Entity Actions, and The Lack of a Player Entity","text":"<p>&lt;&lt;&lt; Previous Post Next Post &gt;&gt;&gt; </p> <p>\u00a0\u00a0A lot of my recent posts have been complaints and problems. So let's change up the vibe a bit and talk about progress! I'll even say it's for holiday spirit so I get some +rep with Santa. </p> <p>\u00a0\u00a0Anyway, in this post I want to talk about the Entity Action system. This is a sort-of-complex system that works with the main Entity system to allow entities to actually do things, without actually having to know how to do it. The entity just says \"I want to do this\", and the action handles the details and the procedure.</p> <p>\u00a0\u00a0I think a lot of people will find this exciting, especially those that enjoy the ability to roleplay in games. You'll see why. But first, we have to break it down.</p>"},{"location":"2024/12/24/#what-is-it","title":"What Is It?","text":"<p>\u00a0\u00a0The term \"entity\" in a game is basically representative of \"a thing in the world that is doing something with code\". This could be an NPC, a machine, or a vehicle. Blocks in the world are not entities, because they are just geometry. That should make sense, right?</p> <p>\u00a0\u00a0Most games have a distinct entity type for the player. This is incredibly common as it allows assigning special functionality to players that NPCs wouldn't typically have, like a link to the save file, an inventory, and other assorted goodies. It also makes it easy for NPCs to know that they are interacting with a player. You see, I actually chose to not do this.</p> <p>\u00a0\u00a0In my game, entities have a piece of data known as an input provider. This is basically the interface layer that links some arbitrary technique of control to the entity. This control could be an AI (like, the traditional game kind, not deep learning), or it could be your keyboard+mouse/gamepad. What matters is that it provides instructions for what the entity should be doing.</p> <p>\u00a0\u00a0By extension of this, players are identified with the player controller. Consider this and the lack of a specific player entity type, and you (hopefully) guessed it: the player can be any (living) entity in the game! The game is designed with this in mind. And modders, don't worry, there is a very convenient, well-defined <code>AbstractEntity.IsPlayer</code> property available to you.</p> <p>\u00a0\u00a0I think this opens the door for a lot of potential with new gameplay created by users. This was heavily inspired by Risk of Rain 2's <code>RoR2::CharacterBody</code> class. You can actually play as anything in the game, not just the survivors, and I thought that was really cool. It was also inspired by Rain World's Safari Mode, where you can take control of random creatures around the map and play with the ecosystem.</p> <p>\u00a0\u00a0Most importantly, I think this is an outstanding immersive tool. Games often treat the player differently, and it kind of breaks the immersion if your goal is to tell your own story where you might not want to be the flashy main character. If you spawn in as a Novan, NPCs will see you as just a plain Novan like they would any other, not as \"the player\".</p>"},{"location":"2024/12/24/#so-how-does-it-work","title":"So, How Does it Work?","text":"<p>\u00a0\u00a0A data type in the game's code called <code>EntityAction</code> declares a thing an entity can do. This is about as arbitrary as it sounds. It could be the action of placing a block in the world, the action of swinging a melee attack, the action of shooting a gun, the action of smelling the air to find something, the action of casting a spell. If it is an action and, discretely, is not movement (because movement and jumping has its own system), and is not an interaction with a usable object (because interactions have their own type as well, but this may very well change!) it's an Entity Action.</p> <p>\u00a0\u00a0Actions are entirely arbitrary, and must be created on game startup (you can't create new action types during runtime (read: after mod initialization), this is for network compatibility and such). The thing is, an entity has to know what actions it can actually do, and these actions might change depending on context! For example, a person's default primary action might be to swing their fist, but if they are holding a gun, it needs to override the primary action so they shoot the gun instead of swinging it at someone.</p> <p>\u00a0\u00a0To do this, there is a container type: An action palette. This holds a number of predefined action slots (primary, secondary, tertiary, that sort) that can be stored. These palettes are applied to a species to declare their default actions, then can be applied to items to override certain slots using a priority system. To call back to Risk of Rain 2 again, think of the Heretic's lunar items, and how they replace your skills. Basically the same thing.</p>"},{"location":"2024/12/24/#how-will-it-work-with-custom-stuff","title":"How will it work with custom stuff?","text":"<p>\u00a0\u00a0The game enforces that actions can be performed with a minimal amount of commonly available data. This means that while certain actions may require some context (of any type, as it is defined by the developer (myself or modders)), at a base level actions require nothing more than the entity performing them.</p> <p>\u00a0\u00a0Currently, the technique to get information (like configuration for a common type of action, so that actions can be shared) is undetermined. I have a way in mind, but it is unsafe and uses unmanaged memory so it's obviously not the best for C#.</p>"},{"location":"2025/01/01/","title":"1 January 2025 - The Conservatory Analysis Tools","text":"<p>&lt;&lt;&lt; Previous Post Next Post &gt;&gt;&gt; </p> <p>\u00a0\u00a0Before I start this blog post, obligatory messages: Happy new year! I can't believe it's already 2007.</p> <p>\u00a0\u00a0Anyway... It's another blog post about the analyzer - but rest assured, this time, I have good news.</p> <p>\u00a0\u00a0As a brief recap, I wanted to make a Roslyn Analyzer + Code Fix combo for my future modders. Roslyn is the system that compiles C# for .NET, and analyzers are tools that operate within this space to create compiler warnings and errors.</p> <p>\u00a0\u00a0Using this, I have created many special, custom diagnostics that show up in modded code (or even my code!) for The Conservatory.</p> <p>\u00a0\u00a0Here's some little examples of the helpful redirects the tool gives you:</p> <p> <p></p> <p></p> <p></p> <p>\u00a0\u00a0And as a matter of fact, there's a lot of little helpful goodies in here. You may have noticed each warning is a clickable link. That's right - even the diagnostics are documented! </p> <p> You may need to press on the following images to zoom in.</p> <p> </p> <p>\u00a0\u00a0You can see there's a lot of assorted diagnostics that make sure your code stays functional and mistakes are caught before you get into your testing phase. Every page for every diagnostic has as much detail as it needs to make it abundantly clear exactly why a warning/error is raised, and how to fix it, including multiple ways to fix it if the fix is not straightforward.</p> <p>\u00a0\u00a0To crank this up to 11, though, I will add that the code keywords in that second image for the game types <code>AbstractLivingEntity</code> and <code>AbstractSpeciesEntity</code> will be clickable links in the future, leading to the game's online documentation. So if you were going to ask \"What's the difference\", that question is answered too via the game's documentation.<sup>1</sup></p> <p>\u00a0\u00a0As you can see, my give-a-shit for my modding community is not broken, and my field of fucks is most certainly not barren.</p> <ol> <li> <p><code>AbstractSpeciesEntity</code> is a convenience layer that shunts in a call to <code>EntityValidation.AssertSpeciesIs(...)</code> into the constructor. This way, you can't construct an <code>AbstractGaianEntity</code> (which extends this type) using <code>Species.Novan</code>, for example. This will raise an exception.This is an entirely optional convenience layer however, and it's more than valid to skip it and just call the assertion yourself. This is why it's not a good idea to limit by <code>AbstractSpeciesEntity</code> - an entity may not even be using it in the first place!\u00a0\u21a9</p> </li> </ol>"},{"location":"2025/01/05/","title":"5 January 2025 - New Website!","text":"<p>&lt;&lt;&lt; Previous Post Next Post &gt;&gt;&gt; </p> <p>\u00a0\u00a0Hi everyone!</p> <p>\u00a0\u00a0This isn't much of a game progress report, but this is instead me noting the occasion - The Conservatory's blog has been moved from my personal site to my (new) business site.</p> <p>\u00a0\u00a0Development of The Conservatory is unchanged. The only difference now is as follows:</p> <ol> <li>I have this new domain, https://xansworkshop.com/</li> <li>The game's repositories are now on a GitHub Organization that I own.</li> </ol> <p>\u00a0\u00a0And that's it. Hopefully you like the new website, it fits in with Xan (the character)'s thematic cues and I think it looks awesome. I'll have more to say about the game's development soonish - pinky promise!</p>"},{"location":"2025/03/03/","title":"3 March 2025 - The Dev to Alpha Transition Phase","text":"<p>&lt;&lt;&lt; Previous Post Next Post &gt;&gt;&gt; </p> <p>\u00a0\u00a0Well, I'll just start this one by saying holy hell. I've been gone a while! Lots has changed in the internim. As a matter of fact, I have tried to write this blog post three times in the past, each time I just have to stop because there's so much stuff to talk about. The problem is circular; the more I do, the more there is to talk about.</p> <p>\u00a0\u00a0For the sake of my sanity (and for your reading pleasure)...</p>"},{"location":"2025/03/03/#meta-lorestory-community-etc","title":"Meta (Lore/Story, Community, etc.)","text":"<ul> <li>A Discord server dedicated solely to The Conservatory has just gone up. Join here.</li> <li>I rewrote a lot of the lore for various species. For the time being, I have chosen to significantly reduce the content on all species pages since it's in flux right now.<ul> <li>I got permission from hdorriker et. al. to reference their universe in my game. If you have no clue what I am talking about, I give him and his friends a huge shoutout on the About page.</li> </ul> </li> <li>Lots of tiny internal changes to the story.</li> <li>A new FAQ Page has been added to the website.</li> </ul>"},{"location":"2025/03/03/#code-and-engine","title":"Code and Engine","text":""},{"location":"2025/03/03/#assets-and-mods","title":"Assets and Mods","text":"<p>\u00a0\u00a0I completely rebuilt the entire asset management system from the ground up. The old system completely ignored Godot's resource system, and I feel a bit foolish for not realizing that there's a reason the assets are compiled. This required redoing basically all code that loads some game object of any kind. That's a lot of code.</p> <ul> <li>The old system used to use directories only. Mods had to be directories too.</li> <li>The new system uses <code>ProjectSettings.LoadResourcePack</code> as Godot advises.<ul> <li>However, this does not preserve existing files. It's always one or the other, original vs. new. I need both for my system to work.</li> <li>To get around this, I had to design a new type <code>StarFileSystem</code>, a virtual representation of a filesystem from an archive file that can be indexed using Godot-like paths and <code>ObjectIdentity</code> (IDs in my game).</li> <li>In essence, this system allows me to load pck files dynamically and store their contents in a separate cache per-mod, allowing me (and other modders) to index any version of a file that I want.</li> <li>I had to come up with an agnostic way to point simple IDs (like, say, <code>vanilla:grass</code>) to its relevant assets without including a path in the ID.</li> <li>A significant amount of existing game code had to be refactored to account for this new system.</li> </ul> </li> </ul> <p>\u00a0\u00a0Part of the reason this took so long is because I screwed it up. Twice. So I had to rework the entire system three times before I could account for all the quirks (and frankly I'm tired).</p>"},{"location":"2025/03/03/#ientityaction-the-entity-action-system","title":"<code>IEntityAction</code> - The Entity Action System","text":"<p>\u00a0\u00a0I designed the Entity Action system. This is an agnostic, universal input system for all entities, including players. The system is an interface layer, that is, it provides an expectation (or \"contract\") for what an entity can do. </p> <p>\u00a0\u00a0If it's a thing, and you have to do that thing somehow by using some input, then it classifies as an entity action. Yes, it's that vague, which is part of its design.</p> <p>\u00a0\u00a0This system is very large and complex behind the curtain, but rest assured, implementing it is easy. The reason it is designed this way is because of the reusability it provides for assets, you see, any entity can perform any action in any context (unless explicitly denied by code)!</p> <p>\u00a0\u00a0So what does this mean?</p> <ul> <li>Actions can be reused. I only have to make one unarmed melee action, and then every single entity ever added to the entire game (both now and all future mods) can share that one, single action.<ul> <li>Actions, by design, don't care how they are being performed. They only need a reference to the entity performing the action.</li> <li>Actions can receive additional context, i.e. the action for firing a mining laser can (but does NOT have to) be given information about the item being used.<ul> <li>In this scenario, it will damage/discharge the item if it has been provided with the item.</li> <li>If this information is missing, it'll still fire the laser since that's about all that it can do. There's no item to discharge, so don't bother with it.</li> <li>This behavior is well-defined and predictable!</li> </ul> </li> </ul> </li> <li>I think one of the more compelling points of this is that mods that want to add, say, the ability to shapeshift into some other entity, can do so very easily. It's quite literally as easy as setting the entity's controller to the player controller and It Just Works<sup>TM</sup></li> </ul> <p>\u00a0\u00a0This system took a long time to design and a long time to get right. I had to make it twice.</p>"},{"location":"2025/03/03/#terrain-renderer-mk-iii","title":"Terrain Renderer Mk. III","text":"<p>\u00a0\u00a0Terrain rendering has had a huge facelift, and when I say \"huge\", well, I don't know how to articulate it.</p> <ul> <li>Atlasing was implemented using texture arrays, meaning that if an atlas overflows, it can just make a second one.</li> <li>Vertex data has been dramatically improved (it's smaller, and easier to pack)</li> <li>Palette rendering has been dramatically improved (palettes are sent as a texture instead of a uniform, too)</li> <li>Lighting has been dramatically improved (significantly cheaper algorithm to snap to pixels)</li> <li>Performance has been dramatically improved (it's one material for the entire world!)</li> </ul> <p>\u00a0\u00a0The terrain system literally went from \"primitive, overcomplicated mess\" to \"advanced, simple, well thought out procedure\". I can't even quantify how much work this took.</p>"},{"location":"2025/03/03/#registries-mk-ii","title":"Registries Mk. II","text":"<p>\u00a0\u00a0With the addition of entity actions and the older entity identity system, registries needed a huge rework. Specifically, registries needed to become variant. In C#, this is something applied to an interface that changes how its generic parameters work. Namely, it affects how they can be cast. For example, the ability to cast <code>List&lt;string&gt;</code> into <code>IEnumerable&lt;object&gt;</code> implicitly (note how we went from <code>string</code> to <code>object</code>) is provided by covariance. This works in the opposite direction for contravariant parameters (an example is if I have a method that accepts an <code>Action&lt;string&gt;</code> parameter, I can pass in an <code>Action&lt;object&gt;</code> parameter and it's fine with that even though the types mismatch).</p> <p>\u00a0\u00a0To improve registry behavior, registry objects needed to be made covariant (despite receiving registerable objects!) and registerable classes needed to be made contravariant! This is kind of turning the system on its head, but it's extremely important that it is designed this way. It's a bit confusing, and frankly I can't find an understandable way to describe what it does or why I did it. It's an absolute requirement for types like <code>IEntityAction&lt;...&gt;</code> and <code>IEntityIdentity</code> to work.</p>"},{"location":"2025/03/03/#summary","title":"Summary","text":"<p>\u00a0\u00a0Basically, a significant part of the game's internals got entirely redone, some had to be done several times. In fact, I'm still finishing up the new asset thing. That's why I've been gone for a month. As I approach alpha testing phase, I need everything to be ready!</p>"},{"location":"2025/03/06/","title":"6 March 2025 - Godot 4.4, Mods, and Data Galore","text":"<p>&lt;&lt;&lt; Previous Post Next Post &gt;&gt;&gt; </p> <p>\u00a0\u00a0In the last post, I gave a status update for most of what I was doing and why I had been dark for so long. Among the things mentioned was my anticipation for Godot 4.4 which, rather ironically, released within a few hours of after I made that post. So that's nice.</p>"},{"location":"2025/03/06/#godot-44","title":"Godot 4.4","text":"<p>\u00a0\u00a0Most of Godot 4.4's improvements don't affect you as a player, but some do:</p> <ol> <li>The replacement filesystem I wrote (talked about it last post) can now use GD's native temporary file management solution. There is a method to create a new temporary file from an asset in a mod archive so that methods that require access to a file can do so.<ol> <li>This behavior is atypical as most stuff should stream directly. But it's there if anyone needs it.</li> </ol> </li> <li>Mods can now load .wav files dynamically as this capability was added (I would have likely added this manually anyway, since WAV isn't exactly a complicated file format).</li> <li>Godot natively has jiggle bones. I don't know if I will use these, it depends on their performance cost, but they look pretty good already. The main concern (and benefit, honestly) is that like Dynamic Bone, or Physbone if you are a VRChat player, they require explicitly registered colliders and don't use real physics simulation. I, at the very least, want box colliders. The thing is, I want world collision too, including with physical interactions (if you have a tail, it should be able to smack stuff, for example).</li> </ol>"},{"location":"2025/03/06/#progress-on-the-new-file-system-json-handling","title":"Progress on the new File System (JSON Handling)","text":"<p>\u00a0\u00a0In the last blog post, I mentioned my creation of a custom file system called <code>StarFileSystem</code> which is an abstraction layer above Godot's <code>ResourceManager</code> with the key ability to reference assets created by specific mods, even if those assets have been overridden by another mod. This system is extremely important because some mods may have privately implemented assets that shouldn't be overridden.<sup>1</sup></p> <p>\u00a0\u00a0Just recently, I finished the final part of this system, which handles the merging of JSON files. See, loading JSON has problems:</p> <ul> <li>Allowing mods to override each others' JSON files like any other asset is destructive and incompatible. What if the replacement doesn't have data I need (destructive)? What if two mods want to change the file (incompatible)?</li> <li>Merging JSON fixes this mostly, but it's not granular enough. Things like editing specific array items is very hard to do reasonably without tricks and hacks.</li> </ul> <p>\u00a0\u00a0I actually came up with a couple solutions to this, and accompanying specifications for each. Originally I had an idea to work with something like Starbound's .patch files but honestly this solution is kind of bad when multiple mods intermingle with the same file, because it gets messy and unreadable very quickly. That, and some mods may want advanced or custom logic for their own asset files.</p>"},{"location":"2025/03/06/#solution-1-ijsonassetmerger","title":"Solution 1: <code>IJsonAssetMerger</code>","text":"<p> <code>IJsonAssetMerger</code> is an interface which receives an <code>IEnumerable&lt;(StarFileSystem, JContainer)&gt;</code> - the merger implementation can see which mod owns what data (via the filesystem), and the JSON container representing its contents. It is then up to this interface to output a completely merged <code>JContainer</code> or throw an exception where appropriate. The order of these systems is the same as the asset load order, with the original/base file being first and the top level override being last.</p> <p>\u00a0\u00a0Notably, the merger runs at asset query time, not at startup. As with other asset files, it's perfectly valid to query one mod's specific version of the file and bypass the merger entirely. This is an important detail because it means the code querying the JSON file chooses how multiple sources of the same file get merged together. This is very useful for modders which define their own data format, because then they can also choose how to load it when they need to use it.</p>"},{"location":"2025/03/06/#solution-2-ijsonassetmutator","title":"Solution 2: <code>IJsonAssetMutator</code>","text":"<p>\u00a0\u00a0This exists in contrast to the <code>IJsonAssetMerger</code> interface. Unlike its sibling, this interface is controlled by the overriding mod. It's my solution to the mess that is .patch files, and provides a code solution that must be registered by the implementor during startup. Like the merger, it executes on asset query. It's just that these can't be created on the fly like mergers can.<sup>2</sup></p> <p>\u00a0\u00a0Unlike mergers, mutators only get to see the final result of a merge operation. In essence, they perform post-processing on a merged JSON document. This should allow them to be as functional as possible. Similarly to mergers, these will execute by order of registration, which itself depends partly on asset load order.</p> <p>\u00a0\u00a0I'm hoping these two solutions allow mods to reliably and predictably load JSON files and support data merging.</p> <ol> <li> <p>In general, having private assets that ignore the override system is considered poor design and is strongly discouraged. A well-made mod should account for modifications to its own data where reasonably expected. If you look at Minecraft modding, every asset is a resource pack or data pack, and thus everything can be overridden. The ability to have private assets is a privelege!\u00a0\u21a9</p> </li> <li> <p>This is mostly because of an optimization pertaining to how files get recognized. The mutator needs to spit out an array of files or paths (among other options) that it can modify, and to ensure that asset loading remains fast, these results are cached and baked into code designed to work with specific files. Modifying this on the fly would have a negative performance hit, as would simply not having it in favor of dynamically querying mods to ask \"anyone want to modify this before I send it out?\" \u21a9</p> </li> </ol>"},{"location":"2025/03/15/","title":"15 March 2025 - World touchups, Inventories, and Entities","text":"<p>&lt;&lt;&lt; Previous Post</p> <p>You're on the latest post! </p> <p>\u00a0\u00a0Just recently I started on finalizing the inventory system and the entity action system. I may or may not have said these were done in an older post. And they were. Just done incorrectly.</p>"},{"location":"2025/03/15/#inventories","title":"Inventories","text":"<p>\u00a0\u00a0Inventory access is a complicated topic. In The Conservatory, only one thing can ever have access to an inventory at once! This might sound annoying, but it has a lot of benefits too.</p> <ul> <li>Inventories can be multithreaded under this system.</li> <li>Item loss can't happen unless the code throws it away, because items are always precisely tracked.</li> <li>This also fixes item duplication exploits.</li> </ul> <p>\u00a0\u00a0The issue is that one at a time access is slow and it sucks. I need something new, something more powerful and more capable. It was going to have to follow some rules:</p> <ul> <li>Anything that just wants to look at the contents of the inventory, but not change it, (that is, get read-only access) should be allowed to do that at the same time as other read-only accessors.<ul> <li>Metaphorically speaking: Multiple people can be reading text on a phone at the same time. We don't need to take turns reading it, we can all see the screen at the same time.</li> </ul> </li> <li>Anything that wants to change the inventory (add/move items, change stats) needs read-write access which only one thing can have at a time<ul> <li>Metaphorically speaking: Only one person can be typing on a phone at the same time. If you try to have two people type at once, it gets into a mess and everything is ruined.</li> </ul> </li> </ul> <p>\u00a0\u00a0Now I can already hear my fellow C# users: \"Well, that just sounds like ReaderWriterLock\"! you yell at your monitor. And to that I say you are exactly correct!</p> <p>\u00a0\u00a0In fact, this is yet another scenario where I have happened along something basically perfect for what I need:</p> <p><code>ReaderWriterLock</code> works best where most accesses are reads, while writes are infrequent and of short duration. Multiple readers alternate with single writers, so that neither readers nor writers are blocked for long periods.</p> <p>\u00a0\u00a0Inventory access follows this pattern almost 1:1. For this reason, inventories will now make use of this type.</p>"},{"location":"2025/03/15/#entity-actions-episode-what-4-now","title":"Entity Actions (Episode ... what, 4 now?)","text":"<p>\u00a0\u00a0Entity Actions are a system that's kind of new, so I have had to rethink them several times as I watch the game evolve. The previous iteration of the system was pretty solid but fundamentally flawed.</p> <p>\u00a0\u00a0Since by now my regular readers are wondering what the hell is going on and why I have to keep readjusting this system, most of the complexity comes from its defining feature - a feature that I am hellbent on adding - which is stateless actions. I won't reiterate the benefits of this and why I did it - I covered that in past blog posts.</p> <p>\u00a0\u00a0Instead, I'll mention what the big road block is this time: Your actions can change (i.e. picking up an item changes your actions if that item does stuff)! So how do I efficiently keep track of cooldowns? I can't just keep a list of everything, that's a lot of wasted memory especially if there's dozens of actions. I'd need to duplicate that entire list for every item in the game (as in, every item in an inventory slot, not item type) and every entity in the game (again, every entity in the world, not entity type) which you can imagine would waste so much memory.</p> <p>\u00a0\u00a0The current solution is to add some undefined behavior on purpose. The way action overrides work (i.e. by picking up an item) is by a layered system where objects can declare they overwrite actions at a certain priority level. Priority goes in order from Intrinsic (species abilities) \u2192 Item Actions (the things an item does when you use it) \u2192 Special Overrides (forced changes to another action).</p> <p>\u00a0\u00a0Each action set gets its own set of cooldowns for the (up to) five actions within it, and then the cooldown is selected just like the actions are when combining them into the list of actions that you see based on all overrides.</p> <p>\u00a0\u00a0The aforementioned \"undefined behavior\" I have to add is what happens when you edit the action set itself - something you shouldn't be doing anyway (why do you think I designed the layer system?) - and the answer to the question of \"what happens?\" is \"good question!\", hence undefined behavior. I'm not solving that problem for you. Use layers.</p>"},{"location":"2025/03/15/#world-touch-ups","title":"World Touch-Ups","text":"<p>\u00a0\u00a0The world system has gotten some love in lieu of Godot 4.4 adding Jolt Physics natively. I originally had this optimization in an older post, but removed it because it was far too technical. The takeaway is that Jolt can work with a lot of static collisions faster than Godot's native physics can.</p> <p>\u00a0\u00a0One of the biggest changes I have done is abandoning trimesh collisions for blocky terrain (you can still use it elsewhere in custom stuff). This is a huge performance boost to generating chunks because I don't need to build a collision mesh anymore. I also use the low level physics API for this, directly telling the physics engine to add collisions instead of making use of <code>CollisionShape3D</code> in Godot.</p> <p>\u00a0\u00a0Another significant change, albeit a destructive one, is that I have removed wedge shapes for the time being. These are complicated and wreak all sorts of havoc on the physics system. Part of why physics is so much better now is because I only need to use <code>BoxShape3D</code> which is a hell of a lot simpler to compute than a convex hull (not great but not bad) or concave triangle collision mesh (worst by far).</p> <p>\u00a0\u00a0That all aside, it has been a busy week with all these system fixes. Hopefully this is the last of it!</p>"},{"location":"other-lore/isca/","title":"The Interstellar Sapience Congruity Accord (\"Interstellar Accord\", \"Accord\", \"ISCA\")","text":"<p>Nothing on this page is a promised feature or guaranteed to be in the game.</p> <p>If you are seeing this warning bubble, here is a reminder that this project is in early development. Anything you see here is NOT a promise or guarantee. Features on this page WILL BE ADDED, REMOVED, OR CHANGED WITHOUT ANY SORT OF NOTICE. If I find you on twitter.com saying how I \"broke promises\" because you saw something on this page that I removed later, I will point at you and laugh for being a dummy idiot doodoo bref dummy head, a real stinker, perhaps dare I say, a poopyhead even.</p> <p>\u00a0\u00a0The Interstellar Sapience Congruity Accord (ISCA) is an agreement created by the Gaian race as a means of unifying as many known sapient races in the universe as is possible, and providing a set of baseline rights for all sapient beings to ensure their prosperity. </p> <p>\u00a0\u00a0As formal as the ISCA may seem, it's a quite loose organization with relatively simple joining requirements. Specifically, races joining the ISCA must meet the following requirements:</p> <ul> <li>Members must not display malice or contempt for other ISCA members.<ul> <li>This is expected at a government level only. The actions of citizens will not be considered, granted they are handled appropriately.</li> </ul> </li> <li>Members must enforce all ISCA rights and cannot rescind them or create exceptions under any circumstances.<ul> <li>Individuals that request political asylum from the ISCA must be granted this asylum universally under all ISCA members.</li> </ul> </li> <li>Members must positively represent the ISCA and their inclusion as a member.</li> <li>Members do not need a dedicated homeworld; those sharing a world with another species is acceptable.<ul> <li>A species sharing a world with another must have an organized and stable government.</li> </ul> </li> </ul>"},{"location":"other-lore/isca/#history","title":"History","text":"<p>\u00a0\u00a0The ISCA was drafted before Gaia's conception as a means to try to ensure a treaty existed between Earth and Gaia as soon as possible. Unfortunately, this goal never came to fruition, as Earth had been rendered uninhabitable well before the future Gaians had found the world that they would colonize and make into their new home. For context, please see the Gaian race page. In short, Gaians are Humans who left Earth after realizing that it was effectively doomed from issues like climate change and its political environment, choosing to take their chances with space travel.</p> <p>\u00a0\u00a0Despite this unforunate reality, the Gaians still created the ISCA in anticipation of possible alien contact now that interstellar travel was demonstrated to be a reasonable capability. Within the first century of their presence on Gaia, they had surpassed parity with Earth's technological advancements and developed warp technology. The ISCA was now ready to create new relationships with species across the cosmos.</p> <p>\u00a0\u00a0They would not have to wait long to find new races. Turns out, Gaia was on the edge of a star cluster harboring several unique inhabited planets.</p>"},{"location":"other-lore/isca/#member-species","title":"Member Species","text":"<p>\u00a0\u00a0The first species to join the ISCA was the Avelian race. These posh avian people were an already interstellar species that was ecstatic to meet another interstellar species. While they initially found the concept of the ISCA somewhat absurd on the count of how new Gaia was to interstellar warp travel, they realized that it was an outstanding opportunity to create something meaningful in their galactic neighborhood and opted to join. They quickly became a crucial part of its administration. The Avelian also own the XGRF (Cross-Galactic Research Foundation)</p> <p>\u00a0\u00a0The second species to join the ISCA was the Kirivian race. The Kirivians are close allies to the Avelians due to their assistance in saving the Kirivian home world, Numala, from catastrophe. The Kirivians, while warp-capable, were not prepared for the issues their home world would face, and lacked sufficient external colonization to help themselves. While they mostly joined up with the ISCA due to their close friends doing so first, they also saw it as an opportunity to prevent such a disaster from ever happening again.</p> <p>\u00a0\u00a0More races would join or ally with the ISCA through the following couple centuries. In particular, the ISCA found itself among the presence of an extremely diverse assortment of robotic lifeforms, most of which are derivations of their kin with discrete modes of reproduction and component standards. Additionally, many engineered bioforms joined the ISCA, especially those derived from fauna, and occasionally flora, native to the worlds of member races.</p> <p> Note: See \"Fan Content\" section below!</p>"},{"location":"other-lore/isca/#nonmember-species","title":"Nonmember Species","text":"<p>\u00a0\u00a0The Novan race is the only species within the star cluster (and which is in control of their home planet) that has shown a lack of interest in joining the ISCA. They own the NEC (Novan Exploratory Committee), which has allied itself with the ISCA, but otherwise chosen to remain separate from it.</p>"},{"location":"other-lore/isca/#neural-translator","title":"Neural Translator","text":"<p>\u00a0\u00a0One crucial piece of technology for the ISCA is the Neural Translator. This is an advanced neural network designed to recognize patterns in language to form reliable translations on the fly in real-time. Everybody speaks their own language, and everybody else understands. It is also equipped to understand new languages in as little time as possible.</p> <p>\u00a0\u00a0The system is designed to operate on all existing environmental context (for example, if two ships meet, what did they do before starting communication?) as well as known patterns throughout linguistics that various races tend to follow. It will perform several types of analysis in parallel to try to understand a new language as quickly as possible. It can fortify its knowledge through literature and spoken audio.</p>"},{"location":"other-lore/isca/#fan-content-and-mods","title":"Fan Content and Mods","text":"<p>This section is a bit meta!</p> <p>This isn't lore. It's more of an author's note.</p> <p>\u00a0\u00a0Understandably, a lot of people who interact with this game are the kind of people who love to make fan content. Here is me telling you that you are allowed to make your own species be members of (or allies of) the ISCA. Seriously, go right ahead! I love it when people feel like they can integrate and be a part of my story. I literally left it open ended and easy to get in for this exact purpose. I want your creative little self-inserts and fanons!</p> <p>\u00a0\u00a0For example...</p> <p>\u00a0\u00a0A small part of the Avali community has shown an interest in the game. For this reason, I gave my thanks in the form of (hopefully<sup>1</sup>) allowing Scratch to be used in-game. Additionally, some stuff such as the ability for a <code>Species</code> object in game code to declare native temperatures/pressures that are survivable came from realizing someone might want to mod it in.</p> <p>Hello, Avalikin.\"Hello, Avalikin.\"</p> <p>\u00a0\u00a0And...</p> <p>\u00a0\u00a0My request to use Akolouthos (often just called \"Ako\") in-game was accepted. This is something used in Antiheat's universe (which I mark as a source of inspiration over on the About page). This one is particularly interesting; it is a vertical typeface designed for use by synethetic (robotic) races. It can still be read manually if you know the symbols. Typically, typed phrases do their best to remain square. Each glyph is square as well. This is a 4x4, with two characters overflowing to the right:</p> <p>HELLO, SYNTHETICS.\"Hello, Synthetics.\" HELLO, SYNTHETICS.This way \u2192 I actually really like this mode of writing, because it just looks like a proper datablock. It almost intuitively feels like something that is easily usable for robotic species, hence why I was so excited to try to use it.\"I actually really like this mode of writing, because it just looks like a proper datablock. It almost intuitively feels like something that is easily usable for robotic species, hence why I was so excited to try to use it.\"</p> <ol> <li> <p>This may not actually be included. I will need to make my own font for Avali Scratch because all of the ones I can find online are CC-*-NC, thus my game is disqualified (because I sell it commercially). And then, on top of this, I don't know if I have permission from the species's creator to include it natively. Even if the de facto use of the species is entirely public and open source, the de jure usage is vague. I'm selling this game and making a profit, the last thing I want to do is get into some lawsuit because the CEO of space birds doesn't like me doing that.The game's mod loader will allow for loading custom fonts in though, so if worse comes to worst, you can just add it yourself.\u00a0\u21a9</p> </li> </ol>"},{"location":"other-lore/story-overview/","title":"Overview","text":"<p>Nothing on this page is a promised feature or guaranteed to be in the game.</p> <p>If you are seeing this warning bubble, here is a reminder that this project is in early development. Anything you see here is NOT a promise or guarantee. Features on this page WILL BE ADDED, REMOVED, OR CHANGED WITHOUT ANY SORT OF NOTICE. If I find you on twitter.com saying how I \"broke promises\" because you saw something on this page that I removed later, I will point at you and laugh for being a dummy idiot doodoo bref dummy head, a real stinker, perhaps dare I say, a poopyhead even.</p> <p>\u00a0\u00a0For obvious reasons, I will not be telling you the plot outline verbatim. Not only is it subject to change as mentioned above, but it's also fairly internal right now! So while this may be what is on my storyboard, it may not be what happens in game.</p>"},{"location":"other-lore/story-overview/#exposition","title":"Exposition","text":"<p>\u00a0\u00a0The player begins the game in what seems to be a dream or a daze. They are in some facility, there's alarms blaring, things are up in flames, but there's nobody there! Fire suppression seems to be failing or missing, and the player can't help but to notice a sigil drawn repeatedly all over the walls, ceiling, and floor.</p> <p>\u00a0\u00a0The player has to find an escape, running through a set of halls that aren't (yet) on fire. As they move on, strange distortions seem to be occurring in reality itself, as if someone is trying to rip apart the fabric of spacetime. Eventually, the player enters the facility's main core, the home of its hyper-advanced computer. It's a large, circular room with a pillar in the center, the pillar is the computer. There is an avian figure in the room, shadowy, almost holographic. They are ripping the room to shreds, but it's impossible to tell why or what they may be feeling. A switch is highlighted on the pillar, some sort of emergency shutoff maybe, the player doesn't know. The player is encouraged to run to it without any other option. The avian does not care until they interact with the button, stopping the player before grabbing them and throwing them into one of the tears in spacetime.</p> <p>\u00a0\u00a0Cut to black, then fade in. The player will wake up on the ground of a biocompatible world (* for their species). It will be dusk. Their pilot suit will be mostly offline, rubble from a personal ship nearby. They won't know how they got there, what happened, if their dream was real or fake. As they make their way to their ship to get emergency survival tools, they see that the black box is missing! As they reach down to pick up the supplies, they notice something around the neck of their suit: A small talisman, with that sigil they saw in the dream inscribed on it. They can't take it off of their person, trying to discard it just places it back onto them (no, it doesn't take an inventory slot). Thankfully, they can take it off, but so long as they intend to keep it.</p> <p>\u00a0\u00a0As they look to the coming night sky above, they realize that there are no known star patterns. They don't recognize any of it, and without the ship in working condition, they can't use the navigational computer. Not only do they have no idea what really happened, but they are stranded in what might very well be uninhabited space. They'll need to set up a place to live, it's gonna be a long, long time...</p>"},{"location":"other-lore/story-overview/#notes","title":"Notes","text":"<p>This exposition is a huge part of the story. I'm excited being able to tell people about it's very loose and vague idea, because myself and RWGryphon (see the credits) have put a lot of thought into this.</p>"},{"location":"other-lore/units/","title":"Units in The Conservatory","text":"<p>\u00a0\u00a0I love my sci-fi to be at least reasonably coherent. No sci-fi can be perfect - if it were, there would be no \"fi\" in the phrase. Still, people love it when it seems coherent enough and makes intuitive sense.</p> <p> While the game will usually measure in your choice of Metric or Imperial units, I have also included in-universe custom units called Interstellar Standard Units, based off of cosmological constants, which you can use if you are feeling particularly daring.</p>"},{"location":"other-lore/units/#the-interstellar-standard-unit-system","title":"The Interstellar Standard Unit System","text":""},{"location":"other-lore/units/#real-world-universal-constants-as-seen-in-the-conservatory","title":"Real World Universal Constants, as seen in The Conservatory","text":"<p> First, some background lore from real life. In 2019, all of our standard units of measurement (SI units) were modified to be built upon Universal Constants. These are constants based on the laws of physics themselves. This boasts several real world benefits to the way we measure things!</p> <ol> <li>The values can never become inaccurate or change over time. They can only become more precise. The speed of light will always be exactly 299792458 meters per second in a vacuum, for instance, and this is a truth of reality that can not be changed.</li> <li>These values are the same everywhere in the universe<sup>1</sup>, which means if we ever encounter aliens, these units are universal. We can tell an alien that a meter is a certain amount of Planck lengths (one of these universal constants) and even if they have no clue what a meter is, they can figure that out on their own!</li> </ol> <p>\u00a0\u00a0Turns out this is awesome for writing stories too, like The Conservatory's lore.</p> <p>\u00a0\u00a0The Conservatory uses real world Universal Constants, however it assumes completely precise values exist<sup>2</sup>. The math is the same as the real world, with the exact values for Planck's constant and the Boltzmann constant. The Planck length is treated as exactly \\(1.616255\\times10^{-35}\\) meters. Other universal constants (Length, Mass, Temperature, Time, G) can be calculated from all of these.</p> <p>\u00a0\u00a0When calculating the values in-game, please impolitely discard preservation of significant figures. The game's math doesn't care about them, and since we aren't doing real physics or science here, it doesn't really matter.</p>"},{"location":"other-lore/units/#what-are-the-game-units","title":"What are the game units?","text":"<p>Don't overwhelm yourself!</p> <p>There's a lot of information here, but you probably don't need it all! If you are just looking for how to use these numbers when writing stories or dialogue, skip to the next section after the data tables below.</p> <p>\u00a0\u00a0Here's the raw units. If you want to know how to write stories using these, see the next section.</p> Usage Name Abbreviation Value Measurement Length Stride \\(st\\) \\(\\ell_P\\times2^{112}\\) \\(\\text{1 st}\\approx0.08392\\) meters Length Sprint \\(sp\\) \\(\\mathsf{stride}\\times2^{16}\\) \\(\\text{1 sp}\\approx5499.78\\) meters Time Tempora \\(tm\\) \\(t_P\\times2^{144}\\) \\(\\text{1 tm}\\approx1.202288\\) seconds Time Hold \\(hl\\) \\(\\mathsf{tempora}\\times64\\) \\(\\text{1 hl}\\approx1.28\\) minutes Time Octholds \\(oct\\) \\(\\mathsf{hold}\\times64\\) \\(\\text{1 oct}\\approx1.36\\) hours Time Cycle \\(cy\\) \\(\\mathsf{tempora}\\times2^{16}\\)\\(\\mathsf{octhold}\\times16\\) \\(\\text{1 cy}\\approx21.887\\) hours\\(\\text{1 cy}=16\\) octhold Time Sequence \\(se\\) \\(\\mathsf{cycle}\\times512\\) \\(\\text{1 se}\\approx1.28\\) years Temperature Thermo \\(th\\) \\(T_P\\times2^{-108}\\) \\(\\text{1 th}\\propto0.43658\\) Kelvin Temperature Plasma \\(pl\\) \\(\\mathsf{thermo}\\times2^{16}\\) \\(\\text{1 pl}\\propto28611.72873\\) Kelvin Mass Fulcra \\(fl\\) \\(m_P\\times2^{24}\\) \\(\\text{1 fc}\\approx0.3651\\) kilograms Mass Cargo Fulcra \\(flc\\) \\(\\mathsf{fulcra}\\times2^{16}\\) \\(\\text{1 flc}\\approx23930.149\\) kilograms - - - - - Velocity Warp \\(W\\) \\(c\\)\\(\\mathsf{strides}\\times \\frac{{299792458\\text{ m}}}{1.202288\\mathsf{\\text{ s}}}\\) \\(\\text{1 W} = c\\)\\(\\approx20925774.675254\\) st/tm"},{"location":"other-lore/units/#real-world-units-used-above","title":"Real World Units Used Above","text":"Name Abbreviation Value Meaning Planck length \\(\\ell_P\\) \\(=1.616255\\times10^{-35}\\) meters Smallest measurable length allowed by the laws of physics. Planck time \\(t_P\\) \\(\\approx5.391246366844892\\times10^{-44}\\) seconds The amount of time it takes to travel \\(\\text{1 }\\ell_P\\) at the speed of light \\(c\\). Planck temperature \\(T_P\\) \\(\\approx1.41678418\\times10^{32}\\) Kelvin Maximum allowed temperature by the laws of physics. Planck mass \\(m_P\\) \\(\\approx2.17643437560\\times10^{-8}\\) kilograms Odd one out. Less of an obvious meaning than the others, with no good analogy."},{"location":"other-lore/units/#advice-for-writers","title":"Advice for Writers","text":"<p>\u00a0\u00a0Numbers are based on powers of two. Instead of numbers like 5, 10, or 100, our interstellar citizens really enjoy 2, 4, 8, 16, 32, 64, so forth.</p>"},{"location":"other-lore/units/#time","title":"Time","text":"<p>\u00a0\u00a0Sorry, I lied. You'll have to look at the table above (the bigger one) to learn what these units are.</p> <ul> <li>Try these quick substitutions for our common phrases (these are not mathematically correct!):<ul> <li>\"Just a few seconds\" =&gt; \"Count a few tempora\"</li> <li>\"Give me 5 mintues\" =&gt; \"Give me 4 holds\"</li> <li>\"... 15 minutes\" =&gt; \"... 16 holds\"</li> <li>\"30 minutes\" =&gt; \"32 holds\"</li> <li>\"60 minutes\" =&gt; \"64 holds\" (Like in person, rarely used but still valid.)</li> <li>\"An hour\" =&gt; \"1 octhold\"</li> <li>\"12 hours\" =&gt; \"8 octholds\"</li> <li>\"24 hours\" =&gt; \"16 octholds\" (Like in person, rarely used but still valid.)</li> <li>\"A day\" =&gt; \"A cycle\"</li> <li>\"A year ago\" =&gt; \"A sequence ago\"</li> <li>\"A decade ago\" =&gt; \"8 sequences ago\"</li> <li>\"A century ago\" =&gt; \"64 sequences ago\" (this is 80 years, not 100, but colloquially it's used the same way)</li> </ul> </li> </ul> <p> There is an analogue to Star Trek's Stardate system used by this game. It uses a unit of time measured since the foundation of the ISCA</p> Sequence . Cycle / Whole Octholds Fewest digits (Sequence) (dot) Three digits (Cycle, 000-511) (forward slash) Four Digits (whole holds, 0000-1023) <p>Example: <code>1.442/0965</code> is 1 sequence + 442 cycles + 15 octholds (960 holds) + 5 holds Could be thought of as \"2 years, 100-some days, at 22:47\" (n.b. this is me eyeballing it and is not accurate)</p> <ol> <li> <p>Shhh.. Shhh. Yes. I know. It's more important that people understand even if some nuance is left out with respect to relativity and whatnot.\u00a0\u21a9</p> </li> <li> <p>These values normally have some margin for error due to quantum mechanics preventing you from actually measuring something with 100% accuracy. The Universe doesn't particularly enjoy being snooped in on. The game throws this limitation away because it makes things very hard to work with!\u00a0\u21a9</p> </li> </ol>"},{"location":"other-lore/characters/conservator/","title":"The Celestine Conservator","text":"<p>Nothing on this page is a promised feature or guaranteed to be in the game.</p> <p>If you are seeing this warning bubble, here is a reminder that this project is in early development.</p> <p>Content you see here is in a constant state of change. NOTHING here a promise or guarantee of a feature in the game. Things change.</p>"},{"location":"other-lore/characters/conservator/#overview","title":"Overview","text":"<p>\u00a0\u00a0The Celestine Conservator is the titular character of the game, and a divine figure in the universe. It is a rather short (~1.2m) white marble statue. Pictures are included below.</p> <p>\u00a0\u00a0Its head shape has yet to be really decided, there's two designs, one with a flat panel, the other with a ring.</p> <p>Disclaimer: The sound effect in this video is not present in the game.</p> <p>This is actually an ambient sound from No Man's Sky. I just have it in this video to help set the mood.</p>  Your browser does not support the video tag.  <p>ALT: A variation of the character model for The Celestine Conservator. It is a short figure made of white marble. There is no ground it is standing on, instead only an open sky. The sky is bright white on the bottom, and blue on the top. It is standing without animation, in its A-pose. The viewer first zooms into the head, an almost circular ring of white marble that is cut down the middle. A wisp is positioned inside of the hole of the ring, a bright cyan ball of light with swirling lines within it. The camera then moves backwards, and rotates around its torso, showing off an effect present on the armor and head wherein bright blue stars are visible within some of the surface. The right arm of The Conservator is a long, thin sword which has replaced its forearm. The stars change angle as the viewer moves, as if the viewer were looking through a portal. The viewer finally moves down to the legs and waist, showing off the marble material's slight colorations for varying parts of the body.</p> <p>\u00a0\u00a0The original head shape - a flat panel - also looks very appealing. Here is the original design of The Conservator before I made its armor.</p> <p> </p>"},{"location":"other-lore/characters/conservator/#character-story","title":"Character Story","text":"<p>\u00a0\u00a0The Conservator is one of those characters purposely left vague. It is almost a god. While it has the power of creation, it is not absolute; it does not see and know all, it is not omnipotent. This puts it in an interesting place where it may still operate on what feelings it chooses to allow itself to have, and may make decisions without knowledge of the consequences of any given action.</p> <p>\u00a0\u00a0It has its own little world, a vast, blank, white expanse (a bit like the video above) with buildings and creatures made from the same four materials - white marble, gold, silver, glass, and the blue wispy soul energy. It resides in a small temple, swimming around the air, looking at the constellations in its hand, occasionally toying with creation. </p> <p>\u00a0\u00a0The context in which the player is able to find it is not something I'll cover, because that's a spoiler. Still, when the player does eventually find it, it doesn't seem to care for their presence at all. That is, until one moment, where it briefly looks up at the player, and gives them something...</p> <p>\u00a0\u00a0What did the player receive? Play the game to find out!</p>"},{"location":"other-lore/characters/conservator/#design-inspiration","title":"Design Inspiration","text":"<p>\u00a0\u00a0There were two people who significantly affected the design of The Conservator, and I need to give credit where it's due.</p>"},{"location":"other-lore/characters/conservator/#inspiration-the-bishop","title":"Inspiration: The Bishop","text":"<p>\u00a0\u00a0An old friend of mine who went (or, goes?) by Mercury had designed a really awesome model, this really big alien/robot thing. It was a deep violet in color, with orange lines. It held a golden orb that looked like a depiction of an atom. Its body almost looked like Forerunner tech out of Halo.</p> <p>\u00a0\u00a0It was this model that inspired the pose I use in the four images, though The Conservator holds an orb in its left hand rather than the right hand.</p> <p> </p>"},{"location":"other-lore/characters/conservator/#kavikis-redesign-of-ani","title":"Kaviki's redesign of Ani","text":"<p>\u00a0\u00a0The person deserving of a significant amount of credit is Kaviki. Years ago I used to work on a Roblox game called Creatures of Sonaria. My dev species is called \"Ani\", and it is something from the same lore of this game, an older, long-obsolete creature. On occasion, the owners of Sonaria will choose to redesign older creature models as the game evolves and better artists are hired. When they do this, they (used to?) seek the community for artists willing to give up their designs to the game in exchange for a payment.</p> <p>\u00a0\u00a0Kaviki was one of the artists that wanted to try to shoot their shot and get their design into the game. It was ultimately not selected. Now the thing is, I had actually not seen Kaviki's design until after the selection was made, and as horrible as it might be for me to say this, I am actually glad it wasn't selected.</p> <p> </p> <p>\u00a0\u00a0You see, at the time I saw it, I was going through a bit of an identity crisis, riddled with mental complications and depression, still rebuilding myself after past drama. I had an idealized image of myself, this blank, expressionless thing. A feeling, an idea... And then Kaviki's design was thrown into my DMs by a friend who still played the game. It didn't even take a second, I looked at it, and said \"That's the one\". Actually, that doesn't do my reaction justice. It was so perfect to me that I made the original Conservator model (shown in the four pictures above) in less than a day. That's how significant it was to me. I have both ADHD and autism, so my focus is ordinarily terrible. You can connect the dots by now I am sure.</p> <p>\u00a0\u00a0I am cutting out a huge chunk of detail, but the important part is the end result after I had help finding the artist to contact them. We had talked, and eventually I paid for the adoption of this design. It became, properly, mine. Even though The Conservator right now is not very similar to the original design (save for its body profile), it would be horrible of me to not put a shoutout to Kaviki here. If you are reading this, here is yet another thank you, and a reminder for just how important your design is to me.</p>"},{"location":"other-lore/characters/librarian/","title":"The Librarian","text":"<p>Nothing on this page is a promised feature or guaranteed to be in the game.</p> <p>If you are seeing this warning bubble, here is a reminder that this project is in early development.</p> <p>Content you see here is in a constant state of change. NOTHING here a promise or guarantee of a feature in the game. Things change.</p> <p>\u00a0\u00a0The Librarian is an AI construct that runs within all space stations designed by The United Coalition. As its name implies, it is responsible for information gathering and access, and provides a vast array of resources to interstellar travellers and personnel alike.</p>"},{"location":"races/avelian/","title":"Playable Races: Avelian","text":"<p>Nothing on this page is a promised feature or guaranteed to be in the game.</p> <p>If you are seeing this warning bubble, here is a reminder that this project is in early development. Anything you see here is NOT a promise or guarantee. Features on this page WILL BE ADDED, REMOVED, OR CHANGED WITHOUT ANY SORT OF NOTICE. If I find you on twitter.com saying how I \"broke promises\" because you saw something on this page that I removed later, I will point at you and laugh for being a dummy idiot doodoo bref dummy head, a real stinker, perhaps dare I say, a poopyhead even.</p> <p>Information recently trimmed</p> <p>I am focusing on lore for the game, meaning things are in a constant state of flux. Cultural values and other relevant information of the sort have been removed from the page. They will be re-added at a later date. Sorry!</p> <p>This document written in-character, as if you were reading a manifest from the game's lorebook.</p>"},{"location":"races/avelian/#key-overview","title":"Key Overview","text":"Attribute Associated Information Home World Avos (Navilius System (F3V), Planet \u2116 2) Propagation Technique Multi-Faceted Sexual Reproduction Average Height 1.2m Average Mass 30kg Average Lifespan 72.2 Years"},{"location":"races/avelian/#overview","title":"Overview","text":""},{"location":"races/avelian/#phenotype","title":"Phenotype","text":""},{"location":"races/gaian/","title":"Playable Races: Gaian","text":"<p>Nothing on this page is a promised feature or guaranteed to be in the game.</p> <p>If you are seeing this warning bubble, here is a reminder that this project is in early development. Anything you see here is NOT a promise or guarantee. Features on this page WILL BE ADDED, REMOVED, OR CHANGED WITHOUT ANY SORT OF NOTICE. If I find you on twitter.com saying how I \"broke promises\" because you saw something on this page that I removed later, I will point at you and laugh for being a dummy idiot doodoo bref dummy head, a real stinker, perhaps dare I say, a poopyhead even.</p> <p>Information recently trimmed</p> <p>I am focusing on lore for the game, meaning things are in a constant state of flux. Cultural values and other relevant information of the sort have been removed from the page. They will be re-added at a later date. Sorry!</p> <p>This document written in-character, as if you were reading a manifest from the game's lorebook.</p>"},{"location":"races/gaian/#key-overview","title":"Key Overview","text":"Attribute Associated Information Home World Gaia (Sol II System (G2V), Planet \u2116 4) Propagation Technique Sexual Reproduction (Male/Female), Live birth Average Height 1.5m Average Mass 62kg Average Lifespan 92.2 Years"},{"location":"races/gaian/#overview","title":"Overview","text":"<p>\u00a0\u00a0Gaians are descendants of the Human species of the planet Earth. They are responsible for the foundation of the Interstellar Sapience Congruity Accord (ISCA) and are much more docile and unified than their ancestors. They are mostly bald, endoskeletal bipeds, which exhibit particularly high intelligence.</p>"},{"location":"races/gaian/#phenotype","title":"Phenotype","text":"<p>\u00a0\u00a0Gaian anatomy is effectively the same as Human anatomy with a few changes.</p> <p>\u00a0\u00a0Gaians still have two primary types of hair, vellus (the thin, almost invisible kind that covers their entire body) and terminal (the large, thicker, visible hair, such as that on their legs, face, or head). Hair colors are typically brown in shade, with varying lightness, ranging from bright colors like pale gray, to dark colors like brown or black. Orange hair, which was a rare trait in some Humans, was not passed down to Gaians.</p> <p>\u00a0\u00a0Gaian eyes follow typical Human eye colors (green, brown, black, hazel, blue) but a mutation has caused rare occurrences of bright gray to occur. The sclera still remains completely white, and their pupils round. Unfortunately, there are no known natural Gaians who have 20:20 eyesight; the distribution among individuals with refractive error still remains roughly the same as it was with Humans, with a majority of individuals being nearsighted. Technology is often used to correct eyesight however, so eyeglasses are not common, considered to be more of a fashion statement rather than a useful tool.</p> <p>\u00a0\u00a0Gaian appendages still follow the standard vertibrate model, with four fingers and a thumb. Gaian feet have evolved to discard their four smaller toes, though the bone structure still remains the same, giving their feet a \"sock in a sandal\" look. Height remains relatively the same as their predecessors, with an average height of 1.5m.</p> <p>\u00a0\u00a0The Gaian respiratory system is still the same, with two lungs which perform respiration through capillaries in the alveoli. The trachea is connected to the upper esophagus, and much like their predecessors, they are occasionally prone to inhaling food and drink as a result of their significantly shifted larynx (voice box).</p> <p>\u00a0\u00a0The Gaian digestive system is also largely the same, however they do not have genetic disorders like diabetes in their genone. Additionally, Gaians still have an intestinal microbiome, but it has changed fairly significantly, with a stronger dependence on microbes for processing. It has changed so much in fact, that gaians have discussed the topic of being classified as symbiotes in the near evolutionary future as a very real possibility.</p>"},{"location":"races/human2/","title":"\ueb4f\ueb4b\ueb40\ueb58\ueb40\ueb41\ueb4b\ueb44 \ueb51\ueb40\ueb42\ueb44\ueb52: \ueb47\ueb54\ueb4c\ueb40\ueb4d","text":"<p>\ueb53\ueb47\ueb48\ueb52 \ueb43\ueb4e\ueb42\ueb54\ueb4c\ueb44\ueb4d\ueb53 \ueb48\ueb52 \ueb48\ueb4d\ueb53\ueb44\ueb4d\ueb43\ueb44\ueb43 \ueb45\ueb4e\ueb51 \ueb53\ueb47\ueb44 \ueb51\ueb44\ueb42\ueb48\ueb4f\ueb48\ueb44\ueb4d\ueb53\ueb52 \ueb44\ueb55\ueb44\ueb51\ueb5f</p> <p>\ueb45\ueb4e\ueb51 \ueb40 \ueb4b\ueb4e\ueb42\ueb40\ueb4b\ueb48\ueb59\ueb44\ueb43 \ueb55\ueb40\ueb51\ueb48\ueb40\ueb53\ueb48\ueb4e\ueb4d, \ueb48\ueb4d\ueb42\ueb4b\ueb54\ueb43\ueb48\ueb4d\ueb46 \ueb55\ueb40\ueb51\ueb48\ueb40\ueb53\ueb48\ueb4e\ueb4d\ueb52 \ueb48\ueb4d \ueb58\ueb4e\ueb54\ueb51 \ueb4d\ueb40\ueb53\ueb48\ueb55\ueb44 \ueb4b\ueb40\ueb4d\ueb46\ueb54\ueb40\ueb46\ueb44, \ueb4d\ueb40\ueb55\ueb48\ueb46\ueb40\ueb53\ueb44 \ueb53\ueb4e \ueb53\ueb47\ueb44 \ueb4d\ueb44\ueb40\ueb51\ueb44\ueb52\ueb53 \ueb40\ueb4b\ueb4b\ueb48\ueb44\ueb43 \ueb52\ueb4f\ueb40\ueb42\ueb44 \ueb52\ueb53\ueb40\ueb53\ueb48\ueb4e\ueb4d \ueb40\ueb4d\ueb43 \ueb51\ueb44\ueb50\ueb54\ueb44\ueb52\ueb53 \ueb40\ueb52\ueb52\ueb48\ueb52\ueb53\ueb40\ueb4d\ueb42\ueb44 \ueb45\ueb51\ueb4e\ueb4c \ueb53\ueb47\ueb44 \ueb4b\ueb48\ueb41\ueb51\ueb40\ueb51\ueb48\ueb40\ueb4d\ueb5f</p>"},{"location":"races/human2/#_2","title":"\ueb4a\ueb44\ueb58 \ueb4e\ueb55\ueb44\ueb51\ueb55\ueb48\ueb44\ueb56","text":"\ueb40\ueb53\ueb53\ueb51\ueb48\ueb41\ueb54\ueb53\ueb44 \ueb40\ueb52\ueb52\ueb4e\ueb42\ueb48\ueb40\ueb53\ueb44\ueb43 \ueb48\ueb4d\ueb45\ueb4e\ueb51\ueb4c\ueb40\ueb53\ueb48\ueb4e\ueb4d \ueb47\ueb4e\ueb4c\ueb44 \ueb56\ueb4e\ueb51\ueb4b\ueb43 Earth (Sol \ueb52\ueb58\ueb52\ueb53\ueb44\ueb4c (G2V), \ueb4f\ueb4b\ueb40\ueb4d\ueb44\ueb53 3) \ueb4f\ueb51\ueb4e\ueb4f\ueb40\ueb46\ueb40\ueb53\ueb48\ueb4e\ueb4d \ueb53\ueb44\ueb42\ueb47\ueb4d\ueb48\ueb50\ueb54\ueb44 \ueb52\ueb44\ueb57\ueb54\ueb40\ueb4b \ueb51\ueb44\ueb4f\ueb51\ueb4e\ueb43\ueb54\ueb42\ueb53\ueb48\ueb4e\ueb4d (\ueb4c\ueb40\ueb4b\ueb44/\ueb45\ueb44\ueb4c\ueb40\ueb4b\ueb44), \ueb4b\ueb48\ueb55\ueb44 \ueb41\ueb48\ueb51\ueb53\ueb47 \ueb40\ueb55\ueb44\ueb51\ueb40\ueb46\ueb44 \ueb47\ueb44\ueb48\ueb46\ueb47\ueb53 1.7m \ueb40\ueb55\ueb44\ueb51\ueb40\ueb46\ueb44 \ueb4c\ueb40\ueb52\ueb52 62kg \ueb40\ueb55\ueb44\ueb51\ueb40\ueb46\ueb44 \ueb4b\ueb48\ueb45\ueb44\ueb52\ueb4f\ueb40\ueb4d 78.5 years"},{"location":"races/human2/#_3","title":"\ueb47\ueb48\ueb52\ueb53\ueb4e\ueb51\ueb58","text":"<p>\ueb47\ueb4e\ueb4d\ueb44\ueb52\ueb53\ueb4b\ueb58 \ueb53\ueb47\ueb48\ueb52 \ueb52\ueb47\ueb48\ueb53\ueb4f\ueb4e\ueb52\ueb53 \ueb48\ueb52 \ueb44\ueb4b\ueb40\ueb41\ueb4e\ueb51\ueb40\ueb53\ueb44 \ueb44\ueb4d\ueb4e\ueb54\ueb46\ueb47 \ueb40\ueb52 \ueb48\ueb53 \ueb48\ueb52\ueb5f \ueb48 \ueb40\ueb4c \ueb4d\ueb4e\ueb53 \ueb56\ueb51\ueb48\ueb53\ueb48\ueb4d\ueb46 \ueb47\ueb48\ueb52\ueb53\ueb4e\ueb51\ueb58\ueb5f \ueb4e\ueb4d\ueb53\ueb4e \ueb53\ueb47\ueb44 \ueb4c\ueb44\ueb4c\ueb44\ueb52, \ueb4f\ueb4b\ueb44\ueb40\ueb52\ueb44\ueb5f</p>"},{"location":"races/human2/#_4","title":"\ueb42\ueb54\ueb4b\ueb53\ueb54\ueb51\ueb44","text":"<p>\ueb48\ueb4d \ueb53\ueb47\ueb48\ueb52 \ueb4f\ueb4e\ueb52\ueb53 \ueb48 \ueb56\ueb48\ueb4b\ueb4b \ueb41\ueb44 \ueb53\ueb40\ueb4b\ueb4a\ueb48\ueb4d\ueb46 \ueb40\ueb41\ueb4e\ueb54\ueb53 \ueb53\ueb47\ueb44 \"Human\" \ueb51\ueb40\ueb42\ueb44\ueb5f \ueb53\ueb47\ueb44\ueb58 \ueb4e\ueb51\ueb48\ueb46\ueb48\ueb4d\ueb40\ueb53\ueb44 \ueb45\ueb51\ueb4e\ueb4c \ueb40 \ueb52\ueb4c\ueb40\ueb4b\ueb4b \ueb4f\ueb4b\ueb40\ueb4d\ueb44\ueb53 \ueb42\ueb40\ueb4b\ueb4b\ueb44\ueb43 \"Earth\"\ueb5f </p> <ul> <li>\ueb53\ueb47\ueb44\ueb58 \ueb40\ueb51\ueb44 \ueb47\ueb48\ueb46\ueb47\ueb4b\ueb58 \ueb48\ueb4d\ueb52\ueb54\ueb45\ueb45\ueb44\ueb51\ueb40\ueb41\ueb4b\ueb44</li> <li>\ueb43\ueb44\ueb52\ueb4f\ueb48\ueb53\ueb44 \ueb47\ueb4e\ueb56 \ueb4b\ueb4e\ueb4d\ueb46 \ueb53\ueb47\ueb44\ueb58 \ueb47\ueb40\ueb55\ueb44 \ueb44\ueb57\ueb48\ueb52\ueb53\ueb44\ueb43, \ueb53\ueb47\ueb44\ueb58 \ueb52\ueb44\ueb44\ueb4c \ueb54\ueb4d\ueb40\ueb41\ueb4b\ueb44 \ueb53\ueb4e \ueb52\ueb53\ueb4e\ueb4f \ueb45\ueb48\ueb46\ueb47\ueb53\ueb48\ueb4d\ueb46 \ueb4e\ueb55\ueb44\ueb51 \ueb44\ueb40\ueb42\ueb47 \ueb4e\ueb53\ueb47\ueb44\ueb51 \ueb44\ueb55\ueb44\ueb4d \ueb56\ueb47\ueb44\ueb4d \ueb53\ueb47\ueb44 \ueb53\ueb47\ueb51\ueb44\ueb40\ueb53 \ueb53\ueb47\ueb44\ueb58 \ueb40\ueb51\ueb46\ueb54\ueb44 \ueb4e\ueb55\ueb44\ueb51 \ueb48\ueb52 \ueb44\ueb57\ueb48\ueb52\ueb53\ueb44\ueb4d\ueb53\ueb48\ueb40\ueb4b\ueb5f</li> <li>\ueb53\ueb47\ueb44\ueb58 \ueb55\ueb40\ueb4b\ueb54\ueb44 \ueb4c\ueb40\ueb53\ueb44\ueb51\ueb48\ueb40\ueb4b\ueb52 \ueb52\ueb4e \ueb44\ueb57\ueb53\ueb44\ueb4d\ueb52\ueb48\ueb55\ueb44\ueb4b\ueb58 \ueb53\ueb47\ueb40\ueb53 \ueb53\ueb47\ueb44\ueb58 \ueb47\ueb40\ueb55\ueb44 \ueb4f\ueb47\ueb51\ueb40\ueb52\ueb44\ueb52 \ueb52\ueb54\ueb42\ueb47 \ueb40\ueb52 \"I have to go to work.\"\ud83d\udc7d\ud83e\udd23\ud83e\udd23</li> <li>\ueb52\ueb4e\ueb42\ueb48\ueb40\ueb4b\ueb4b\ueb58 \ueb51\ueb44\ueb49\ueb44\ueb42\ueb53\ueb44\ueb43 \ueb4e\ueb51 \ueb43\ueb44\ueb51\ueb40\ueb4d\ueb46\ueb44\ueb43 \ueb48\ueb4d\ueb43\ueb48\ueb55\ueb48\ueb43\ueb54\ueb40\ueb4b\ueb52 \ueb51\ueb44\ueb46\ueb54\ueb4b\ueb40\ueb51\ueb4b\ueb58 \ueb55\ueb48\ueb52\ueb48\ueb53 \ueb40 \ueb52\ueb48\ueb53\ueb44 \ueb4e\ueb45\ueb53\ueb44\ueb4d \ueb51\ueb44\ueb45\ueb44\ueb51\ueb51\ueb44\ueb43 \ueb53\ueb4e \ueb40\ueb52 \ueb53\ueb56\ueb48\ueb53\ueb53\ueb44\ueb51\ueb5f</li> </ul> <p>\ueb53\ueb47\ueb44 \ueb42\ueb54\ueb4b\ueb53\ueb54\ueb51\ueb44\ueb52 \ueb45\ueb4e\ueb54\ueb4d\ueb43 \ueb4e\ueb4d \ueb53\ueb47\ueb44\ueb48\ueb51 \ueb56\ueb4e\ueb51\ueb4b\ueb43 \ueb40\ueb51\ueb44 \ueb51\ueb48\ueb42\ueb47, \ueb41\ueb54\ueb53 \ueb40 \ueb4b\ueb40\ueb51\ueb46\ueb44 \ueb4f\ueb40\ueb51\ueb53 \ueb4e\ueb45 \ueb53\ueb47\ueb44 \ueb4f\ueb4e\ueb4f\ueb54\ueb4b\ueb40\ueb53\ueb48\ueb4e\ueb4d \ueb50\ueb54\ueb4e\ueb53\ueb44\ueb52 \ueb52\ueb53\ueb51\ueb40\ueb4d\ueb46\ueb44 \ueb51\ueb44\ueb45\ueb44\ueb51\ueb44\ueb4d\ueb42\ueb44\ueb52 \ueb52\ueb54\ueb42\ueb47 \ueb40\ueb52 \"The Bite of '87\", \ueb56\ueb47\ueb48\ueb42\ueb47 \ueb51\ueb44\ueb45\ueb44\ueb51\ueb52 \ueb53\ueb4e \ueb40 \ueb4f\ueb4e\ueb4f\ueb54\ueb4b\ueb40\ueb51 \ueb41\ueb51\ueb4e\ueb40\ueb43\ueb42\ueb40\ueb52\ueb53 \ueb44\ueb4d\ueb53\ueb48\ueb53\ueb58 \ueb42\ueb40\ueb4b\ueb4b\ueb44\ueb43 \"\ueb4c\ueb40\ueb51\ueb4a\ueb44\ueb51 \ueb4f\ueb4b\ueb48\ueb44\ueb51\" \ueb48\ueb4d \ueb51\ueb44\ueb40\ueb42\ueb53\ueb48\ueb4e\ueb4d \ueb53\ueb4e \ueb53\ueb47\ueb44 \ueb45\ueb51\ueb44\ueb43\ueb43\ueb58 \ueb45\ueb40\ueb59\ueb41\ueb44\ueb40\ueb51\ueb5f</p> <p> </p> <p>\ueb53\ueb47\ueb44\ueb58 \ueb4c\ueb4e\ueb52\ueb53 \ueb42\ueb4e\ueb4c\ueb4c\ueb4e\ueb4d\ueb4b\ueb58 \ueb55\ueb40\ueb4b\ueb54\ueb44 \ueb40\ueb4d \ueb40\ueb4d\ueb48\ueb4c\ueb40\ueb4b \ueb51\ueb44\ueb45\ueb44\ueb51\ueb51\ueb44\ueb43 \ueb53\ueb4e \ueb4e\ueb45\ueb53\ueb44\ueb4d \ueb40\ueb52 \"kiggy :3\" \ueb56\ueb47\ueb48\ueb42\ueb47 \ueb56\ueb44 \ueb41\ueb44\ueb4b\ueb48\ueb44\ueb55\ueb44 \ueb53\ueb4e \ueb41\ueb44 \ueb4e\ueb4d\ueb44 \ueb4e\ueb45 \ueb53\ueb47\ueb44\ueb48\ueb51 \"All Powerful Beings\"\ueb5f \ueb53\ueb47\ueb48\ueb52 \ueb4e\ueb4d\ueb44 \ueb47\ueb40\ueb52 \ueb41\ueb44\ueb44\ueb4d \ueb46\ueb48\ueb55\ueb44\ueb4d \ueb40 \ueb46\ueb48\ueb45\ueb53 \ueb52\ueb47\ueb4e\ueb56\ueb4d \ueb40\ueb52 \ueb40 \ueb42\ueb4e\ueb4d\ueb44 \ueb52\ueb47\ueb40\ueb4f\ueb44\ueb43 \ueb47\ueb44\ueb40\ueb43 \ueb4c\ueb4e\ueb54\ueb4d\ueb53\ueb44\ueb43 \ueb40\ueb4f\ueb4f\ueb40\ueb51\ueb40\ueb53\ueb54\ueb52 \ueb54\ueb52\ueb44\ueb43 \ueb53\ueb4e \ueb4a\ueb44\ueb44\ueb4f \ueb52\ueb54\ueb52\ueb53\ueb44\ueb4d\ueb40\ueb4d\ueb42\ueb44 \ueb42\ueb4b\ueb4e\ueb52\ueb44 \ueb53\ueb4e \ueb53\ueb47\ueb44\ueb48\ueb51 \ueb42\ueb4e\ueb4d\ueb52\ueb54\ueb4c\ueb4f\ueb53\ueb48\ueb4e\ueb4d \ueb4e\ueb51\ueb48\ueb45\ueb48\ueb42\ueb44 \ueb53\ueb4e \ueb4c\ueb48\ueb4d\ueb48\ueb4c\ueb48\ueb59\ueb44 \ueb40\ueb42\ueb53\ueb48\ueb4e\ueb4d\ueb5f \ueb53\ueb47\ueb48\ueb52 \ueb44\ueb4d\ueb53\ueb48\ueb53\ueb58 \ueb48\ueb52 \ueb42\ueb40\ueb4b\ueb4b\ueb44\ueb43 \"Jambo\":</p> <p> </p> <p>\ueb40\ueb4d\ueb4e\ueb53\ueb47\ueb44\ueb51 \ueb40\ueb4b\ueb4b \ueb4f\ueb4e\ueb56\ueb44\ueb51\ueb45\ueb54\ueb4b \ueb41\ueb44\ueb48\ueb4d\ueb46 \ueb53\ueb47\ueb44\ueb58 \ueb51\ueb44\ueb46\ueb54\ueb4b\ueb40\ueb51\ueb4b\ueb58 \ueb42\ueb4e\ueb4c\ueb4c\ueb54\ueb4d\ueb44 \ueb56\ueb48\ueb53\ueb47 \ueb48\ueb52 \"Jesus Christ\", \ueb40\ueb4b\ueb52\ueb4e \ueb42\ueb40\ueb4b\ueb4b\ueb44\ueb43 \"The Son of God\", \ueb40 \ueb4f\ueb51\ueb4e\ueb4c\ueb48\ueb4d\ueb44\ueb4d\ueb53 \ueb51\ueb44\ueb4b\ueb48\ueb46\ueb48\ueb4e\ueb54\ueb52 \ueb45\ueb48\ueb46\ueb54\ueb51\ueb44\ueb5f</p> <p> </p>"},{"location":"races/kirivian/","title":"Playable Races: Kirivian","text":"<p>Nothing on this page is a promised feature or guaranteed to be in the game.</p> <p>If you are seeing this warning bubble, here is a reminder that this project is in early development. Anything you see here is NOT a promise or guarantee. Features on this page WILL BE ADDED, REMOVED, OR CHANGED WITHOUT ANY SORT OF NOTICE. If I find you on twitter.com saying how I \"broke promises\" because you saw something on this page that I removed later, I will point at you and laugh for being a dummy idiot doodoo bref dummy head, a real stinker, perhaps dare I say, a poopyhead even.</p> <p>Information recently trimmed</p> <p>I am focusing on lore for the game, meaning things are in a constant state of flux. Cultural values and other relevant information of the sort have been removed from the page. They will be re-added at a later date. Sorry!</p> <p>This document written in-character, as if you were reading a manifest from the game's lorebook.</p>"},{"location":"races/kirivian/#key-overview","title":"Key Overview","text":"Attribute Associated Information Home World Numala (Colaras System (G0Ia+)[^disp:[Anomaly 1]], Planet \u2116 4) Propagation Technique Sexual Reproduction (Male/Female), Live birth Average Height 1.5m Average Mass 59kg Average Lifespan 54.8 Years"},{"location":"races/kirivian/#overview","title":"Overview","text":"<p>\u00a0\u00a0Kirivians are furred bipeds who exist in nomadic tribes, often compared to cats due to a number of similarities in facial structure to Gaian domesticated feline species. They are highly social and extremely welcoming to their peers, strangers and family alike. It is a level of unity unseen in other races, and stands out as an oddity compared to other races in the ISCA.</p>"},{"location":"races/kirivian/#phenotype","title":"Phenotype","text":"<p>\u00a0\u00a0Kirivians tend to have fur lengths ranging from 2cm to 5cm depending on genetics. They often have two coats of fur of different colors. The coats tend to be Silver, Gunmetal, Orange, Dusty Red, Brown, Gold, or White.</p> <p>\u00a0\u00a0They have two eyes with round pupils. They do not have an iris, and instead the sclera of their eye is colored. Typical colors are Green, Yellow, Blue, and Orange.</p> <p>\u00a0\u00a0Their appendages are bipedal in nature, but unlike Gaians they only have three fingers and a thumb instead of four. Their fingers are also composed of only two joints rather than three. Unlike the cats they are often compared to, they do not have claws. Their legs are digitigrade-like, with a distinct three-segment build. Curiously, they are hooved, and do not have paws on their feet like one might expect. The hooves are not split, and are shaped somewhat like hockey pucks.</p> <p>\u00a0\u00a0The Kirivian digestive system is effectively identical to that of most mammals on Gaia, functionally. They do not have organs like the pancreas and gall bladder, as these enzymes are generated naturally within their stomachs.</p> <p>\u00a0\u00a0The Kirivian respiratory system is also identical to most mammals on Earth, with two lungs. Unlike mammals, their trachea does not share space with their esophagus, and instead their mouth only goes to their stomach, their noses only go into their lungs.</p>"},{"location":"races/novan/","title":"Playable Races: Novan","text":"<p>Nothing on this page is a promised feature or guaranteed to be in the game.</p> <p>If you are seeing this warning bubble, here is a reminder that this project is in early development. Anything you see here is NOT a promise or guarantee. Features on this page WILL BE ADDED, REMOVED, OR CHANGED WITHOUT ANY SORT OF NOTICE. If I find you on twitter.com saying how I \"broke promises\" because you saw something on this page that I removed later, I will point at you and laugh for being a dummy idiot doodoo bref dummy head, a real stinker, perhaps dare I say, a poopyhead even.</p> <p>Information recently trimmed</p> <p>I am focusing on lore for the game, meaning things are in a constant state of flux. Cultural values and other relevant information of the sort have been removed from the page. They will be re-added at a later date. Sorry!</p> <p>This document written in-character, as if you were reading a manifest from the game's lorebook.</p>"},{"location":"races/novan/#key-overview","title":"Key Overview","text":"Attribute Associated Information Home World Arcnova (NEC-Core System (Pulsar), Planet \u2116 1) Propagation Technique Natural Mutagen-Enhanced Cloning Process Average Height 3.2m Average Mass 104kg Average Lifespan 224.6 Years"},{"location":"races/novan/#overview","title":"Overview","text":"<p>\u00a0\u00a0Novan are exoskeletal, tall, slender bipeds. Unlike most races, they are incapable of speech and auditory speech processing, as they do so through visual stimulus. They are perhaps the furthest from typically expected bipedal life and, for lack of a better word, the most \"alien\".</p>"},{"location":"races/novan/#phenotype","title":"Phenotype","text":"<p>\u00a0\u00a0Novan are often colored all black, with slight shades of either red, violet, or blue. They often have lines or regions of bright cyan or magenta glowing parts, typically in joints or parts of the chitin which must buckle or bend. Their panels are typically solid, not unlike an insect's exoskeleton. Their chitin panels are typically 3 to 5 centimeters thick, and in total make up around 20% of their body mass. For this reason, they are extremely strong.</p> <p>\u00a0\u00a0Novan have five eye-like lobes shaped in a pentagonal formation, with one eye centered on their forehead. These are not all eyes, however, and each pair serves a different purpose.<sup>1</sup></p> <ul> <li>The odd forehead eye is used for empathic communication with nearby peers and other races. </li> <li>The lowermost pair is used for communication, and are asymmetrical. Through triboluminescense, UV and X-Ray radiation can be fired off in short bursts towards their peers via the left of the pair. The right side has an organ sensitive to these flashes. This is how they communicate, through a series of specifically timed flashes.</li> <li>The middle pair can see within the infrared spectrum, and is used for navigation of hazards on their world. This vision is not particularly clear, and so Novan vision is poor.</li> </ul> <p>\u00a0\u00a0Novan have four long, pointed ears. These are used for locating prey and threats, and are independently controllable. This allows them to form full 3D maps of their surroundings, including with vertical discretion. They are extremely sensitive. Novan report that they can often hear people using cloaking technology.</p> <ul> <li>To reiterate, they are not capable of auditory processing. Their brains are incapable of breaking sounds apart to identify them as speech.</li> </ul> <p>\u00a0\u00a0The Novan digestive system classifies them as hemophages - blood eaters. Under both of their forearms are two large tubules which contain silicate spears approximately 30cm long and 2cm in diameter. These needles are connected through a long, stretchy artery directly to their lymphatic system. To eat, they launch these spears at prey and \"drink\" their blood, passing it through the lymphatic system to clean out contaminants like viruses and bacteria, and then directly integrate the blood into their own systems. Most importantly:</p> <ul> <li>They do not have a waste system. As a consequence, they lack all faculties required for digestion of food items. They do not have a stomach nor do they have intestines. They do not have mouths.</li> <li>If one of their feeding spears breaks, it can easily be regrown. The same is true for the filament connecting it back to their body.</li> <li>Spears are typically launched at a velocity of 50m/s.</li> </ul> <p>\u00a0\u00a0The Novan respiratory system works a bit like above-water gills. It is exposed through six slits located on their backs. These gills absorb carbon dioxide and split the carbon atom off, which is used to construct parts of their chitin and in biological chemical reactions. The gills secrete and dispose of oxygen and cellular waste molecules.</p> <ol> <li> <p>This five-eye setup and the use of masks was loosely inspired by the Urzuk from Creatures of Sonaria.\u00a0\u21a9</p> </li> </ol>"}]}